(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    909326,      16077]
NotebookOptionsPosition[    906426,      15987]
NotebookOutlinePosition[    906786,      16003]
CellTagsIndexPosition[    906743,      16000]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "a={{1,2,3},{4,5,6},{7,8,9}}", 
   Typeset`newq$$ = "a={{1,2,3},{4,5,6},{7,8,9}}", Typeset`chosen$$ = 
   "a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "a={{1,2,3},{4,5,6},{7,8,9}}", 
                  Defer[Global`a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"a", " ", "==", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                   "}"}]}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"a", " ", "==", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                   "}"}]}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "a={{1,2,3},{4,5,6},{7,8,9}}", 
                    Defer[Global`a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"a", "\[Equal]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.668693853306346*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "a={{1,2,3},{4,5,6},{7,8,9}};b={{10,20,30},{40,50,60},{70,80,90}};", 
   Typeset`newq$$ = 
   "a={{1,2,3},{4,5,6},{7,8,9}};b={{10,20,30},{40,50,60},{70,80,90}};", 
   Typeset`chosen$$ = 
   "{a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, b == {{10, 20, 30}, {40, 50, \
60}, {70, 80, 90}}}", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "a={{1,2,3},{4,5,6},{7,8,9}};b={{10,20,30},{40,50,60},{70,80,\
90}};", 
                  
                  Defer[{Global`a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 
                    Global`b == {{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}}], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}], ",", " ", 
                   RowBox[{"b", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"10", ",", " ", "20", ",", " ", "30"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"40", ",", " ", "50", ",", " ", "60"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"70", ",", " ", "80", ",", " ", "90"}], "}"}]}], 
                    "}"}]}]}], "}"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}], ",", " ", 
                   RowBox[{"b", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"10", ",", " ", "20", ",", " ", "30"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"40", ",", " ", "50", ",", " ", "60"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"70", ",", " ", "80", ",", " ", "90"}], "}"}]}], 
                    "}"}]}]}], "}"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"b", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"10", ",", " ", "20", ",", " ", "30"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"40", ",", " ", "50", ",", " ", "60"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"70", ",", " ", "80", ",", " ", "90"}], "}"}]}], 
                    "}"}]}]}], "}"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "a={{1,2,3},{4,5,6},{7,8,9}};b={{10,20,30},{40,50,60},{70,\
80,90}};", 
                    
                    Defer[{Global`a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 
                    Global`b == {{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}}], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"b", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"10", ",", " ", "20", ",", " ", "30"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"40", ",", " ", "50", ",", " ", "60"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"70", ",", " ", "80", ",", " ", "90"}], "}"}]}], 
                    "}"}]}]}], "}"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"b", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"10", ",", " ", "20", ",", " ", "30"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"40", ",", " ", "50", ",", " ", "60"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"70", ",", " ", "80", ",", " ", "90"}], "}"}]}], 
                    "}"}]}]}], "}"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"a", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", " ", "8", ",", " ", "9"}], "}"}]}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"b", " ", "==", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"10", ",", " ", "20", ",", " ", "30"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"40", ",", " ", "50", ",", " ", "60"}], "}"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"70", ",", " ", "80", ",", " ", "90"}], "}"}]}], 
                    "}"}]}]}], "}"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Equal]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"b", "\[Equal]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"10", ",", "20", ",", "30"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"40", ",", "50", ",", "60"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "80", ",", "90"}], "}"}]}], "}"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.668693887611147*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "a={{1,2,3},{4,5,6},{7,8,9}};b={{10,20,30},{40,50,60},{70,80,90}};Plot(a,b)\
;", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Dimensions", "Dimensions", 1, 1, "Input", 
        "Dimensions[{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> "Input"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"b == {{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"b", "\[LongEqual]", 
               TagBox[
                RowBox[{"(", "\[NoBreak]", 
                  
                  GridBox[{{"10", "20", "30"}, {"40", "50", "60"}, {
                    "70", "80", "90"}}, RowSpacings -> 1, ColumnSpacings -> 1,
                    RowAlignments -> Baseline, ColumnAlignments -> Center], 
                  "\[NoBreak]", ")"}], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Dimensions", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "List", "title" -> "Dimensions"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dimensions[{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              FormBox[
               TemplateBox[{"3", 
                 TemplateBox[{
                   StyleBox["\" (rows)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" \[Times] \""}, 
                  "RowDefault"], "3", 
                 TemplateBox[{
                   StyleBox["\" (columns)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}, 
                "RowDefault"], TraditionalForm], 
              Format[#, TraditionalForm]& ], TraditionalForm], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MatrixPlot", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "List", "title" -> "Matrix plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "MatrixPlot[{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}]"}], 
       XMLElement[
       "moutput", {}, {"{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             
             RasterBox[{{{0.9068285986415744, 0.5163040947893843, 
              0.0046387333791289564`}, {0.9534142993207871, 
              0.47377728581690925`, 0.0023193666895644782`}, {1., 
              0.4312504768444343, 0.}}, {{0.8955825485009424, 
              0.7133746872364464, 0.31087744336226963`}, {0.8779125304644959, 
              0.6361026912635918, 0.1589173227932198}, {0.8602428979623615, 
              0.5588309037618593, 0.006958100068693434}}, {{
              0.8763050235334635, 0.8352842574311219, 0.5904334864459317}, {
              0.894778686604383, 0.8129653054610794, 0.526635260702941}, {
              0.9132523496753023, 0.7906463534910368, 
              0.4628370349599504}}}, {{0, 0}, {3, 3}}, {0, 1}], Frame -> True,
              FrameLabel -> {None, None}, FrameTicks -> {{{{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}, {{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}}, {{{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}}, {{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}}}}, ImageSize -> 75], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "minput,moutput,computabledata,formatteddata"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Determinant", "numsubpods" -> "1", 
     "position" -> "400", "scanner" -> "List", "title" -> "Determinant"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Det[{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}]"}], 
       XMLElement["moutput", {}, {"0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["0", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Determinant__Step-by-step solution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Trace", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "List", "title" -> "Trace"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Tr[{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}]"}], 
       XMLElement["moutput", {}, {"150"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox["150", Identity], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`pod6$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "ConditionNumber", "numsubpods" -> "1",
      "position" -> "600", "scanner" -> "List", "title" -> 
     "Condition number"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\[Infinity]", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MatrixRank", "numsubpods" -> "1", 
     "position" -> "700", "scanner" -> "List", "title" -> "Matrix rank"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "MatrixRank[{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}]"}], 
       XMLElement["moutput", {}, {"2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["2", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "b={{10,20,30},{40,50,60},{70,80,90}}", "score" -> "0.5", "level" -> 
        "medium"}, {"\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.15", "level" -> "low"}, {"Plot(a,b)"}], 
        "\n  "}]}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "5.082", 
    "parsetiming" -> "0.897", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa13891hdhi10af7g5bf09000069g8bga3hg7hfg9d", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "12", "related" -> "", 
    "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:5.08155"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 38, 45.78872`8.413333480105694}, "Line" -> 5, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Dimensions", "Dimensions", 1, 1, "Input", 
    "Dimensions[{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "a={{1,2,3},{4,5,6},{7,8,9}};b={{10,20,30},{40,50,60},{70,80,90}};Plot(a,b)\
;"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{415., {64., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.668693925848547*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"a", " ", "+", " ", "b"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"a", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"b", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJyFnG9sXuV5xqM2/G21rd36RyENATzotlarxp+WL3s2sVVJgFCtH6imrusC
ga7F64S6apCQTdM+bF+21dDK06SJha44OG0pk6xKWD3JW8g2ZZ23l2CTvAET
J8Skhth+HSehKXjoPdfvProv212+HL2XT865z3Xu53nu+7rv51y17cu/t/0d
a9asWX/RmjXvfPt41Yu3/9vS0myVj0vVPV958h9H+mcCf+bDf3FtZ+TN6ol3
/eJf9ndOBl6fd6E6vfvP7unbPBX4pfuOvXug741qe+/vncDr/39W57cDv+3O
31nYNHBGeCvw+ne3WqN/bq/OL9meGa5f8n1PYk/J/3+Ko12nw/+z89vcJ/DX
st2Bu93YB5/8zscLYS84fGIvOHzCM3jms228dINn8KvNXrcLnvN9TwbP4LOy
D57B75V98Aw+J/vgOeNhX+DGZ+CvmR9k/i5Ubjd88jsfzwbP4PC5PfuF8dle
Nj7g2d8nz+H3h+f8eyp4ztfpBM/gs7IDnsHnsh2B2/v28+Gz+Pv28QOf2V+m
gk9/nuyfU3bsBs/gG238nU5+Fv657L3xfCvfp1XydTrxfMZ78Gz/P3gGt/ca
OHzCc8aDz8DvsXkq+93Z4BkcPm2eM/9snnOjXTcfZ/y53T+XvR+e268Hz8Zv
8GznBc/g9v78fPwy8Nk8HwV+b+bTrjO1bH6HT1tPgk8bD9XK60k7+PTn9//v
fp39q3kPmQ//f/hz2/9/4Pae/Hz8r/h7yv7cDv/M/txm/jd/buZ3nxfh09aZ
WI/c73x+8fnV/cnfx8r+21rGd+bZ/w5PLX8fxc/LPPv7mCpmj/HczC+Z55bz
WYyf/zf+8HXe50ufr30edX90/17ZT52v5rf/gz//DX/OO/yt7N9Tdn6si4Fb
/BG48Rm4x3keH3nctNo6v9q6tNo8+rPH/XI/XY3Xn31s27HxY/Nn8+Pw52Jx
RjF+3J/L1ZlPu37X52eLg5p4n/hz5fi0Yzw38+LK63/LeHa/8/Hs/rqcR/fX
lc+bWvZ3iyfsOjM+PxeLj+36XZ+fi9Y7jzcsHol1rBDPe15l8Wfl85/5tfPl
5y+bH/09rOaXPv6dd4sb7Diz7D1szHGwXb/r8Ybzafc96/Fz+Ketb8XyI8N9
fZtyXqr8/D5/TJlfNOvNyu9n+Tj3+XRlP55Z9j425njXjt1l/g6fFj87n4Er
H/F80OKXWPeK5UeVrw/wbOfHPA0+m57f89pmHPjz+Trk86avTz4vrOxnJ4NP
f0/w6feDT8sHnU+z54LrLwU9xNZDf87A57I/Gd7kCeD3Jj4bPWY2+2flz+Hr
uq9D/L7a5sd8Xjd4BodPj9fg098ffLodxmfg0ouCZ49HTK+D/1gnfb6H53yf
Ju/y8QTP/v7h2e1dJU4KnvPvbtgFDp+m1wWf2AUOnz4e4NPjOOPTjkv6++tV
Pr5peujrVfevTt7X33mL3/H//PnBX+3Z/ZRf3/kKXOf79cN+fnMf2RPX53pu
J7hdP94jdpr9cf36eLrKx7f4HX/nuez8YnjJx7dKtvt0dfnH1v3DSP9S/H/+
Xs8Pu+M87BVuvJwuuk6x8+P6dn5l14n7233jPlz/oatOjC4tNXlAd8uWX+uM
XKgOb3/wwNLSdNx3V++8Buf8jf3v+1hn5I3qxid+4X+Wlo7H+Xtv+e7+paUG
5/ytf//yDZ2Rc8qbJ+P8+roNzvk7vjd8c2dksTrS+/tEnH/J3/zuwaWlBuf8
Pc999Tc7IwtVX++8sTi/tqPBOX9i8bdv6YzMV9f18CrOv+u/OoeWlublF4Oj
4OT7nM913tXjczbOz3ryTHVFfX7JfDY457e+/8nHRvqnqw21nXH+EfEOzvkb
3jy6d6T/eDVR81Dy8zY45y/2/OCl6sqa55KfazJwzv92b54ar26or2f2TATO
+f/RG38/ql6o7Y3z4R2c8/+0d3y62lnzEed/WPyCc/6+nj8PhN+ybjzyjR3/
PNL/RvgneM3nueAjdOMj7xka6V+M5wb/UI/PhXg+8FuvHPreSP98PAf4gsYf
/gB+x7/v/Gp/58fhD+DDOvLewS/+1J6/7e9MxfsFf7bH54vxHsEf6o2L5+N9
gX+xx9PBeC/gT/aOI8E/+MuaN+AZfFNvXXsmeGYdvmlq73sG+s4Fz+B3r/3z
9w/0LQbP4APX3nLFQN9C8Axebfq5jQN988EzeOf5pzb3bT4dPIN/fN3mT/dt
/nHwDP7w5yY/27f5ZPAMTn4Nz+Bf/+8PvLxp4GjwDH5773kPBc/gl/fW6/8M
nsHPaD2CZ/DP9/gfLvAMPtTj9UDwDL6+52/PBc/ENS989KW/7u+cCZ7Baz/p
Bs/gN9z/lb/r78wFz+A/1HoJz6Gr9+btU8Ez+M6eX70SPIPX8+Sx4DnHuZ3g
Gbyel54LnsH31jwEz+D1PDAcPIOzvsNz8FC/l+AZ/Nb6PQbP4A/X7938uV09
+MDPn9800DV/bldD/3Tkp5sG5syf29XeHbe+c6DvdfPntupKp8yf2xoXr5g/
t6t9Pf8/Zv7crj7R8/Mj5s/tqD9mf25XW+txav7crs5r3c/+3K6+Wc8DJftz
u9pWzxsl+/Pb/NTzjPlzu2rV85L5c7u6qJ7HjOdWtf7Z3/pS3+Y547ml8fia
8dyq5t/7nVObBl41nlsapyeM55be18vGc6u6rPdeDhvPrWp/j///NZ7fvq+O
medWtfax3rpjPLc03p8umedWta9eB43nluaBceP57fvW67Lx3NL8cNx4fvv6
dZwQPBOn8huewfkNz+D8hmdwfsMzOL/hGZzf8Ayefw+Orkn/BkfhGYTf8AzO
b3gG5zc8g/MbnsH5Dc/g/IZncH6bP5f9itPMn8uHFI+ZP5cFxV3mz2VY8ZX5
czmgOMr8udyneMn8uRxSXGT+XGZ0NH8uP6j9v5g/l3pePez+XB6vx5f7c6nn
2xPuz2WuHr/uz+WRery7PxfNDz4/F+Iim5+V573o83PZqbjI5ufyBcVFNj8X
4iKbnwtxkc3PhbjI5mfpGG3juV1urOdz47kt/o8Zz+1yV71e+PxcLqnXF5+f
y3C9Hvn8rPc15/NzeaBe7zzeKMRFFm8U4iKLNwpxkcUbhbjI4o3yGcVFFm+U
bykusnijXKG4yOKNcjd/z/FGGa/jk2LxRqnXr1eKxRtlQx3/FIs3Skv6gcUb
5fo6vvJ4o9TrXdfjjTJRx28ePxfiIoufC3GRxc/lfsVFFj+H7mHxc1mruMji
57JFcZHFz2VAcZHFz+V1HS1+LgN1vG3+PFVuquNz8+epcriO582fp4rif/Pn
qfK1Ol/w+FnjYtHj53JjnY94Pihd7hnPB0MPsXywPK64yPJB+dvBYvlgIS6y
fLAQF1k+WIiL4Bl8j46WD5atdf5YLB8MfcjywaL8tFg+qPVooVg+WGbr/LdY
Pqh17Zzng+XhOr92vUjz5IDrQppvny6m/2je/lExnUf3GS+m5+h5Xyqm27DO
FtNhWJeD51zvmimmt0gHmy2mq2g+mS+mn5ShWl8qppMU6VTF9JBye613FdM9
ypW1blZM3yjztf4WPKPXbZTdpssJHyumv+l+E8V0Np0/WUxPC7tNNwu7TR/D
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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
c91fNaLvUutG5TgLUutG6aVLonNV7SU1i86zVmIvpT2ReA9lT+o6iWrXqsNs
yddau+gcWXXLKZlzNum99vlzKk5dF52T1svX7Pp8vXSNzmEb5jpxqsaE/8/I
nONJJ3ePzklVz+wGj0tcP7wpOj9VzbNHdExUvOgYPQ6qkV4fnVcqHrWJrgmo
pvp5as0pTXtQcTRx7f2y6LxYY7s7tS+SPwz5nJRf+jt1nUp1+HmpdZq09NzU
elUaW+OyJV/v8jPSKZrf8kXSdJWY552i6wmqu/aMzt9VP6yQxw6tp6ui6yfK
45U3aO/jHcbn5Og9KdWQp2bObxVnX8m8d/U9/G3qfEG5be3ovSTVQutE722p
znlr9JirDtwwej9LOvmU6D0m1UuXpq6taa9kUuY8XHqjUfSel+qoV0T7c+2B
jsy8r6b5/H0eZ6VXP02tXaVvx2ber1qtNR1db1G9dHTmPS3NvbrRe2SqjU/O
XBeQtvksdX6hHKRB9P6d6revZt6rWwqfl4+bNMk3qfM45fv1o7WK4vLXeaxX
Xj8xcx1BfmZM5n24VXCT6D01jee4zLnrGrhldO7/E7Z5dL1C518eXa/Qe51G
G5R4T+Ss6H067df8kLrmqf2sCZnz55+1PjLvI2rtt4quJ6i/cfSeoPLis6P3
7/SOV0bX3LTX2SK6vqFnuzqf85ozp0bvaWr/aHzm/FzP/D+cl+Wm
          "]], 
         Polygon3DBox[CompressedData["
1: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
Q//OlSMf/5Tjes/J8WnnX4l4M29d37/BS7teUqznr3Pk19ly6KHM+F7w4vBr
cIH7w0vkuH9ztIJ34/0f0+/RivN3hT+i/yPnz+v6qPnkpxLxr3uN36vwOTub
G2kf+l7Gr2H8GF6/BV6f9hB8L+Mztwl9YXxZJ0c8eqDquUGMn9SKHLhQCk1v
buxqHKI/nTbRawJ/7fygXey9yjGXndOuZWuCTeBtmqgVOuXQZuYYc42atk+K
mlKtqwZeL4XmVRurEddNobHVjmqEv+h3bkI7vJVibbnGPldr0qbRH2+e5f87
C/4Avt44B58Jvw9f57yD7696aiCfM7IVmqNJsQbUIqcx/g79q+nP3iY0/jYp
NJRa6nTG36V/jXGtTWiQf5qY42qTUxl/uwlt1pXxU+C3nL+uM/hk+E3nq+sC
no32iFo3xfnmrJxiTZnLrCmsla2ZrTUUT9ZS5lhz7RYl9MIA+t9z7tol8ttO
OfL1hiX0Sd8c+W+rEvlhvxz5b8sSemHfHPll+xLrSRNAvWO9eTq8TY58tFaJ
fLQj/DXcq4Q+2Bj+At64hD7qlyMfnQi/Bl+So54YCb8OX5qj3jgJfsP1DHdu
E2t28RQ1h2vZmLAYvGwTscKaZVl4lSZqGWPmEik0tbH09xS5wJyg1rEGWy5F
jWZtZo26QooazNq1fQ6t3rsJLWONsyq8ThO1jxp9tRQ1r9rdGmz5FDWNtdnK
JfLv1jn0gxqrlSJmqr2MiXOmiEnGyn/ga1No7kG891f4ghT3cDe4PdfgjhSa
bpi1OuNLwivAr/L+R3ltCP2Dee0MxrrBs5eIAye2ou2XogZ3zBr8qBQ1i7W5
79FneaTEZ83F992QQwNPqevLnJbrenNOOjefaWJum0NvzLH+za2b5FhLrilr
FWOKudMcaqxRI6mVzBnzw6vmiFPd6fcw9tBfnfH1GP+4jhnLjIGe45zaHz6k
ibnmHD8lxRx07htTN0sRo421xug1UmjIn+ocHZJijjp3zWFzpci55rYh8KZw
H/jHHBqlbYoaQu3yeYpYa8xVe1pjzJQiR1l7WGOoTbrV882hc6TIaeZWNf8C
KTwBawFrigVT1PTWGuY4tYqaxdynJps/RY2uVjNH9nRON5E7zaE94J5N5FZr
oo4pcqq1kjVFlxQ1h7WGNVqnFJrP2k2N3L7+XrXzJPj2FDlwYIkcaDx6uonc
qAZfKoVGVZsf3Yp8s6dhs4RmnSdFTlTL3ghfA99oDiuhIWZLUVM9UHOiXoEa
2Fx5LXw+fCm8eYma+uQUHoK1tppabW3Ong/esYQeGJyj3joKfgo+J0e9qUen
V6eH17WEx9W/zscZ6/xzPrlGXCt6dnp3emKzlPD89P705GYt4cnpzenxdS6h
EW9IUbOoHfWY9Jqs8fUmrdH1ro6v62GZHLWE81/tNLyuD2uCmUt4qHqpeqB6
rXoqelsnNOG1uL6G1vnr/F+ohGfqGj6jNmOBnp9jemh6aXoqeqd6Ypem0AR6
ZXosei16gnq3epSHpfAU9S7NiQPrenN9qgkG1fU9ZwlPwtpkWF3feop6i3qI
eqMnwwek0BRzl/DsLk6hgfXy9PzGwVc24QXunKMWM2eZu/TY9Nr0NPQy9eT0
5vQ09Hb1pa29zTHmGmsMvbXRTdQeeiB6P3qCeiN6LnpfenB6MXo0emd6Yno3
ejxnpfDU9H70mMbA45rwnvTQ9NL0oPRK9dj02syJ5kY9Lr0uPTy970Ny1FrW
XDvB++eoxcy55l49yPNSaHy9yaE5vBM9lL4lPMdLUtQkepHWDBPhSU3UEtYE
V6fwvK0V9Az1DvWo9Lb1fPR+RjbhvetZnZuiRtDLska4Cp7YRO1wJO1J+mfn
8GdOYfzAFB77vOY2eHAKT30B13MJ/+HIHP6Ev9nfPiRHvblHCb/oqBz+gznN
XHdEjlxnzjO3jay5cL8S/sxxOerTvUv4P8Nz6PsBJfyjY3Po+31L+EsjctQD
XmOv9cE5/JgDSvglJ+Xwsw4q4fecksO/Ohp+Fj4vh19yYAn/5WQTHnxECT/0
rBz+02El/NAzc/hhg0vo6VNz+F2L5qjN+vGatfQQ2lS6o3L4TSPgF+GxOfT3
MfBz8Pk5/Jzh8PPwBTn8n2PhF+ALc/hTagBz77k5tMGp/k8p9lR6Oj95fWqK
7/C73AO5DZ7cxN6I+Uv93KXmCz0YvVU9Cr0ZPZ5eVU/q/Vizqq8713ynnupR
85n6696a77rXfGWNcWMKj8baw5qke81P6i9rlm41fz5f9ZZ6Tn2nvrI+UM+p
z9S3elDqW/Wd9YI1vXpO/ac+0yOaDD/chHd0Wo7axnvivTk+h9fnnHJujfYz
UtwT7401r7XvS014UXpK96XwpPSa/vNsaj7Wy9Ej0CtQT+p9WeNZ6+kh6OVM
qfnb/PxG1ec9a/5Wn+oh9avx3bh9Bu09+tcy1r1NzCm9Vue8c+3mElpIzan2
vLVEbWRNZG10S4nayJrA2kDNpDacMYeWuqmEVlXDqmW9PhNrvvJ6OWcn1Hji
9XKN6P26pg+omlBtuDBtkRJrQq/RNe1acQ2Nr/HKtTWhxL3zHqrNJ8GbNVHT
WdtNLKGV1eBq8etLaHU1vlp/dInayxrKWmpMidrHmszaTM27EPhXCi2sRvP6
zFG1220ltJs1p7Xn7SVqS2s2a7cb4TWa0Pxqf9e03rIxxbV+Q4laQE2vtr8D
3qWJGtVaNdXPX6xqH9eoXq0xxbXrGr2nzj/XrjFFL9YYZKwxBo6t8d/YaIy8
qOa/vjX+j6v50fhujLi3zu8RdX1PrvPT+boj728Hzw7fzdhe8NwprtHjOWpM
57v6zdrTGK2XbI1n7LZmfTxFDLKWVc/rjRnjtmlFzftYihhpLXxuiVrGmtTa
1Jis92KNaKxWg42q+Vhtpga7ta4/tZk5Re/fmG2uMebpZRtzjYXGyEk1Xg2p
69X4pR4dWtfzVTXfGc/MEVfW/OX6tkbVm7fGtXY1R+gFqREH1Hw8puY/8505
44qan80l5ozRNd+bS6x3rN3dX7E2P6/Etbams7YbVSKWGlP1Jt4qkcvNseba
N0t8l9+plni7hLY155v73ylxr73naiE1r1p3n6qF3y2R+9VMaqdpJbT0fzkf
/qDEtfgvh8Pvw9c2ofHUervW7zu8avH3Smg/NYXa4pMSc8k5ZSz91DXfRAw0
Fg6s33dirQ2mlNACajq13eMltJ6aUe34WAntqCZUGz5cQouqGdQOD5XQDuYs
c9eDJXKXGkOt8XoJraYGU4tNL3HvnQPmso1aoU8eTOEPfMz4HU3kHHPPhyVi
mzFOrfRRiVykRlerX15ibVjzWfu5Rryf36RYO5eWqM2t2azdtmjF2ngiRXze
vBVrwTXj2tmqFfn5qRT+0matyM+uGdfOhSVqLWsya7ONW1GfPJTC79mkFbnI
NepavaBE7WZNaW25ZSv0wJMp/KrzS+Rac6615qatWNvWaM7PrVuR+9UA+l/G
hHbmqhSxYnyJ/KBHolcyrkStb01mbXZRidrMmtHa8ZISud6cb615WYlaWQ9D
L0OPoGMTXqDewRUlcp850Fr2yhK5zxxo7XpdiVxvztfLubpE7WtNbG08tkSt
ao1qrXpNCe/RGtla+aoStbM1sbXxtfBSTXiUepVe04dqftdbuynHHv+0JrxB
PVS91P7e4xK/2d8+Hf6ixJ6D/s86TfiXF5cY+4T2Zf089YKe+TfONfjjJjx/
/Uc9EL2Qz2hfl/CUfbbDPQy9Zu/J1Ko3/D3Wg+Ymc5T1nh65z1q4p6F3rmfv
XnTvJrz8c3jtmyaeWfD79dx9VkU/0nrS+sL6x/rGekpPz3rKesh6Q8/Oteka
tV7R43MvyXpL70+P0Pry+CbqL/d4fNbDPQT3ftzTca/YPQT3etzzcO9Dj9u9
IPfE3BvTY5+nxB6JeyX6we4lOYedy64ZvVjrPetj61vrNfdA9I/1i9XP7gm5
N69f7F6Rz+z47I57TB1L7AnpJ+uHulfknrZaSE2kP+szQz475B5VhxL6XG1g
DjeX+0yNz9a4p9WpxBp2LbuG9I7dU/JZAfdAf6kazVjgmlS7uQej3t+zCd9N
T9NnJawZ9DqNUcYq17zeps/k+GxOP9dciT0F9/rdE3WvQQ/UZy+Mcf95o63Y
23EPwr0C9yx8dsg9M/cyfAbIZ4Hco+tSwnN079J6XC/SPQT3EvY25pXwYN0b
tF61XtYDdi9Uz1Jv2Hraetb61nrXPSKfzXCP170j/X21pJpSP///uqK9fg==

          "]], Polygon3DBox[CompressedData["
1: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
A3eyV9kudpBNYf/NJP9DHo/1yLiM+A0hPNI8
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0jkvBVEYgOGxr9cS0RINUVCKglIUVCIKOqKgIBEFpULodPwCWiL0Ejr7
cu1rRMTW2NfwnETxznMy92TmO5lb0t7b1JMQRdGwXhXWj7rUbGIU5XGBxVxn
JU9Zywc28pttzE6Kopi6rcs5yGqOsp4TbOEUOznPfi7xntd817aewz0tG2iH
K4xzlbtc416Yifvc4AE3uaXD8BwecYfHjPOEuzzlHs+4z3NOO8cNP3Shl3BG
jZlti0NcZB/n2MFJNnOcdRxhFQdYxlJ1WWewlZ/e0cA71vCYFeFcLOKtfVd8
U66ewl4VmjGHBYwxn9lhD7MYYyazmBHex3SmMkVp1klMDd843OOvkvUTftOX
jBHNuNz+/x/+AMQfSu8=
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{690, 1000, 473, 689, 1106, 912, 691, 1107, 913, 692, 1108, 
       914, 693, 1109, 915, 694, 1110, 916, 695, 1111, 1006, 1206, 696, 1112, 
       917, 697, 1113, 918, 698, 1114, 919, 699, 1115, 920, 700, 1116, 921, 
       701, 1117, 922, 702, 1308, 1001, 923, 1002}], 
      Line3DBox[{704, 1007, 1207, 703, 488, 705, 1118, 924, 706, 1119, 925, 
       707, 1120, 926, 708, 1121, 927, 709, 1122, 1008, 1208, 710, 1009, 1209,
        711, 1123, 928, 712, 1124, 929, 713, 1125, 930, 714, 1126, 931, 715, 
       1127, 932, 716, 1128, 933, 717}], 
      Line3DBox[{719, 1010, 1210, 718, 1011, 1211, 720, 504, 721, 1129, 934, 
       722, 1130, 935, 723, 1131, 936, 724, 1132, 1012, 1212, 725, 1013, 1213,
        726, 1014, 1214, 727, 512, 728, 1133, 937, 729, 1134, 938, 730, 1135, 
       939, 731, 1136, 940, 732}], 
      Line3DBox[{734, 1015, 1215, 733, 1016, 1216, 735, 1017, 1217, 736, 520, 
       737, 1137, 941, 738, 1138, 942, 739, 1139, 1018, 1218, 740, 1019, 1219,
        741, 1020, 1220, 742, 1021, 1221, 743, 528, 744, 1140, 943, 745, 1141,
        944, 746, 1142, 945, 747}], 
      Line3DBox[{749, 1022, 1222, 748, 1023, 1223, 750, 1024, 1224, 751, 1025,
        1225, 752, 536, 753, 1143, 946, 754, 1144, 1026, 1226, 755, 1027, 
       1227, 756, 1028, 1228, 757, 1029, 1229, 758, 1030, 1230, 759, 1031, 
       1231, 760, 1145, 947, 761, 1146, 948, 762}], 
      Line3DBox[{764, 1032, 1232, 763, 1033, 1233, 765, 1034, 1234, 766, 1035,
        1235, 767, 1036, 1236, 768, 552, 769, 1147, 1037, 1237, 770, 1038, 
       1238, 771, 1039, 1239, 772, 1040, 1240, 773, 1041, 1241, 774, 1042, 
       1242, 775, 560, 776, 1148, 949, 777}], 
      Line3DBox[{781, 1149, 950, 779, 1150, 951, 783, 1151, 952, 785, 1152, 
       953, 787, 1153, 954, 789, 1154, 955, 791, 1155, 569, 793, 1156, 956, 
       795, 1157, 957, 797, 1158, 958, 799, 1159, 959, 801, 1160, 960, 803, 
       1161, 961, 805, 1163, 963, 807}], 
      Line3DBox[{806, 962, 1162, 804, 1255, 1054, 802, 1254, 1053, 800, 1253, 
       1052, 798, 1252, 1051, 796, 1251, 1050, 794, 1250, 1049, 792, 1249, 
       568, 790, 1248, 1048, 788, 1247, 1047, 786, 1246, 1046, 784, 1245, 
       1045, 782, 1244, 1044, 778, 1243, 1043, 780}], 
      Line3DBox[{809, 1055, 1256, 808, 1164, 964, 810, 1165, 965, 811, 1166, 
       966, 812, 1167, 967, 813, 1168, 968, 814, 1169, 1056, 1257, 815, 585, 
       816, 1170, 969, 817, 1171, 970, 818, 1172, 971, 819, 1173, 972, 820, 
       1174, 973, 821, 1175, 974, 822}], 
      Line3DBox[{824, 1057, 1258, 823, 1058, 1259, 825, 1176, 975, 826, 1177, 
       976, 827, 1178, 977, 828, 1179, 978, 829, 1180, 1059, 1260, 830, 1060, 
       1261, 831, 601, 832, 1181, 979, 833, 1182, 980, 834, 1183, 981, 835, 
       1184, 982, 836, 1185, 983, 837}], 
      Line3DBox[{839, 1061, 1262, 838, 1062, 1263, 840, 609, 841, 1186, 984, 
       842, 1187, 985, 843, 1188, 986, 844, 1189, 1063, 1264, 845, 1064, 1265,
        846, 1065, 1266, 847, 617, 848, 1190, 987, 849, 1191, 988, 850, 1192, 
       989, 851, 1193, 990, 852}], 
      Line3DBox[{854, 1066, 1267, 853, 1067, 1268, 855, 1068, 1269, 856, 625, 
       857, 1194, 991, 858, 1195, 992, 859, 1196, 1069, 1270, 860, 1070, 1271,
        861, 1071, 1272, 862, 1072, 1273, 863, 633, 864, 1197, 993, 865, 1198,
        994, 866, 1199, 995, 867}], 
      Line3DBox[{869, 1073, 1274, 868, 1074, 1275, 870, 1075, 1276, 871, 1076,
        1277, 872, 641, 873, 1200, 996, 874, 1201, 1077, 1278, 875, 1078, 
       1279, 876, 1079, 1280, 877, 1080, 1281, 878, 1081, 1282, 879, 649, 880,
        1202, 997, 881, 1203, 998, 882}], 
      Line3DBox[{884, 1082, 1283, 883, 1083, 1284, 885, 1084, 1285, 886, 1085,
        1286, 887, 1086, 1287, 888, 657, 889, 1204, 1087, 1288, 890, 1088, 
       1289, 891, 1089, 1290, 892, 1090, 1291, 893, 1091, 1292, 894, 1092, 
       1293, 895, 665, 896, 1205, 999, 897}], 
      Line3DBox[{911, 1005, 685, 910, 1307, 1104, 909, 1306, 1103, 908, 1305, 
       1102, 907, 1304, 1101, 906, 1303, 1100, 905, 1302, 1099, 904, 1301, 
       1300, 1098, 903, 1299, 1097, 902, 1298, 1096, 901, 1297, 1095, 900, 
       1296, 1094, 899, 1295, 1093, 898, 1105, 1294, 1003, 1004}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{251, 474, 1106, 252, 488, 280, 1211, 503, 295, 1216, 518, 
       310, 1223, 533, 325, 1233, 548, 340, 1244, 563, 1150, 355, 578, 1164, 
       370, 1259, 593, 385, 1263, 608, 400, 1268, 623, 415, 1275, 638, 430, 
       1284, 653, 445, 1295, 668, 460}], 
      Line3DBox[{253, 475, 1107, 254, 489, 1118, 281, 504, 296, 1217, 519, 
       311, 1224, 534, 326, 1234, 549, 341, 1245, 564, 1151, 356, 579, 1165, 
       371, 594, 1176, 386, 609, 401, 1269, 624, 416, 1276, 639, 431, 1285, 
       654, 446, 1296, 669, 461}], 
      Line3DBox[{255, 476, 1108, 256, 490, 1119, 282, 505, 1129, 297, 520, 
       312, 1225, 535, 327, 1235, 550, 342, 1246, 565, 1152, 357, 580, 1166, 
       372, 595, 1177, 387, 610, 1186, 402, 625, 417, 1277, 640, 432, 1286, 
       655, 447, 1297, 670, 462}], 
      Line3DBox[{257, 477, 1109, 258, 491, 1120, 283, 506, 1130, 298, 521, 
       1137, 313, 536, 328, 1236, 551, 343, 1247, 566, 1153, 358, 581, 1167, 
       373, 596, 1178, 388, 611, 1187, 403, 626, 1194, 418, 641, 433, 1287, 
       656, 448, 1298, 671, 463}], 
      Line3DBox[{259, 478, 1110, 260, 492, 1121, 284, 507, 1131, 299, 522, 
       1138, 314, 537, 1143, 329, 552, 344, 1248, 567, 1154, 359, 582, 1168, 
       374, 597, 1179, 389, 612, 1188, 404, 627, 1195, 419, 642, 1200, 434, 
       657, 449, 1299, 672, 464}], 
      Line3DBox[{261, 479, 1111, 263, 493, 1122, 285, 508, 1132, 300, 523, 
       1139, 315, 538, 1144, 330, 553, 1147, 345, 568, 1155, 360, 583, 1169, 
       375, 598, 1180, 390, 613, 1189, 405, 628, 1196, 420, 643, 1201, 435, 
       658, 1204, 450, 1300, 673, 465}], 
      Line3DBox[{265, 481, 1112, 266, 1209, 495, 287, 1213, 510, 302, 1219, 
       525, 317, 1227, 540, 332, 1238, 555, 347, 1250, 570, 1156, 362, 585, 
       377, 1261, 600, 392, 1265, 615, 407, 1271, 630, 422, 1279, 645, 437, 
       1289, 660, 452, 1302, 675, 467}], 
      Line3DBox[{267, 482, 1113, 268, 496, 1123, 288, 1214, 511, 303, 1220, 
       526, 318, 1228, 541, 333, 1239, 556, 348, 1251, 571, 1157, 363, 586, 
       1170, 378, 601, 393, 1266, 616, 408, 1272, 631, 423, 1280, 646, 438, 
       1290, 661, 453, 1303, 676, 468}], 
      Line3DBox[{269, 483, 1114, 270, 497, 1124, 289, 512, 304, 1221, 527, 
       319, 1229, 542, 334, 1240, 557, 349, 1252, 572, 1158, 364, 587, 1171, 
       379, 602, 1181, 394, 617, 409, 1273, 632, 424, 1281, 647, 439, 1291, 
       662, 454, 1304, 677, 469}], 
      Line3DBox[{271, 484, 1115, 272, 498, 1125, 290, 513, 1133, 305, 528, 
       320, 1230, 543, 335, 1241, 558, 350, 1253, 573, 1159, 365, 588, 1172, 
       380, 603, 1182, 395, 618, 1190, 410, 633, 425, 1282, 648, 440, 1292, 
       663, 455, 1305, 678, 470}], 
      Line3DBox[{273, 485, 1116, 274, 499, 1126, 291, 514, 1134, 306, 529, 
       1140, 321, 1231, 544, 336, 1242, 559, 351, 1254, 574, 1160, 366, 589, 
       1173, 381, 604, 1183, 396, 619, 1191, 411, 634, 1197, 426, 649, 441, 
       1293, 664, 456, 1306, 679, 471}], 
      Line3DBox[{275, 486, 1117, 276, 500, 1127, 292, 515, 1135, 307, 530, 
       1141, 322, 545, 1145, 337, 560, 352, 1255, 575, 1161, 367, 590, 1174, 
       382, 605, 1184, 397, 620, 1192, 412, 635, 1198, 427, 650, 1202, 442, 
       665, 457, 1307, 680, 472}], 
      Line3DBox[{277, 682, 1308, 683, 278, 501, 1128, 293, 516, 1136, 308, 
       531, 1142, 323, 546, 1146, 338, 561, 1148, 353, 576, 1162, 1163, 368, 
       591, 1175, 383, 606, 1185, 398, 621, 1193, 413, 636, 1199, 428, 651, 
       1203, 443, 666, 1205, 458, 685, 686, 687}], 
      Line3DBox[{459, 667, 684, 1294, 444, 652, 1283, 429, 637, 1274, 414, 
       622, 1267, 399, 607, 1262, 384, 592, 1258, 369, 577, 1256, 354, 1149, 
       562, 1243, 339, 547, 1232, 324, 532, 1222, 309, 517, 1215, 294, 502, 
       1210, 279, 487, 1207, 250, 473, 681, 688}], 
      Line3DBox[{466, 674, 1301, 451, 659, 1288, 436, 644, 1278, 421, 629, 
       1270, 406, 614, 1264, 391, 599, 1260, 376, 584, 1257, 361, 569, 1249, 
       346, 554, 1237, 331, 539, 1226, 316, 524, 1218, 301, 509, 1212, 286, 
       494, 1208, 264, 480, 1206, 262}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJztyLENQFAABcAXYgsKMxhAZYE/gkSttsXfwhh2MQm1CRRXXXLjupetSdJ3
Sfs6THU5j/v6OHvvvffee++9995777333nvvvffee++9995777333nvvvffe
e++9995777333nvvvffee++9995777333nvvvffee++9995777333vt//gOY
ezif
    "]],
  AutomaticImageSize->True,
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{384.43080731140054`, 253.11832153381715`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-1.9999997142857142`, 1.9999997142857142`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.327937976194589, -2.8108687768391714`, 1.3362624932141283`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.668694023898226*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot3D[a + b, {a, -1, 1}, {b, -1, 1},{z,2,3}]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "3DPlot", "3D plot", 1, 1, "Input", 
        "Plot3D[a + b, {a, -1, 1}, {b, -1, 1}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"3D plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"a", "+", "b"}], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center], 
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"a", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], 
                    TagBox["1", HoldForm]}, "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm]}, {
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"b", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], 
                    TagBox["1", HoldForm]}, "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm]}, {
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"z", "\[LongEqual]", 
                    StyleBox[
                    TagBox["2", HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], 
                    TagBox["3", HoldForm]}, "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm]}}, 
                    GridBoxBackground -> {
                    "Columns" -> {None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 
                    Automatic], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "3DPlot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "3D plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot3D[a + b, {a, -1, 1}, {b, -1, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max2075$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`max2077$$ = 
                 0.5, CalculateUtilities`GraphicsUtilities`Private`min2074$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min2076$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2075$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2076$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["b", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2077$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["b", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1185956$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2074$\
1185961$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2075$1185962$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min2076$\
1185963$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2077$1185964$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$\
1185965$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$1185966$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
1185967$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$1185968$\
$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max2075$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`max2077$$ = 0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min2076$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateUtilities`GraphicsUtilities`Private`xmesh$\
$ = True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1185956$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2074$\
1185961$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2075$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2075$\
1185962$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2076$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2076$\
1185963$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2077$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2077$\
1185964$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$\
1185965$$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$\
1185966$$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$\
1185967$$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
1185968$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], HoldAll][Global`a + Global`b, {Global`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2075$$]], \

                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2075$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$ + 
                    Rational[1, 500], 
                    CalculateUtilities`GraphicsUtilities`Private`max2075$$]], 
                    1]}, {Global`b, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2076$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2076$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2076$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2077$$]], \

                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2076$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2077$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2076$$ + 
                    Rational[1, 500], 
                    CalculateUtilities`GraphicsUtilities`Private`max2077$$]], 
                    1]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["b", TraditionalForm]]}, BoxRatios -> Automatic, 
                    ImageSize -> {300.}, PlotRange -> Automatic, 
                    ClippingStyle -> Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["b", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2074$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2075$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2076$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["b", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2077$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["b", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+ARKfkQpDYh+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3k2HL5+tbO942AwljFoTSRXL9tC5pkERZIeAt0w5h0D/\
s0dH5fHTwVjIfleEB4R9dB4JxJiAyM4MMzH+9arzdQ9TEwDj0HGl06Tleeo7QVKS8rTCZnl+\
MbFZA3bAoNMlePmfsnNOgW58G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+\
D5bVt4KU5XE4f57TLkDTQ9IWqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TBetA2DzI5NjVdrbxl+uy28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgOmp7jG"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"ContourPlot[a + b, {a, -1, 1}, {b, -1, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max38$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max40$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min37$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min39$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min37$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max38$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min39$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["b", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max40$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["b", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$361910$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min37$\
361915$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max38$361916$$ = 0,
                  CalculateUtilities`GraphicsUtilities`Private`min39$361917$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`max40$361918$\
$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max38$$ = 0.5,
                     CalculateUtilities`GraphicsUtilities`Private`max40$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min37$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min39$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$361910$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min37$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min37$361915$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max38$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max38$361916$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min39$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min39$361917$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max40$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max40$361918$\
$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    ContourPlot[$CellContext`a + $CellContext`b, \
{$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min37$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min37$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min37$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max38$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min37$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max38$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min37$$ + 
                    Rational[1, 500], 
                    CalculateUtilities`GraphicsUtilities`Private`max38$$]], 
                    1]}, {$CellContext`b, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min39$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min39$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min39$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max40$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min39$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max40$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min39$$ + 
                    Rational[1, 500], 
                    CalculateUtilities`GraphicsUtilities`Private`max40$$]], 
                    1]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["b", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> {300.}, ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min37$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max38$$, 0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min39$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["b", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max40$$, 0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["b", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMGEVISEhoLzAmDShJ+\
d5b7KQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/JkYzSfq/X01et+SA5SW/\
g6bE1u3KWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnN/g+\
8KTgYOhXwzgzjOrJvoJ8yhJde0aKHdufTLhMgLOf9Onw1dbr50OPgqGMwBiqhB62RcynCjRNewh0zZ\
odDuKbPz4qj58KzmP6vaAiofqB9Y4VEAsjBXBMJ/jWS03UXczLgCCgyIWz5MS50/\
YCbRQT2ZjOcnzjXK622uKCyrSn5l5JzTr9+Ohv4gMZu5C8x+Xszo6/sDAuF3tnRfXPqRvg+\
W1beCVPVvKG6W1zpA0MO6Z6mc1nravkCala1gU/p+qCZstGYzx/wtT/SIdMm+\
UwXrQNg86ObIVXK28Z/mVbeJljy8+lfd+\
az95RAq6aDJXcPkpS8HkUzZQHXqDt09W5dXiMOxXfMTpDKljhRDbOsltcdzyswOsdIcbaTTYgHVFPg\
Ijm1LqI43aPZczsTkFBYoHn1/XLHhvLOpSAO9vXngnC7PjyhKxbm9AcpAt1B5NMv/\
xRcSu5nGky5P1AGJpRtVb0t7A+ypIryFgGRhLjBU29BnNYJTUCFSz7QQkS5yAYQrJf9uO++\
YeLlUCq9hWqS3kWB640p+\
FJ9MsCH1KRmWlzuw4cXcFti9lE8qRWXcTSdHHabI7pfpPpxg3NgR5KQmhJwgd6tyd0e8Jf3BOWduBu\
SeiWhG5J6JaEbkn4f5cEFzH+K/0G1Oq2xg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.743", 
    "parsetiming" -> "1.39", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSPa406222bi1i37c400gfdd00004882fb8ihi8h5d7f", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "20", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa406322bi1i37c400gfdd00000g9546f297hf8hd2&s=20", "version" -> "2.6", 
    "profile" -> "EnterDoQuery:0.,StartWrap:1.74314"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 43, 56.164406`8.502036143990972}, "Line" -> 11, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "3DPlot", "3D plot", 1, 1, "Input", 
    "Plot3D[a + b, {a, -1, 1}, {b, -1, 1}]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Plot3D[a + b, {a, -1, 1}, {b, -1, 1},{z,2,3}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{295., {45., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJyFnG9sXuV5xqM2/G21rd36RyENATzotlarxp+WL3s2sVVJgFCtH6imrusC
ga7F64S6apCQTdM+bF+21dDK06SJha44OG0pk6xKWD3JW8g2ZZ23l2CTvAET
J8Skhth+HSehKXjoPdfvProv212+HL2XT865z3Xu53nu+7rv51y17cu/t/0d
a9asWX/RmjXvfPt41Yu3/9vS0myVj0vVPV958h9H+mcCf+bDf3FtZ+TN6ol3
/eJf9ndOBl6fd6E6vfvP7unbPBX4pfuOvXug741qe+/vncDr/39W57cDv+3O
31nYNHBGeCvw+ne3WqN/bq/OL9meGa5f8n1PYk/J/3+Ko12nw/+z89vcJ/DX
st2Bu93YB5/8zscLYS84fGIvOHzCM3jms228dINn8KvNXrcLnvN9TwbP4LOy
D57B75V98Aw+J/vgOeNhX+DGZ+CvmR9k/i5Ubjd88jsfzwbP4PC5PfuF8dle
Nj7g2d8nz+H3h+f8eyp4ztfpBM/gs7IDnsHnsh2B2/v28+Gz+Pv28QOf2V+m
gk9/nuyfU3bsBs/gG238nU5+Fv657L3xfCvfp1XydTrxfMZ78Gz/P3gGt/ca
OHzCc8aDz8DvsXkq+93Z4BkcPm2eM/9snnOjXTcfZ/y53T+XvR+e268Hz8Zv
8GznBc/g9v78fPwy8Nk8HwV+b+bTrjO1bH6HT1tPgk8bD9XK60k7+PTn9//v
fp39q3kPmQ//f/hz2/9/4Pae/Hz8r/h7yv7cDv/M/txm/jd/buZ3nxfh09aZ
WI/c73x+8fnV/cnfx8r+21rGd+bZ/w5PLX8fxc/LPPv7mCpmj/HczC+Z55bz
WYyf/zf+8HXe50ufr30edX90/17ZT52v5rf/gz//DX/OO/yt7N9Tdn6si4Fb
/BG48Rm4x3keH3nctNo6v9q6tNo8+rPH/XI/XY3Xn31s27HxY/Nn8+Pw52Jx
RjF+3J/L1ZlPu37X52eLg5p4n/hz5fi0Yzw38+LK63/LeHa/8/Hs/rqcR/fX
lc+bWvZ3iyfsOjM+PxeLj+36XZ+fi9Y7jzcsHol1rBDPe15l8Wfl85/5tfPl
5y+bH/09rOaXPv6dd4sb7Diz7D1szHGwXb/r8Ybzafc96/Fz+Ketb8XyI8N9
fZtyXqr8/D5/TJlfNOvNyu9n+Tj3+XRlP55Z9j425njXjt1l/g6fFj87n4Er
H/F80OKXWPeK5UeVrw/wbOfHPA0+m57f89pmHPjz+Trk86avTz4vrOxnJ4NP
f0/w6feDT8sHnU+z54LrLwU9xNZDf87A57I/Gd7kCeD3Jj4bPWY2+2flz+Hr
uq9D/L7a5sd8Xjd4BodPj9fg098ffLodxmfg0ouCZ49HTK+D/1gnfb6H53yf
Ju/y8QTP/v7h2e1dJU4KnvPvbtgFDp+m1wWf2AUOnz4e4NPjOOPTjkv6++tV
Pr5peujrVfevTt7X33mL3/H//PnBX+3Z/ZRf3/kKXOf79cN+fnMf2RPX53pu
J7hdP94jdpr9cf36eLrKx7f4HX/nuez8YnjJx7dKtvt0dfnH1v3DSP9S/H/+
Xs8Pu+M87BVuvJwuuk6x8+P6dn5l14n7233jPlz/oatOjC4tNXlAd8uWX+uM
XKgOb3/wwNLSdNx3V++8Buf8jf3v+1hn5I3qxid+4X+Wlo7H+Xtv+e7+paUG
5/ytf//yDZ2Rc8qbJ+P8+roNzvk7vjd8c2dksTrS+/tEnH/J3/zuwaWlBuf8
Pc999Tc7IwtVX++8sTi/tqPBOX9i8bdv6YzMV9f18CrOv+u/OoeWlublF4Oj
4OT7nM913tXjczbOz3ryTHVFfX7JfDY457e+/8nHRvqnqw21nXH+EfEOzvkb
3jy6d6T/eDVR81Dy8zY45y/2/OCl6sqa55KfazJwzv92b54ar26or2f2TATO
+f/RG38/ql6o7Y3z4R2c8/+0d3y62lnzEed/WPyCc/6+nj8PhN+ybjzyjR3/
PNL/RvgneM3nueAjdOMj7xka6V+M5wb/UI/PhXg+8FuvHPreSP98PAf4gsYf
/gB+x7/v/Gp/58fhD+DDOvLewS/+1J6/7e9MxfsFf7bH54vxHsEf6o2L5+N9
gX+xx9PBeC/gT/aOI8E/+MuaN+AZfFNvXXsmeGYdvmlq73sG+s4Fz+B3r/3z
9w/0LQbP4APX3nLFQN9C8Axebfq5jQN988EzeOf5pzb3bT4dPIN/fN3mT/dt
/nHwDP7w5yY/27f5ZPAMTn4Nz+Bf/+8PvLxp4GjwDH5773kPBc/gl/fW6/8M
nsHPaD2CZ/DP9/gfLvAMPtTj9UDwDL6+52/PBc/ENS989KW/7u+cCZ7Baz/p
Bs/gN9z/lb/r78wFz+A/1HoJz6Gr9+btU8Ez+M6eX70SPIPX8+Sx4DnHuZ3g
Gbyel54LnsH31jwEz+D1PDAcPIOzvsNz8FC/l+AZ/Nb6PQbP4A/X7938uV09
+MDPn9800DV/bldD/3Tkp5sG5syf29XeHbe+c6DvdfPntupKp8yf2xoXr5g/
t6t9Pf8/Zv7crj7R8/Mj5s/tqD9mf25XW+txav7crs5r3c/+3K6+Wc8DJftz
u9pWzxsl+/Pb/NTzjPlzu2rV85L5c7u6qJ7HjOdWtf7Z3/pS3+Y547ml8fia
8dyq5t/7nVObBl41nlsapyeM55be18vGc6u6rPdeDhvPrWp/j///NZ7fvq+O
medWtfax3rpjPLc03p8umedWta9eB43nluaBceP57fvW67Lx3NL8cNx4fvv6
dZwQPBOn8huewfkNz+D8hmdwfsMzOL/hGZzf8Ayefw+Orkn/BkfhGYTf8AzO
b3gG5zc8g/MbnsH5Dc/g/IZncH6bP5f9itPMn8uHFI+ZP5cFxV3mz2VY8ZX5
czmgOMr8udyneMn8uRxSXGT+XGZ0NH8uP6j9v5g/l3pePez+XB6vx5f7c6nn
2xPuz2WuHr/uz+WRery7PxfNDz4/F+Iim5+V573o83PZqbjI5ufyBcVFNj8X
4iKbnwtxkc3PhbjI5mfpGG3juV1urOdz47kt/o8Zz+1yV71e+PxcLqnXF5+f
y3C9Hvn8rPc15/NzeaBe7zzeKMRFFm8U4iKLNwpxkcUbhbjI4o3yGcVFFm+U
bykusnijXKG4yOKNcjd/z/FGGa/jk2LxRqnXr1eKxRtlQx3/FIs3Skv6gcUb
5fo6vvJ4o9TrXdfjjTJRx28ePxfiIoufC3GRxc/lfsVFFj+H7mHxc1mruMji
57JFcZHFz2VAcZHFz+V1HS1+LgN1vG3+PFVuquNz8+epcriO582fp4rif/Pn
qfK1Ol/w+FnjYtHj53JjnY94Pihd7hnPB0MPsXywPK64yPJB+dvBYvlgIS6y
fLAQF1k+WIiL4Bl8j46WD5atdf5YLB8MfcjywaL8tFg+qPVooVg+WGbr/LdY
Pqh17Zzng+XhOr92vUjz5IDrQppvny6m/2je/lExnUf3GS+m5+h5Xyqm27DO
FtNhWJeD51zvmimmt0gHmy2mq2g+mS+mn5ShWl8qppMU6VTF9JBye613FdM9
ypW1blZM3yjztf4WPKPXbZTdpssJHyumv+l+E8V0Np0/WUxPC7tNNwu7TR/D
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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
c91fNaLvUutG5TgLUutG6aVLonNV7SU1i86zVmIvpT2ReA9lT+o6iWrXqsNs
yddau+gcWXXLKZlzNum99vlzKk5dF52T1svX7Pp8vXSNzmEb5jpxqsaE/8/I
nONJJ3ePzklVz+wGj0tcP7wpOj9VzbNHdExUvOgYPQ6qkV4fnVcqHrWJrgmo
pvp5as0pTXtQcTRx7f2y6LxYY7s7tS+SPwz5nJRf+jt1nUp1+HmpdZq09NzU
elUaW+OyJV/v8jPSKZrf8kXSdJWY552i6wmqu/aMzt9VP6yQxw6tp6ui6yfK
45U3aO/jHcbn5Og9KdWQp2bObxVnX8m8d/U9/G3qfEG5be3ovSTVQutE722p
znlr9JirDtwwej9LOvmU6D0m1UuXpq6taa9kUuY8XHqjUfSel+qoV0T7c+2B
jsy8r6b5/H0eZ6VXP02tXaVvx2ber1qtNR1db1G9dHTmPS3NvbrRe2SqjU/O
XBeQtvksdX6hHKRB9P6d6revZt6rWwqfl4+bNMk3qfM45fv1o7WK4vLXeaxX
Xj8xcx1BfmZM5n24VXCT6D01jee4zLnrGrhldO7/E7Z5dL1C518eXa/Qe51G
G5R4T+Ss6H067df8kLrmqf2sCZnz55+1PjLvI2rtt4quJ6i/cfSeoPLis6P3
7/SOV0bX3LTX2SK6vqFnuzqf85ozp0bvaWr/aHzm/FzP/D+cl+Wm
          "]], 
         Polygon3DBox[CompressedData["
1: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
Q//OlSMf/5Tjes/J8WnnX4l4M29d37/BS7teUqznr3Pk19ly6KHM+F7w4vBr
cIH7w0vkuH9ztIJ34/0f0+/RivN3hT+i/yPnz+v6qPnkpxLxr3uN36vwOTub
G2kf+l7Gr2H8GF6/BV6f9hB8L+Mztwl9YXxZJ0c8eqDquUGMn9SKHLhQCk1v
buxqHKI/nTbRawJ/7fygXey9yjGXndOuZWuCTeBtmqgVOuXQZuYYc42atk+K
mlKtqwZeL4XmVRurEddNobHVjmqEv+h3bkI7vJVibbnGPldr0qbRH2+e5f87
C/4Avt44B58Jvw9f57yD7696aiCfM7IVmqNJsQbUIqcx/g79q+nP3iY0/jYp
NJRa6nTG36V/jXGtTWiQf5qY42qTUxl/uwlt1pXxU+C3nL+uM/hk+E3nq+sC
no32iFo3xfnmrJxiTZnLrCmsla2ZrTUUT9ZS5lhz7RYl9MIA+t9z7tol8ttO
OfL1hiX0Sd8c+W+rEvlhvxz5b8sSemHfHPll+xLrSRNAvWO9eTq8TY58tFaJ
fLQj/DXcq4Q+2Bj+At64hD7qlyMfnQi/Bl+So54YCb8OX5qj3jgJfsP1DHdu
E2t28RQ1h2vZmLAYvGwTscKaZVl4lSZqGWPmEik0tbH09xS5wJyg1rEGWy5F
jWZtZo26QooazNq1fQ6t3rsJLWONsyq8ThO1jxp9tRQ1r9rdGmz5FDWNtdnK
JfLv1jn0gxqrlSJmqr2MiXOmiEnGyn/ga1No7kG891f4ghT3cDe4PdfgjhSa
bpi1OuNLwivAr/L+R3ltCP2Dee0MxrrBs5eIAye2ou2XogZ3zBr8qBQ1i7W5
79FneaTEZ83F992QQwNPqevLnJbrenNOOjefaWJum0NvzLH+za2b5FhLrilr
FWOKudMcaqxRI6mVzBnzw6vmiFPd6fcw9tBfnfH1GP+4jhnLjIGe45zaHz6k
ibnmHD8lxRx07htTN0sRo421xug1UmjIn+ocHZJijjp3zWFzpci55rYh8KZw
H/jHHBqlbYoaQu3yeYpYa8xVe1pjzJQiR1l7WGOoTbrV882hc6TIaeZWNf8C
KTwBawFrigVT1PTWGuY4tYqaxdynJps/RY2uVjNH9nRON5E7zaE94J5N5FZr
oo4pcqq1kjVFlxQ1h7WGNVqnFJrP2k2N3L7+XrXzJPj2FDlwYIkcaDx6uonc
qAZfKoVGVZsf3Yp8s6dhs4RmnSdFTlTL3ghfA99oDiuhIWZLUVM9UHOiXoEa
2Fx5LXw+fCm8eYma+uQUHoK1tppabW3Ong/esYQeGJyj3joKfgo+J0e9qUen
V6eH17WEx9W/zscZ6/xzPrlGXCt6dnp3emKzlPD89P705GYt4cnpzenxdS6h
EW9IUbOoHfWY9Jqs8fUmrdH1ro6v62GZHLWE81/tNLyuD2uCmUt4qHqpeqB6
rXoqelsnNOG1uL6G1vnr/F+ohGfqGj6jNmOBnp9jemh6aXoqeqd6Ypem0AR6
ZXosei16gnq3epSHpfAU9S7NiQPrenN9qgkG1fU9ZwlPwtpkWF3feop6i3qI
eqMnwwek0BRzl/DsLk6hgfXy9PzGwVc24QXunKMWM2eZu/TY9Nr0NPQy9eT0
5vQ09Hb1pa29zTHmGmsMvbXRTdQeeiB6P3qCeiN6LnpfenB6MXo0emd6Yno3
ejxnpfDU9H70mMbA45rwnvTQ9NL0oPRK9dj02syJ5kY9Lr0uPTy970Ny1FrW
XDvB++eoxcy55l49yPNSaHy9yaE5vBM9lL4lPMdLUtQkepHWDBPhSU3UEtYE
V6fwvK0V9Az1DvWo9Lb1fPR+RjbhvetZnZuiRtDLska4Cp7YRO1wJO1J+mfn
8GdOYfzAFB77vOY2eHAKT30B13MJ/+HIHP6Ev9nfPiRHvblHCb/oqBz+gznN
XHdEjlxnzjO3jay5cL8S/sxxOerTvUv4P8Nz6PsBJfyjY3Po+31L+EsjctQD
XmOv9cE5/JgDSvglJ+Xwsw4q4fecksO/Ohp+Fj4vh19yYAn/5WQTHnxECT/0
rBz+02El/NAzc/hhg0vo6VNz+F2L5qjN+vGatfQQ2lS6o3L4TSPgF+GxOfT3
MfBz8Pk5/Jzh8PPwBTn8n2PhF+ALc/hTagBz77k5tMGp/k8p9lR6Oj95fWqK
7/C73AO5DZ7cxN6I+Uv93KXmCz0YvVU9Cr0ZPZ5eVU/q/Vizqq8713ynnupR
85n6696a77rXfGWNcWMKj8baw5qke81P6i9rlm41fz5f9ZZ6Tn2nvrI+UM+p
z9S3elDqW/Wd9YI1vXpO/ac+0yOaDD/chHd0Wo7axnvivTk+h9fnnHJujfYz
UtwT7401r7XvS014UXpK96XwpPSa/vNsaj7Wy9Ej0CtQT+p9WeNZ6+kh6OVM
qfnb/PxG1ec9a/5Wn+oh9avx3bh9Bu09+tcy1r1NzCm9Vue8c+3mElpIzan2
vLVEbWRNZG10S4nayJrA2kDNpDacMYeWuqmEVlXDqmW9PhNrvvJ6OWcn1Hji
9XKN6P26pg+omlBtuDBtkRJrQq/RNe1acQ2Nr/HKtTWhxL3zHqrNJ8GbNVHT
WdtNLKGV1eBq8etLaHU1vlp/dInayxrKWmpMidrHmszaTM27EPhXCi2sRvP6
zFG1220ltJs1p7Xn7SVqS2s2a7cb4TWa0Pxqf9e03rIxxbV+Q4laQE2vtr8D
3qWJGtVaNdXPX6xqH9eoXq0xxbXrGr2nzj/XrjFFL9YYZKwxBo6t8d/YaIy8
qOa/vjX+j6v50fhujLi3zu8RdX1PrvPT+boj728Hzw7fzdhe8NwprtHjOWpM
57v6zdrTGK2XbI1n7LZmfTxFDLKWVc/rjRnjtmlFzftYihhpLXxuiVrGmtTa
1Jis92KNaKxWg42q+Vhtpga7ta4/tZk5Re/fmG2uMebpZRtzjYXGyEk1Xg2p
69X4pR4dWtfzVTXfGc/MEVfW/OX6tkbVm7fGtXY1R+gFqREH1Hw8puY/8505
44qan80l5ozRNd+bS6x3rN3dX7E2P6/Etbams7YbVSKWGlP1Jt4qkcvNseba
N0t8l9+plni7hLY155v73ylxr73naiE1r1p3n6qF3y2R+9VMaqdpJbT0fzkf
/qDEtfgvh8Pvw9c2ofHUervW7zu8avH3Smg/NYXa4pMSc8k5ZSz91DXfRAw0
Fg6s33dirQ2mlNACajq13eMltJ6aUe34WAntqCZUGz5cQouqGdQOD5XQDuYs
c9eDJXKXGkOt8XoJraYGU4tNL3HvnQPmso1aoU8eTOEPfMz4HU3kHHPPhyVi
mzFOrfRRiVykRlerX15ibVjzWfu5Rryf36RYO5eWqM2t2azdtmjF2ngiRXze
vBVrwTXj2tmqFfn5qRT+0matyM+uGdfOhSVqLWsya7ONW1GfPJTC79mkFbnI
NepavaBE7WZNaW25ZSv0wJMp/KrzS+Rac6615qatWNvWaM7PrVuR+9UA+l/G
hHbmqhSxYnyJ/KBHolcyrkStb01mbXZRidrMmtHa8ZISud6cb615WYlaWQ9D
L0OPoGMTXqDewRUlcp850Fr2yhK5zxxo7XpdiVxvztfLubpE7WtNbG08tkSt
ao1qrXpNCe/RGtla+aoStbM1sbXxtfBSTXiUepVe04dqftdbuynHHv+0JrxB
PVS91P7e4xK/2d8+Hf6ixJ6D/s86TfiXF5cY+4T2Zf089YKe+TfONfjjJjx/
/Uc9EL2Qz2hfl/CUfbbDPQy9Zu/J1Ko3/D3Wg+Ymc5T1nh65z1q4p6F3rmfv
XnTvJrz8c3jtmyaeWfD79dx9VkU/0nrS+sL6x/rGekpPz3rKesh6Q8/Oteka
tV7R43MvyXpL70+P0Pry+CbqL/d4fNbDPQT3ftzTca/YPQT3etzzcO9Dj9u9
IPfE3BvTY5+nxB6JeyX6we4lOYedy64ZvVjrPetj61vrNfdA9I/1i9XP7gm5
N69f7F6Rz+z47I57TB1L7AnpJ+uHulfknrZaSE2kP+szQz475B5VhxL6XG1g
DjeX+0yNz9a4p9WpxBp2LbuG9I7dU/JZAfdAf6kazVjgmlS7uQej3t+zCd9N
T9NnJawZ9DqNUcYq17zeps/k+GxOP9dciT0F9/rdE3WvQQ/UZy+Mcf95o63Y
23EPwr0C9yx8dsg9M/cyfAbIZ4Hco+tSwnN079J6XC/SPQT3EvY25pXwYN0b
tF61XtYDdi9Uz1Jv2Hraetb61nrXPSKfzXCP170j/X21pJpSP///uqK9fg==

          "]], Polygon3DBox[CompressedData["
1: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
A3eyV9kudpBNYf/NJP9DHo/1yLiM+A0hPNI8
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0jkvBVEYgOGxr9cS0RINUVCKglIUVCIKOqKgIBEFpULodPwCWiL0Ejr7
cu1rRMTW2NfwnETxznMy92TmO5lb0t7b1JMQRdGwXhXWj7rUbGIU5XGBxVxn
JU9Zywc28pttzE6Kopi6rcs5yGqOsp4TbOEUOznPfi7xntd817aewz0tG2iH
K4xzlbtc416Yifvc4AE3uaXD8BwecYfHjPOEuzzlHs+4z3NOO8cNP3Shl3BG
jZlti0NcZB/n2MFJNnOcdRxhFQdYxlJ1WWewlZ/e0cA71vCYFeFcLOKtfVd8
U66ewl4VmjGHBYwxn9lhD7MYYyazmBHex3SmMkVp1klMDd843OOvkvUTftOX
jBHNuNz+/x/+AMQfSu8=
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{690, 1000, 473, 689, 1106, 912, 691, 1107, 913, 692, 1108, 
       914, 693, 1109, 915, 694, 1110, 916, 695, 1111, 1006, 1206, 696, 1112, 
       917, 697, 1113, 918, 698, 1114, 919, 699, 1115, 920, 700, 1116, 921, 
       701, 1117, 922, 702, 1308, 1001, 923, 1002}], 
      Line3DBox[{704, 1007, 1207, 703, 488, 705, 1118, 924, 706, 1119, 925, 
       707, 1120, 926, 708, 1121, 927, 709, 1122, 1008, 1208, 710, 1009, 1209,
        711, 1123, 928, 712, 1124, 929, 713, 1125, 930, 714, 1126, 931, 715, 
       1127, 932, 716, 1128, 933, 717}], 
      Line3DBox[{719, 1010, 1210, 718, 1011, 1211, 720, 504, 721, 1129, 934, 
       722, 1130, 935, 723, 1131, 936, 724, 1132, 1012, 1212, 725, 1013, 1213,
        726, 1014, 1214, 727, 512, 728, 1133, 937, 729, 1134, 938, 730, 1135, 
       939, 731, 1136, 940, 732}], 
      Line3DBox[{734, 1015, 1215, 733, 1016, 1216, 735, 1017, 1217, 736, 520, 
       737, 1137, 941, 738, 1138, 942, 739, 1139, 1018, 1218, 740, 1019, 1219,
        741, 1020, 1220, 742, 1021, 1221, 743, 528, 744, 1140, 943, 745, 1141,
        944, 746, 1142, 945, 747}], 
      Line3DBox[{749, 1022, 1222, 748, 1023, 1223, 750, 1024, 1224, 751, 1025,
        1225, 752, 536, 753, 1143, 946, 754, 1144, 1026, 1226, 755, 1027, 
       1227, 756, 1028, 1228, 757, 1029, 1229, 758, 1030, 1230, 759, 1031, 
       1231, 760, 1145, 947, 761, 1146, 948, 762}], 
      Line3DBox[{764, 1032, 1232, 763, 1033, 1233, 765, 1034, 1234, 766, 1035,
        1235, 767, 1036, 1236, 768, 552, 769, 1147, 1037, 1237, 770, 1038, 
       1238, 771, 1039, 1239, 772, 1040, 1240, 773, 1041, 1241, 774, 1042, 
       1242, 775, 560, 776, 1148, 949, 777}], 
      Line3DBox[{781, 1149, 950, 779, 1150, 951, 783, 1151, 952, 785, 1152, 
       953, 787, 1153, 954, 789, 1154, 955, 791, 1155, 569, 793, 1156, 956, 
       795, 1157, 957, 797, 1158, 958, 799, 1159, 959, 801, 1160, 960, 803, 
       1161, 961, 805, 1163, 963, 807}], 
      Line3DBox[{806, 962, 1162, 804, 1255, 1054, 802, 1254, 1053, 800, 1253, 
       1052, 798, 1252, 1051, 796, 1251, 1050, 794, 1250, 1049, 792, 1249, 
       568, 790, 1248, 1048, 788, 1247, 1047, 786, 1246, 1046, 784, 1245, 
       1045, 782, 1244, 1044, 778, 1243, 1043, 780}], 
      Line3DBox[{809, 1055, 1256, 808, 1164, 964, 810, 1165, 965, 811, 1166, 
       966, 812, 1167, 967, 813, 1168, 968, 814, 1169, 1056, 1257, 815, 585, 
       816, 1170, 969, 817, 1171, 970, 818, 1172, 971, 819, 1173, 972, 820, 
       1174, 973, 821, 1175, 974, 822}], 
      Line3DBox[{824, 1057, 1258, 823, 1058, 1259, 825, 1176, 975, 826, 1177, 
       976, 827, 1178, 977, 828, 1179, 978, 829, 1180, 1059, 1260, 830, 1060, 
       1261, 831, 601, 832, 1181, 979, 833, 1182, 980, 834, 1183, 981, 835, 
       1184, 982, 836, 1185, 983, 837}], 
      Line3DBox[{839, 1061, 1262, 838, 1062, 1263, 840, 609, 841, 1186, 984, 
       842, 1187, 985, 843, 1188, 986, 844, 1189, 1063, 1264, 845, 1064, 1265,
        846, 1065, 1266, 847, 617, 848, 1190, 987, 849, 1191, 988, 850, 1192, 
       989, 851, 1193, 990, 852}], 
      Line3DBox[{854, 1066, 1267, 853, 1067, 1268, 855, 1068, 1269, 856, 625, 
       857, 1194, 991, 858, 1195, 992, 859, 1196, 1069, 1270, 860, 1070, 1271,
        861, 1071, 1272, 862, 1072, 1273, 863, 633, 864, 1197, 993, 865, 1198,
        994, 866, 1199, 995, 867}], 
      Line3DBox[{869, 1073, 1274, 868, 1074, 1275, 870, 1075, 1276, 871, 1076,
        1277, 872, 641, 873, 1200, 996, 874, 1201, 1077, 1278, 875, 1078, 
       1279, 876, 1079, 1280, 877, 1080, 1281, 878, 1081, 1282, 879, 649, 880,
        1202, 997, 881, 1203, 998, 882}], 
      Line3DBox[{884, 1082, 1283, 883, 1083, 1284, 885, 1084, 1285, 886, 1085,
        1286, 887, 1086, 1287, 888, 657, 889, 1204, 1087, 1288, 890, 1088, 
       1289, 891, 1089, 1290, 892, 1090, 1291, 893, 1091, 1292, 894, 1092, 
       1293, 895, 665, 896, 1205, 999, 897}], 
      Line3DBox[{911, 1005, 685, 910, 1307, 1104, 909, 1306, 1103, 908, 1305, 
       1102, 907, 1304, 1101, 906, 1303, 1100, 905, 1302, 1099, 904, 1301, 
       1300, 1098, 903, 1299, 1097, 902, 1298, 1096, 901, 1297, 1095, 900, 
       1296, 1094, 899, 1295, 1093, 898, 1105, 1294, 1003, 1004}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{251, 474, 1106, 252, 488, 280, 1211, 503, 295, 1216, 518, 
       310, 1223, 533, 325, 1233, 548, 340, 1244, 563, 1150, 355, 578, 1164, 
       370, 1259, 593, 385, 1263, 608, 400, 1268, 623, 415, 1275, 638, 430, 
       1284, 653, 445, 1295, 668, 460}], 
      Line3DBox[{253, 475, 1107, 254, 489, 1118, 281, 504, 296, 1217, 519, 
       311, 1224, 534, 326, 1234, 549, 341, 1245, 564, 1151, 356, 579, 1165, 
       371, 594, 1176, 386, 609, 401, 1269, 624, 416, 1276, 639, 431, 1285, 
       654, 446, 1296, 669, 461}], 
      Line3DBox[{255, 476, 1108, 256, 490, 1119, 282, 505, 1129, 297, 520, 
       312, 1225, 535, 327, 1235, 550, 342, 1246, 565, 1152, 357, 580, 1166, 
       372, 595, 1177, 387, 610, 1186, 402, 625, 417, 1277, 640, 432, 1286, 
       655, 447, 1297, 670, 462}], 
      Line3DBox[{257, 477, 1109, 258, 491, 1120, 283, 506, 1130, 298, 521, 
       1137, 313, 536, 328, 1236, 551, 343, 1247, 566, 1153, 358, 581, 1167, 
       373, 596, 1178, 388, 611, 1187, 403, 626, 1194, 418, 641, 433, 1287, 
       656, 448, 1298, 671, 463}], 
      Line3DBox[{259, 478, 1110, 260, 492, 1121, 284, 507, 1131, 299, 522, 
       1138, 314, 537, 1143, 329, 552, 344, 1248, 567, 1154, 359, 582, 1168, 
       374, 597, 1179, 389, 612, 1188, 404, 627, 1195, 419, 642, 1200, 434, 
       657, 449, 1299, 672, 464}], 
      Line3DBox[{261, 479, 1111, 263, 493, 1122, 285, 508, 1132, 300, 523, 
       1139, 315, 538, 1144, 330, 553, 1147, 345, 568, 1155, 360, 583, 1169, 
       375, 598, 1180, 390, 613, 1189, 405, 628, 1196, 420, 643, 1201, 435, 
       658, 1204, 450, 1300, 673, 465}], 
      Line3DBox[{265, 481, 1112, 266, 1209, 495, 287, 1213, 510, 302, 1219, 
       525, 317, 1227, 540, 332, 1238, 555, 347, 1250, 570, 1156, 362, 585, 
       377, 1261, 600, 392, 1265, 615, 407, 1271, 630, 422, 1279, 645, 437, 
       1289, 660, 452, 1302, 675, 467}], 
      Line3DBox[{267, 482, 1113, 268, 496, 1123, 288, 1214, 511, 303, 1220, 
       526, 318, 1228, 541, 333, 1239, 556, 348, 1251, 571, 1157, 363, 586, 
       1170, 378, 601, 393, 1266, 616, 408, 1272, 631, 423, 1280, 646, 438, 
       1290, 661, 453, 1303, 676, 468}], 
      Line3DBox[{269, 483, 1114, 270, 497, 1124, 289, 512, 304, 1221, 527, 
       319, 1229, 542, 334, 1240, 557, 349, 1252, 572, 1158, 364, 587, 1171, 
       379, 602, 1181, 394, 617, 409, 1273, 632, 424, 1281, 647, 439, 1291, 
       662, 454, 1304, 677, 469}], 
      Line3DBox[{271, 484, 1115, 272, 498, 1125, 290, 513, 1133, 305, 528, 
       320, 1230, 543, 335, 1241, 558, 350, 1253, 573, 1159, 365, 588, 1172, 
       380, 603, 1182, 395, 618, 1190, 410, 633, 425, 1282, 648, 440, 1292, 
       663, 455, 1305, 678, 470}], 
      Line3DBox[{273, 485, 1116, 274, 499, 1126, 291, 514, 1134, 306, 529, 
       1140, 321, 1231, 544, 336, 1242, 559, 351, 1254, 574, 1160, 366, 589, 
       1173, 381, 604, 1183, 396, 619, 1191, 411, 634, 1197, 426, 649, 441, 
       1293, 664, 456, 1306, 679, 471}], 
      Line3DBox[{275, 486, 1117, 276, 500, 1127, 292, 515, 1135, 307, 530, 
       1141, 322, 545, 1145, 337, 560, 352, 1255, 575, 1161, 367, 590, 1174, 
       382, 605, 1184, 397, 620, 1192, 412, 635, 1198, 427, 650, 1202, 442, 
       665, 457, 1307, 680, 472}], 
      Line3DBox[{277, 682, 1308, 683, 278, 501, 1128, 293, 516, 1136, 308, 
       531, 1142, 323, 546, 1146, 338, 561, 1148, 353, 576, 1162, 1163, 368, 
       591, 1175, 383, 606, 1185, 398, 621, 1193, 413, 636, 1199, 428, 651, 
       1203, 443, 666, 1205, 458, 685, 686, 687}], 
      Line3DBox[{459, 667, 684, 1294, 444, 652, 1283, 429, 637, 1274, 414, 
       622, 1267, 399, 607, 1262, 384, 592, 1258, 369, 577, 1256, 354, 1149, 
       562, 1243, 339, 547, 1232, 324, 532, 1222, 309, 517, 1215, 294, 502, 
       1210, 279, 487, 1207, 250, 473, 681, 688}], 
      Line3DBox[{466, 674, 1301, 451, 659, 1288, 436, 644, 1278, 421, 629, 
       1270, 406, 614, 1264, 391, 599, 1260, 376, 584, 1257, 361, 569, 1249, 
       346, 554, 1237, 331, 539, 1226, 316, 524, 1218, 301, 509, 1212, 286, 
       494, 1208, 264, 480, 1206, 262}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJztyLENQFAABcAXYgsKMxhAZYE/gkSttsXfwhh2MQm1CRRXXXLjupetSdJ3
Sfs6THU5j/v6OHvvvffee++9995777333nvvvffee++9995777333nvvvffe
e++9995777333nvvvffee++9995777333nvvvffee++9995777333vt//gOY
ezif
    "]],
  AutomaticImageSize->True,
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{336.21719227315157`, 261.00929320605667`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-1.9999997142857142`, 1.9999997142857142`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{2.715498096609836, 0.9530381563445501, -1.779828182679363},
  ViewVertical->{0., 0., -1.}]], "Output",
 CellChangeTimes->{3.668694236256876*^9}]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot3D[a + b+c, {a, -1, 1}, {b, -1, 1},{c,1,2},{a,b,c}]", Typeset`newq$$ =
    "Plot3D[a + b+c, {a, -1, 1}, {b, -1, 1},{c,1,2},{a,b,c}]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"",DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm]],"\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{13., {4., 9.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "Plot3D[a + b+c, {a, -1, 1}, {b, -1, 1},{c,1,2},{a,b,c}]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot3D[a + b + c, {a, -1, 1}, {b, -1, 1},{c,1,2}]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "3DContourPlot", "3D contour plot", 1, 1, "Input", 
        "ContourPlot3D[a + b + c, {a, -1, 1}, {b, -1, 1}, {c, 1, 2}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"3D plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"a", "+", "b", "+", "c"}], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center], 
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"a", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], 
                    TagBox["1", HoldForm]}, "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm]}, {
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"b", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], 
                    TagBox["1", HoldForm]}, "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm]}, {
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"c", "\[LongEqual]", 
                    StyleBox[
                    TagBox["1", HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], 
                    TagBox["2", HoldForm]}, "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm]}}, 
                    GridBoxBackground -> {
                    "Columns" -> {None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 
                    Automatic], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "3DContourPlot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "3D contour plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot3D[a + b + c, {a, -1, 1}, {b, -1, 1}, {c, 1, 2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[
             GraphicsComplex3DBox[CompressedData["
1:eJx03Xm43tPVPvBzMpuKBm9qqioxDzUV1R5ROqBtDK2hinpRQg1VQ4kKpWoe
W1PNlFYrKUqqODRUSEgQBCGDyCCjINPJOeeX933XZz2uda7fX8913df93Hvt
tdee93fvLx118v7HdGtqauq/cVNT9+W/e0y69rb72ia3XrjHQfus0n1a61eG
di75dtPilnMeOm3L+zsb+NQD717pO80NvGWHr1yzcucHyV+w3+H9L2yb1Lrs
6MMPH9R9Ruthv3t11MAhi1uGb7HmWf/umJg4HfijP9r5nuM7p3dJ95znHln7
a53TUoeddH7703tvPaRpSfLpwCcta7tybtv7aT987TET1p3X2cB37v3doYc0
N3D5qvrSxb/mpOfXGtU2JfFhu5518lFDGjrsh7MH/+2++ww4oWlp8tkPX3+n
l08evGx66/Xt39n4gG5T0p6D+gxtH9w0I3H2wAfO2/CE/TsmJ/+8Lxxz3o7L
PmhdeYOBOw/rNjXx4bP2WmWnpmmJ04GPXH3zXw/teD/5L99306KDlzX48iXd
y4f86ZMhHVMSZz++fOHTh/OnclHu/EZHnPAbXFzBu9/9t97vdUxNHfbQ3+Y/
86cObmpLe+CTT7h+4eDmBi4e8PlBOR5y+4hHLxrSln6D04Er35quOKHDTjoX
nvWH313ZtCz5dODyi3/5P+fuf0Lz0pafP9ttxu3LZiT+4H7HH3rDkIYOfKf1
d735yuYGvmD6v7a6sbPBFz/41X7+ly7/8GePOev1/eWQpekH+a04Ph04/9f4
Ub50+EFciZNtL9u29+eXTU378eVLuvS1Y7P+fOKFG/WYnXztD5wftA+DVhyx
+6edHyYf/qdbvvXil5safHF+2sXHnPp89wZfnMPx5Uu51Pxu/auWx/7TOTP5
7KQjX9pb9vMzO/HT/8Fnf62ndMQt++E1PvkHH06/8tmjHrFTftkDly6+cjxq
9Gk3nN9jbqbLP3Dpyu8hP3jl2KFN8xr1OvDfn7bk7c7OeV34dLK+B77+U997
d0jT3C5xMmXLFw/Yv2lO6sPx6atH2vnsT6NeaG9r+7beOwM+v7B5UsY/Ph3t
pHqEn/1y8PUjdPDXOPz2yV/umJTpql/qkfafjnoKx9du0FEf2SndB9rHjdyq
fXbqd+uxasf9Q9pbll62woD92uckvtW7k8f8vamjZfvDP3x5v+a5mS4+XHuC
f/2A899bsXl2tkv4cO0tvnTZP37z3ba8o6nBZ8+lYyd+/Y7mRrr4cHz20Pnu
2t/45y/b56YftMM33f+Lr9zYPi/LS5zQx9eei1d8OL7ypYOvfGu69NmJTwdO
X3zSgWuf8Z/Y/6tHjlg2M+vvBVddfNqIps6WhRv1mzui6cPEd9hxi4tGNDdw
7Qa+OOFn6fIznB/g4gR/5cknjJ+2rJHuX487dK/RQzpbfnzyHQNXbJ+V+AeH
PbWws7MzdbRv+HB24tPRvrEfHy6/cO0evjiRL3GrvODiVr7Ep/yyB65c+Fm9
wIerF/h0pCuu8OnzP1z844sHfDj79ePySweuftGBs1P9Fc81/uF04OK5tg/i
uerA+V95sUecKC+4OFFf9Pv4cPGAL/7pHPToI3c+PqTRXsFrvNHHp48vDumL
T/bQh9c4p8MPyku6tRzlC984lj6+/giuvODqY+XTr+0PndovsH/iBRdN/ntz
R+qo17V+0eFP+YLTgbMTX361M3DpwquOcYVygRtXKBc6+FUfX5ywxziHPj5c
nPAnvKZrfFV11Bv8LRfv9ZfDP329de9TT+/4SvcJrY9+es+DI86b3/LiGkNv
vvfTNxOf/PKZQ0Z3zm9pGnLb6/3aX2vd+cxtb72i7d3kw4fd9NVhH7ZNTH6f
759/zvYL32k9bMufjT+z2/jEz16wxw07dDTw6365zrWjmz5K/NVV1zn6jKVv
dkmXPd/49+lzH2+a3zL3qdNeGPvJK9n/sufKdyb8878+bfDXuXvACk3L+Rde
cePMNZeMST4dOPvx6eCzh3/Yj7/bP0959E/tDZw++58+cLNLt217pwt/7+02
PPO1pW+l/XB86Q76Sr/LZn/6Vurj8/OJ0w9+6MnmcanPn3D20Ofnyj90Tt/9
vrD09dT/06APTzh74bupA//WxQcc9szCia2D79r78u7NY1PH+BwuXfpTXlz5
G08sea0Lf9D9Pbc4YskrXfSlyw/4dODs5J+V7t97/9fP+yh14Duev95G73V+
lDryiw/nn8pnj7hVLuLkyEPnfzrtvAVZLuKQDv/jz+j/zI7vNS1I/+DD8cUn
HXz1Ubr8QAfOfn6o6Yq3ml/xSYc/6V+6/Yjn53U29OnA2SO/j6z8h5sWn/dx
pgvf7a1j35rX9HEj3dCH4/NDTZcf6LOT/nsfHHdCc9MnyacDV1749LWTcHGi
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
eICLB35gp3ERvMatdgYfzm/4dNTHPOcffPp5zj9w7Qa++Jcv6cqX+WnF8enD
zbvrfSz4cP01v1V72K/e0eefiuMbN2pn4PTVa/boL9gjv/V+G+sPlU9HP6W+
Kxf9Jnvyfsvoj+jwG5wOff0OHXjtr9lf77vA1y/ApVvv6ZLfPN8eOH69Jwdf
fvGlm9+PBM5OfPUFHy7O877Bcp8Pf+b3HaEPz+9xAhdv1c/ipOoY/3SZR8d8
WfxbT4Crp/j2lep+GX6ut9hvCjzXZwK3n4VvfQBfPZUuPty8GD/Xc0KfnfU+
IuVr3q3d5rf8HjD6F/6Ha1fh4hDOz1VHuec9acGHG4fAxRW+dj7vUfH9YPQj
+h3la/yT9yVGnBhH4Ysr/RQ+HF+/Qwdffypd9/bQz+8HY5yW3xEUe+hUPnvU
U3y4+gjX3+ErX37jT/Yrr4rTqeNtcYIvXe05XD+e98+4hzDKV/3N7x/Db8ZX
tdzpGJfS0Y7V8a3xGH/S57cc/4f9+DXO4cqXP+nUcjeeyTgMfeMfOH/SYecZ
v151qwObp7TUczj957/9yLbNk1vquZQHB85//MCeU1p6tf6hqecKDT7815Nv
7XvUCq8mn349h4APH/nJuTs1tzf0F3a/t3/rCg3+Grectd4tzVNb6rrrsyvv
ee+Zze+31PWx7//8kAdu6Tk1dfDhJ/X/6y7rrvhG8lfb4eIXV+k5KfPLHrj8
soeOdE/bY/y185Y1/EAHzs56vogOv8Hlt567w2cPfP9xe3ds2m1GS72Xr9u3
1vptz27TW+q666V/2uLyzXo1+Oycfcm/b5nSc1ry4fiHnfD4EW+s+Hbq4E/7
zsP7/mrFxvoze+q9i3Tw4Y88NnmVKc2NdOkcvdnffv9U8wctdf0/7Qx74HTq
ujQ+XPnCx13xzC+2X2lCl3ir+wv8D6cjX3TYz556LlG68BffvXyf0csauPLF
T/9Huutfvd28d5c1yr3ew6nc63k/OvTx4eIQn369hxMfzn64eoc/f/7Dc0/u
9mFLXUe966jzzti328yWOo+m88LAc3t+rndjPgjvMaXpqt16T0/+7ufNOPa6
brNa6rx78xHXDz6lVyPdzQ96dM+dOhs4HXzly2/8LF06561w2Ixvdy5KP9f1
fOXInxXHr/rapcrnz9oOqEfiU7zVfS71qJ4T1i7V/QvtGJyd8N2HdrvqnVWf
Tb76Us8z4w8c9MlxX1r16cT1C/Vcq36n7tfQwRdv2md8OP7Te4++6OV1h6cO
/oynh+5y6DrDuthT95vo4MPx67lQ9td9IunC+RPOP7V8N9jli+/8YPXRXcpl
209W+8fvVxvZhQ+XL/FQz/eKh3qeWbzRwYezp/qTn9nJHvmiAxc/dODsqeW7
2kn93xm1/R1d0m3a4G9n3HnqzqkvDut5b3Fe91X5oe6Tyq/6CFff6z6p+rvv
sJEXXb3Se4lrP+s9tPhw/cjWm/92THu3uS31PqLjlh37k45eDVz7A7/v7Zv2
u6DP3PodVvK1n78e/vi3v9R9XkvdJ6p87SR9fDj+id9da+QBfRr3zeJvO/za
b2zcp7Gv994t+x30drc5LXXfauTE9hMf6zU78Zov+pVPX375re5v6hfqvp72
Hy5d+OAefe66qffM5Mtvvf8Wzp6KKxf2sLPuE/FP3VeV391Pu7DfCb0b+6Fw
dlY+nVqOn/Rf9R8Le8/qwh/++8u2GNm7sW+LD6/5qveaiqu671z5/Ax//4T1
3hnWp3EfL526/s8e+Bv3rHbnRp0NnB/w6dd1XXz+hCt3OD9cvcp6Ex/t1ojP
Gm91P0I51vX8Gj/shysXfOVCp/KVi3TZWfff6dDnZ+Oxeq+Xdokf4PwjXbh0
6349P9R1bP7HP3/BoPbPd36SduLD8Y3T6OAbH/KDcqnrt3Tw4XSuaF1yzsRe
H3TR32/rMxYM69VYJ9ee1H1w/oGzH77WrQuOu6DX+8nnt7oOj//2SidPPKBX
Y93bOLnu4ysvuDiBSxdfudf9d3zpwvHrPjt76no7HX7Dh/Nz5dOp43PlRUf7
UPfF1It6r7JyFD/8wP91P0W67K84++nA6fA//9T9EfmFixN+rvsd+LedPeuH
G/ea3EXnqJk/G72w56Qu8VnPS5xy6dk3Xt48oaXePzz256vfv1fz2y31nt6p
W+/2yBUrNPibnnTfNid0Lmm559PjX+vsMz75cHx20sFnp3TZU+/1pYMPf+On
f9ptleZJGbd0Vrvv/d+91vxe2ild40N8dsLVi5pf8U9fuvWdUDr41c76Thw7
6/3GdOQ3+YHzZ+WzZ9y/mi8/pHNx2k8fvsN+9z/W0TQ++Xlf9w4tzz/W9EZL
vU9YeeEP3uB7rw3uXNpy3BM3LDi1z7jkw/HZSQdfvqTLnnov9yf/9cYbpzQ1
9PEPbjtx2mZNr7bU+5PpSxdOp74/hQ9/5dUFZ1zZ2dBRjvjyBa/213e48OH0
4doTfPPHer7a/LHu75j34WsnxQM+HN98hA6+dSrpsqd+30QHH07H+lvVty6B
b95Uz2mbZ7ETbl5W96fME+Hr3vfltz/f/pl1ubCn6tRz6fhw7TacPfjsxJeu
+XU9T06H3+Dah/r+LL/BxQ/ceKzyxZV6ZJ5bz/+bF9dz9ac82Xv2c51jEqfv
vkQ4e+DqNb64rd8vsJM/K45vXqA/qu8RqEfabbh+pL6DMH/Yua+s29aa+u6h
cj8h/OyvfuOpv3e2N+7/jHzh8099P44f4Bv98ZKer38GV1748lXfKdAv1Pv/
tedw7S2cH/AX7/3fm/+l4/nMV94ztvo13123Y0Ti7lnK+1Qjv/hw7So+ffbz
Dz6cP+Haz+rP+t7lthfuuNLOnaMSly5/0sGH80PNl/z2v+jGte/oXJbp1ncb
6cDZD1e/8NlJ3/1U+OyXLpw/8bUD9b1s9QKu3OHGw/jigZ1Vx3hVnOj367sA
4rC+X0Afrh2A06/1sb4vic/+2o4Zn9Mxjq3vsxhvw62jwrX/+Mb59T07fP1U
3aeo79YZz9d30DLd4Fu3hFs/xKdf32vDt84Px6/viLGnvncmv/VdKvMgOL/B
tc/Vz/qvqgPnH/Pu+u6edYD6zqD5OB18OHvwpau88OHKHZ899f0++nDlRYed
cP6s7/2Jz/oen36w3n8izuF1v9i6euVbh7efmOOBWD+vfDrWn40H6vfv0oWf
esgL527U3sD5E9/4oZ5TwlcucOPJej8D/9R7AzLd4BtfyRc+HF/9ooOvHtV0
6z0DOY4NnB/g9Cvfvp50+bnea6H+1nfl1N/6Tp96hy9O4OoFvnWP+k6NdZL6
Pqb6WN+zE8/1HUN21vf79Kf1nkP9ozjP71aiH8Q33tNf46/91BrPfbu9wRfP
dPDVC+myp95PQgc/32ULHfWo6tu3wjf+oV/za1/JeFu6+P9Z6eQv7dS+MPXx
4TluDHvyXF+M3/DZabwK5zc4+9nJfnz5wre/WXH7etU/cHaaF9d7rozb4eoX
3DmE/E428msflj574PwmX3A67JSvOt+p98DQt59YcfuP7DG/cB916n/jrVWb
lz6WeOWzM7+Pu/H4P7740dDElZf7n+HKFy5flS9d/kk88iVdfqj3fohnuHaP
P+ngw/kHXzzzs3LHpw/HF1d0+Ee+2M+f9LMdCP/TF7f8wM7aLqkv+b3hsQO2
6z/x9kwX333dcOWSePgn7zuN8Xa9d9G6Ezz3PQPXv+CrX/X+Onz1CG5+Uc/r
Gp/X+wyNz+HWkeD6d3zrbPW+UOt19R4/fmYnPp16n6T81vtjtRtwfoPrr6uf
jQeqDly65kH1PkB+gEsXbhxLP/0Z46hc9wj9ei+l8qr3Fymver+o9YR6T6Z8
Ka+sF6FT72+kU+9DY7/ywoeLz7q/UO+3xIer73D+x+eHek8Uv9V7NemwP8eN
wa/31NGv96qpp/VeTf6U34qzR3sr3ujA+afeP8P/9b0z+cI3X5MuPhxf+0Yn
+dEuSZc99T0yOvhwfqv37/Fzvc+Hjn4Kn079vh5e34mgX99rSzsDN1/TbtR7
YJRvfVeCf/CNt5UjPhyfn+kkP/wmXfbUd9m0e/VdD+1nfeeCvnThdOr9Wvhw
54vgygVfvuDV/nofFD6cPlx/mudv/9Dj4R17Tch3T6ynXf7wz+8e3Ou9xPN+
fvexxPuG+e5A4KfMf2+PWbMeSz59fnNPvu+w4GNmvv/TEZ0NHenC8z30X9zw
lxXvub2LPd4BpD/sJ9u9el/P8anPzu+ffcu/5/Z8O3E69Ongj+u9qOm1Hq8m
3zqh74ng1hXh7MTfYdYVq13eY2zyrbPhSxf+i42O/OgLPccl3/rqagNemHxk
zzcSt77quy06+HD2VD4d66vKHe79giyX0IEbr9b3a4wr4OIw8aiP9f13fOv2
2uF6b5V4Ni7N+W+0n/X+qJxHhL7+jn6950r7Vu+D0r7BtT9w9uCbB0k37zWK
+RS8js/V9zqex9efmhfA9ad05Asfrr2q/W+911e+tBu13a73bvFbvX+MDlw8
wM2vaznW+/fwrRvAnees3/PaH7SfAsev7/dZh6nfIVqHhLMfbr+jni+t91TY
f2RP3Yet91mxH24/FG7/oq4f0jd+tk7IHvllD9z4GW7/At++ar1Hiz32g+DW
de07bLn7c4c0d36cuH0KfrM+XL+rxWcP3Hpa/d6znjuSLty+RuXXezDg9kcq
jp/jk7CT/XD8eo8H++v3xfjyW96NTb/lOCfS5X98uPjEF+f1+1zxDGc/XLxV
vnT5RznW75rxxWf9DqLeqyYOpQsXh/XeRXEIN1+mQx+Ozz81Xfmir57We9jU
93pPAn695026yrfar3wrn456Chef9Zy5c6TOs8Gdy63n9OyPa1eVS72Xkn/4
Da6dqfdqWoev9xPaj4CzXzsGl1+4eKADV161veK3uv5T78s1DtePw43/6z3A
xvn1fl38ev8tfbh+mT313lp8uHELXL9Z593W59lpvATHh+tP6/pDvScWH85+
OHvw2WP9J79HCPuNK2q69b0G8516jy7/13u26ctXPada72HQTsLN3+Hire7n
1nsM7Adp32p/Ub+Dhovbiqtf1U76la+est/+Ub0fg51w4xm4/NZ5rvhRLuK8
3q9e82sdAE7fukF+5xL5qvu59b1jdub7XXEeA+77BXzlVd/1xvc9CNz+Wn2f
2vleuHMXcOni22es70HjSxcu3fpOdJ4rDlx+6dd3sfM70PhOp+r4LgZfO1zf
E7Q/W99VzHFm8M0f7cPiw/O78rCHTu6nhz3SZU99JzG/sws+XL9T35HU79R3
7vRf+OyEK8eaX+VFX7r1nU06+BXHt25AX37h9OHWB+SrvseX3xuGf/Dzu/jw
P776Vd9TUy98nwIXn/V9N3EFd84ZbryBL27ru/D04c6B0/GdCz6cnfjsp8Me
+a3vzWW7Hbhz6XB+w9ee4LMHn//h+p18JzD8oD2HsxMuDvGN2/P9w7DHuBrO
fjgdfONzfHbii1u4dOW3ljs/13Tx5QvOn3TEc33fU72AWw+Eyxe+9qq+o6qd
gVtfgtPB1/7Ud0vx+Qcu3fqeaX5HEDj78/xM+AHfelG/Idst699nZK5LW/+B
69/hfb59c9+NFj+ffOty+MYJ1ouWXbjJPS/1GJvr9taF8PXX9PHh+Isvu3+X
9xaPSp3c3x/76BE3LhmT6VrvopP3AsW6HLzmi37l05dffqMjXX7wDnje7+dc
R+DSzX3nWN/Gt69Nv/oZbtyS63hhZ8WVV/0eX/um3YZr37Tb4q2+9yqu4PqR
vEcl2uHKl26uMwcuXf2gekGfnea59Z1r81M4e+DqHb55dL67G/r46h3c/LS+
Q23eV9/LhquPVae+oy1f2jfjKPbAjcfg/IYvX/jGXfj8D2cPvvGkfhxu/AmX
Lr784htn4ksXLl3ly358uPzSh7M/7+uIeKs61hnq+NM8HS7OzWv0X+oFvn4H
bv0Enz4d/Rq+dRi4cZf1w/odh3Tpyxc+e+DWG6v91m3oS5c+e+jgVxxfP0tf
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
nA7c97+V77tj+cr90EiX34y3xZX2Qb2Amz/mPDfiDZ+O9kp9V1/gVV+7Wvna
7XrfNXvEIZw98qW9ki4/4Os34caB9OkYX8Ern36eA2dP4HkOPHD5re28/MLz
vEHEOZx/xFstd/Gc6wz200Onrp/A+Vkc0k88dODWN3LdPupF8pu223TQPRu2
2qewXzO//bDhl6w0rNW+Q303E25fBm5/JHXWOnXOO2vckfzcr4l04fZrfvnR
q7dO6vV04vaRh21+769P6v1sq/0F+03encS33+cdSXx4vrce+yN08O1rSJc9
dOo7pPhwOvZNqr59kOof/q/vV8LZn/6Pfav8XuyU5rPvXXl42snP7ITX8uKH
3C+Ocsev75/Kb37vHOnyP3vosJ8/6dgfzPMDEQ/2beHsF1eVz868tzb8Cc/v
+MLOw/fddv13uk9KnD349geliw/HV7508JVv9Ru82km/vusKz/24yC8878UN
P8PzXcX/PvOIZb1HZr5qPcJX7uITLk7kS37zPNut39390j6jk6/cvXcMF7dw
fsj7cMJOfPVCvYPzp3tm4HnPQ9wzA3deyL0r0sWHyxc+fX5zrgkf7pwSXL3I
78rjHh5830G79wbu3jw4ncqXL+nC5Uu67s+hn+ed4t4beJ4fC5wf8N2fg5/n
f4Iv3bz3I/LLTvbwp/ZBvvgNzg/5nnvUd3z38+DnebOwB57nx7y3Hjr44kS+
nGfjT37I+wbDD/TFDz/DxU++Cx/p4sO12/mddehrJ+u74XD5gms/8d0jxP/s
d88PnJ/hyrGWi36h+kH7jM8eOH2480KVz2/iULrshCt35ZXvbsS9TPjiFh8u
PqUrX7VeqHe1vOBVhz15ji50pAvnN7h2T/zAnbujLw7hj1x44OP3d5/S+uzD
ex20oMe0tLNH30u2G939/cTF1dpjJqw7r/P91oXP9x/2/eYZyYc/vtPd/Tdo
np58+vte8409f99jasbVOQ+dtuX9nZMTF4d0pAvH33ONP/Yd0fRBF3t+fe8X
b/2oaVrqr3ncrBd+2n1S6rPz6IVf3OOi7o106dCng09n3Elf/crOPaakPh24
eKbT5zf9Lr2+qWt+R390fdOxTe8nn77yEs/49Gv9OnDMFXP6NE3uku7VR65+
5lebpqTO/nc++Zd53ae2PrL4gHP/2vPDjLe7tlmwYd8eH7Ruvs6Pr16h1+yM
B/7EF2/DZ+21yk5N05IPx//LOX/f9+3mWY3zz8GftvKOb/TpNjvTZQ8dcUsH
H77gyf637NSjkS6dAfv+uO+hPaYnrt5Jlz1wOvKV9yEHH659gJ/04VYjHmj+
sEu9ED/8z37xWXE67IfTUb78I/7zHecoLzh9+YIrd/7Z7Y19B/2g54xGux35
wpfuQX2Gtg9umpH8jLfgq9d08LUD0sWHs1++5Lfy1bsat+zJd/HCD3D1lx/g
0qUP155ol9SvtCfql3pER3mp15VPhz5cfc/7xgOnI1/KSxzi87N6gQ8X55VP
J+0JP2x3yF92Obd5Zhe++JRf/uE3cSv+4eoX/9CHayfxtQ/aK7j2BE6ntkv4
6in78cUnf9719aPuPrbX3NTBh9f2bcPbhh/x1W5zuvAP32a3mcd0m5t+EG90
8v7D0MGH07n56dZfXN9tXhd996bke5QR58qRP/G1e/ygvPDpKC+4dPU7/InP
/+Kh2s8/ea9dzLOM0/JdgJjHwZVLjj/jfC/c/BFffJo/wsUznE6dZ8mX+Z1x
INy8G669wpcv42T1Tr7g0jWvZCc+O42r4caT7DG/Nv6E5/nhGAeyM8/HBq59
xqevnc9z0cGH57nuwLXD+MaZ+NI1zoRLV/nSwYfrH2u+5De//4p09RfsoQNn
P1y7is9O+tZD8NkvXTh/4rOHjnUSfOUCF8/mI+qdeIBrf+DmEXn/Z8Qbfq13
cO0SvnkEHfaIWzpZjwLXnqSdMa/M75JiXUic57vPsQ4Gx7fOI/7x4epv6sf6
FR32W7+C81uuZ4YOPn38vG8t7JTfyofTz3Xg8AO+uNLv53cKEc/wuk5l3F75
xhvaW/FGx/oVHfz8DsI6TIw3qr56ga99oF/nj+qXdTnp4ud3E6GPD8/5bNiT
9/FG+4bPTu0wnN/g7Gcn+/HlC1/7U3HtT/UPnJ3WnfSz2jHrOXDtBtw4rbbn
2hn67IHzG1z7g299SfsD19/RkV/2w/mNnXB+hvNb5UuXnXDtXk0XH85O5UVf
vtijXOjzA9x6FP38vi/G1XD5grOz7hdYR9IuwX0XVts935Hpx/Hh2hm47+/y
e9VYb8fPd8Cj3YPX9pOddODsrOMQOsZj+HDjKDg7c505+hd88x39Atw8EU6n
8tmf66vhB985yhf74XRyXyxw6eY+Tnx3ia8d057n98XWdaM9rzh+vjsTuP4r
34+Oeq2fze+Ig68fh2uv6Fcd/Th7xJv85ns00X/B8bN84zvQ1Im4wmdP7rsF
Lh4ynkOnjsOtP9d+XzzUOJTfWr+UV67nx/iEDvulK86zvCJ+fLeb7xZFfuH4
0vXdbtVx77pywacjHuC+T8dXXvi1fJ0Dcf5HOw93rjLv+Y9zGvjiB9/5Inzn
PfLcUeTLOQTn+pSL8+Rw8QN3XhHuewF8+XIuxbkj9sCdU4I7r4IvX/j0812D
eF+gvuPAD3neKeodPM9Hecch/JnfMcX4Cj/PWwafP/M8ZJSvcxr5HVPEP785
HyhO8PkT7vwhPn06zh/i8z9cnNOv6TrHmPmKeMCv+tLNc5LBhzv/Jl14fRfD
+RBxaBwIVy65bxvnVTJu7a/FebCq45yJcsx9seDLr/GGuKJjvAFXv4xb4M4h
G4fA1VO4eK7va4hbOuwRb1VfvFWcDvvFP3/muffwGzzPvduHCr/V9gRfurkP
G+WS58yjfJU7nP/h0oU7X1TbPeWV6Ua8OWeV3wtEvMHpiFvnuPDhzoOlf0Lf
dwHSxafPfrjznHmuPuq7eiQO8Z3vyu8yol5rh/O7gNCBsxOfPdLVDuOzE84P
lc8e+nDtA3v0C+JB+4AP1z7kuZSIE3zjRnEO14/D6eS4IuKhpqudrH7mB+0J
vnKBix98OvKLn+8NxThEPOOzE04frn2mww/4+X1crM/AlQsd+c12KXTYqXzx
4eIBrnzx5Zcfsl2K/NKRrvorX/js0R7qF6QLd140x//RvuGzB995RfYYjzlP
qHzxnT+kjw/H1z7TSX60q/kdaJQLHeck+QFe80W/Cz/0897L8Bsd6fKDeoHP
frh0c74T9aX6k77zz/jsqbhyyfOi0U5KN89RRz2C13Oe2gc62jE4O9VfuHzl
ebZoTypfuso35xHhhxo/4kS5yK9xYN7rHnbSp5N+C38+u+GRK5/QviTzS995
YDr4cHbCnd9OPMoF374MvnrH/9J1PpkO3LnoXN+I8lWOcHFLh750837vyBf9
/O4j+i/8PP8f4wf8/B4qcOnmd0/eXws/aP+Nc+jgq1/Kiz5c+eIbt9Chn+eI
wj8VZ6fxLZyO/osf4OpFzh/DnrwfIPws/sVhzsdjnJbf6YS+/MInHfds9zt7
zMz9R+tFCzfqN3dE04eJW4+C23/Ev/rtqy47t0djP9Q8Hd++JPzEbUcdtn/P
uYmbd29/+Icv79fcwK0nVBz/5b5HnbhSz9m5jprvuQw4/70Vmxu4eTfc+ir+
NosWn/Nsj0Z+832Qi7b6ZHqPWZmu/NKB80/F6dCvfuA3duLzm/1fuPyykx/W
u+sPU7fuOSdx6xLsoYMPtw+Lr1zo8M8TT3WOO73nvLQfX7ng87PvQvHh+OKH
TuVLF5/9cH6ofuYHuHUk+ZVuxdkv3rSfyiXfpYpzCHDr5/a72YkP52d8++nS
hTufALdODmc/vv169lgnpw+3vk2HnfhwduKznw57+MF5gMqHWz+HO2eCz8/4
7MFXT+Hyyz/8zH7lDle/6rkI7R7cflxtr+zf0bEvIA6lyz/yK1/2I/Kdx5jX
w/PcSOD2TfD5wb5D1bGvwX7tFXvUL+0PPM81hY79FO2Y8mWndo89cHw4e/Ic
XejbF6v9i/JlD1ycVPvFCf/jw7UzcOdP8JUjvnTFA1y6dPhN+4AP157wv/iE
01G/4MaH1jfq+hs878+P8b9+3zqVeQe8zjeNh/Hh9PMelRgn0JFu7pvEuAJe
zx2Jf+NnOvIlXbhxV37fFPr4dIxbpCu/8KpvvFT5xldw56OUV+4DxvkruHw5
TwjP+zCDr32uOvyDL1249rzytbfOocHpOz9W9dU759nq/qZ6UfniX7pw9VS7
CldP2a/d4x/719oTduY9lqGDbx9ce4IPx+dnOpUvXfbAnauhU3H9S9XRn8Kd
O5IueyouX84XiZ/aT9X+Cz+/j4j+Ot9PCVz7g8/P0mUPvvYHLr/OjZs/yq9z
GuZxOc4Jvnko+/Hh+M6r0MF3/kS6cOc98p2pqC/6qfyONeoLXLpw/Q6+eoRv
vqkdg5unw+ngq3f47MfXj8Px+cf8lz1w8zs6zqvgw/kHn75ysf6Q50gD7/d6
z2GD2xs60oXjK69qj/LKdxkinunne3lRXvD8Ljv06eT7JhG3+MpLHML5X5yw
s+L4ypGd8pv3cYU9/FxxfqYPp0PfvMn4kH/Mm+Dm3eY72mF8uHYb37yGDn+a
H8GVI5wOPn38Ey9+4IAr29syDo3r+F+5w9UvuPFeraf8w2/Gb8rFOonxEr5+
Oee/wX9ml/0W3d6+LOdr+HB88UAHX7xJlz10rBPSwYfTEQ9VX/zgKy/tA75y
gbMfrp3BN8/Fp4+vnYGLN3zjIuUOX2v2wpv/3t7ApYsvnvH5DV+6cHz+NM5k
D9w4kw6/4cP5GZ++eLAPkusDgQ+67Y/fGNHe0JEuHF+cVHuUO33+p89O5Qun
Q58OvvkCvvI1H4ErR/UCrlzEG/srjq982c8Pyoud/F9x/qcPp0NfuyFd7ZX2
gZ0Vx9f+iBPtDP8oF7j6Ih7g/IavXao65tG1nsqX/GoH4OxUXnDttvJVX7S3
dODaZzj/01Hu+PymfOHsoaO88LVv+PTll9/wlS+cPpw/8fmBvn5cunTg8gXn
H/lSLvhw6VY+nepP7Vjla6/4AR8uXeWofOs6uXT1a3TgxgNw9uc7oeE3fOMN
fH6A8z+c/fysH893RcPPcOnyA5yd2gf20MfnT37Ap1PL1/zReEC+8I0f6OPD
8Y1b6OAbL+X9OYGbh+KLc/MjOH/CpQs3P8LXLuHzp/YEzp9wOvjaK3z245vf
wfH5h5/ZA6/jOvN0fDj/VD6dOm7k51ovlGMtF+Ulv+KEfo1ndlacnXTgdPiZ
H8xz2SNfcOULN0+vcUJfutaLnCPFz3PLca4Vbp3KuU06uR4VOPvhzpHi2x90
TjXfa4t1P+ds+S3XzQKXXzrsr7jz1XTs+7MTnuuTcU614t5dYj876eQ9fuFP
dtb8wvknz+PF+V46ec4n8OoHdtb9ZfbwZ9ofeN1Pl6/KV1613NkPT/9HnKR/
4nyg88zs9D0CPOfLsW7jvDQ+3PnzvBcx9H2vpD13DhCe8/3QkS4c3/dQ1R7n
2PO8RJxLpJ/vfsY5STgd+nTw7dfj571ksb8Pz/vrnLcPO/GdS8QXJ84bw5WL
84TswYfTr3w64lY5wvWb6efQqTi+cZdyVH+NV+nDjW/5U73Gh4vDfBc+ykX8
G/fiw63Pw8U/Pvt9l5H3WwauHcv9i8iX+mLekfcLBe5cBB35rbj80hGH7Ifz
G/1qP7zmVzuT9/1G/NCXrzxvHzg7xSGcf/D5s+pIF1++2AlXjnA66bcod/nV
DrNHfdResafi+NqH7Neinax87bD2IXWCL/4zPqN8xT9c/FS+eMv3i8MPdPDz
/qvwj3NicP7B52c69PP7wYi3irNHOwZnP/9kuqHPn/l9QfiZnc4dwaWrnZSv
PEfnnHbgVV9c0RHP+PnuQ/DFA1w849NhJ5wf4PKb94j6PiL8Bjeusz7gHKnx
m/WEiuM7v8o/0q3nyuB5Hi9w5YUvv/h5D63vYSMeaj/uey79kbj1PVe+sxxx
q/+Vbva/gbMTrt/Pdemo7+5lynFjtLe+C+Pn1Ak8903cNxL2V9x9U3TUF3bC
+YF+tRNe82WcU/tr+vKV/XLg7Mx728I/1c/Szf2jsEe5sFO6yr3WL+0GXLyp
p7UeiVvnNNgJdy4Cbv3QeQ/2WJeoOnDnSfI+wFgXwudn6db7W9y3Vscb9PHF
Fdz5K/rsh4sTfPlSLnB+kK71JTh9fOdP8t7CyG/lW2er6dLnH/mC49OB8zPc
Ogkd9ltXgduHEof8bN9EvRM/9rPw9Y+5PxV8OL54znFm8NVf6bKHjvacDn7d
T9TOVH3xg29fkr50c583cP0UnL76ZZ9afadjf5B/2GPfGZ9/4NqH6mftD33p
0pcvOvhw5w2M5+nY32RPtdO8A58Ofk2XPfyGD6/7qnD+xOd/7S195Vhx5ZLv
v4d/6Eg376kLXDsPF1f4/C/daj+d2o9bd8r3HwO3fuVch/YQ3/kHOH69b8G6
EH18uHMpxgnwmq51rapjHQxfe8LOvEci1lW0P+w0DoezJ7+jj3YPX7vEznpP
Bdy5FPbwT73nFp++dhXOz9K1/gmnj+8cC5zf8KVLh9+kC+dnOtZjK27dlQ4/
WD+Esx9e70PWn1ZcP0jHOhJ+vZ8ZP9+1j/Ur/R19fHi+0xrfWcBruvrHqiNO
8MUPO+u9yvRrfMLFCR35qveo48uv9TQ4/0hXnMPp44ufvF898osvXTr1niU4
/9DRv1fc/lHGT/hBvw9nP5yO9tM4036xfg1uf1k7ad6EDzd/wadvXmZfO9vh
wH2HSEe6cHzj3mqPeRB9/Qt9dmrP4XTyvtPQwadjXE2fDtx8MPvlmOfW/JrP
Vj4d80e4dQzfTxkv6ZetCxm/6Wetw/APvv1r4yV8eI73YnyS6znBN96QrvEV
Hbh9eXiud0k39OF02Mn/+HDrY3Djlhq3ypefM64ifipOh/05/gwd5cL/4lP5
8j+cvnzBlSP/GKfld/eRL3zpmh/hw/HVOzr46ql08eHsly/5rXz1osYhe/if
H+DqFz/ApUsfrr5rN9QL6eY4OepX9ac4kS4/iFt2wsVh5dPJ9xnFYayfV774
kS/2y5e4Ep9w8Z/1NPTh2hl89VH7ALfem/OO0KntAL56lPkNvvjhT+Peet4e
XtsT877KN97mB7jxfD0Pz//8kOUV7YnzP/yJX9NlDx37yOyv523g9OHsxHeO
Al++8M0j6rkmeD3fJV/5nmPsa8PVd7h4xncegz3iHF+6cPbTh7NfecHZSZ/9
9q/h+U5upEsHH65c8J03oCNfeR4scH6AK5e6Hiu/VYc91c901Os8bxnp1nEI
+81nxSE+nJ/VO+kaV2jnxQl97XM9p6q85Fe5w+v4hL64zXFU4NoBuH6k1gvx
Rh+u/az2qI/yiw9XjnDtJz6/4UtX/YVLN+0JPygvfLjy5U/lBaejfPN92ytO
+bjvv1pbzO+sk0xae/RXFv/zscS1P/ke5efn//LopXOSD7/x/BNn7bi0wZ80
8AeThp86tMX8Lvlvrvx4t4m3JV7f6dt3x0UXP7N0XvLzPbV7Tuu4dmlXfp5X
mbvCuNvbGvrsr+94wv9+x9Az/97WwNmPv+k/D/vXve8932IenfcsnXfp2//1
3ojE63uFU1+a/P2/LJmZfPj9ux3+3DlLZnTxZ56nCvv5DV7fu+T/fPczypE9
cOUIr++NsrO+H8rO5Ie+c0raT3w4f8qXdCsuXTr5ruj8GT/tvXRW2pPvoB1x
zPjxSxr28w/9vEfLe4uhk/oRD/j13UZ4rwN+uM6ItgYuXXzpyq/6y044HTh/
1nT5IXXCTjr13WQ6Fcc/tGfbU+PaOrPc4fU96zxPGPGW7zZGfsXn/Vs0n/vM
xDGpI56PW7D1H7efOCpxfPUFrhzFf55zK+kqr1q/8JU7e6xL5H1NYY91hvq+
PL5yyfdGgw/H3+P171x+9OLGuXr8Xx87es3rFr+f6eL32vO5bjstnpw4O+nn
96Tefw8dOL+xM+8VCT/Qqe+Y4yv3fEc4+HB8+arvsLMn79EKf9LHZ/+LDw34
Ve/Fk7rYww905Is92d9FPbJuU98xh7M/3w9d+6CH1l8yrUv8n/jA21/73pLp
qaO9opPpRr2AVz8s/N1rm85f/EHy4Y8v+sHtzyxu+J89+NV+9qRO2MMP+PxG
X7zxGzvznsOIB3iNT/bgi0P7+NJVjvAaP/TVi3yPNfxf2xP5ze8ytrlkyiZL
p7fUfZCr7zxwUI+l0zJd+8WX/mmLyzfrNSP5K2582l6HtC3Od4Tx4fj3bHD6
6APnfWZfPvjrfnPwxL/Pa+yz4G/Z8fN/Lprb2GdnZ33fB58OfPe+GyyYtOSD
lrovs+DCWb96csnU1MlziWFPvsv2Zr+Zg9qWtHz/54c8cEvPBh+OL1908Nkj
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
Z6fylS6/1Xs82F/vCUn7o//Ch/Nbrg+H/5UXPlzcVr7+wjobffbA+aHe+2Fd
DG59CS6e8enUezn4s94fQkf/Ve6Ry/4aX72o94GoF/DcJ1JfQr/6jR/wlWO9
V0o51nulclwd5YgPV4744r/el6Vc4OwRb/V+J36o94SI83qPBD+In1zvClz8
4NOp97TgK5eKixNxpdzrPRUZV1F/K67e0dGP1PP22nnzULhxV/2e3bi0fhdP
x3im4vjsoVO/c9fu4StHOP3KN39hJ9y8gz38UO8fEA/1/jHlWO8fy/KKuM11
wsDFbeXnO+/2ByPO6cO1A/UeHvFQ71tT7vi5nhnp4sPx2UmHfr2HB1/8l/sw
M/4rX/zXfLHHeCPjOfwJF4f1u4+cfwW/4vj6Wbj85ndJEYf1uw/tifgRb9qT
eu8fvjis57Lq94zGgXDzETg76/xafus8pX5fadxbv6+krxyrPfTzO83Qr985
aufrPULa+Xo/Ev+YB+HD1evcX456wZ/4cOVS9aUr3vQX9T4l5VjvfaKDr77A
tZP49OmIW3zrfnD2s5M+f0o3300Lf9Z7kOjwZ9XnT3z5rfc7sb/eb6nd4Gc6
2sN6vxO+8sp36KJdxYezxzkc7zfxG3/+4xcv3fnttkXZnuPD8a3f0pEvfO9G
4TsHCOd/6eZ7heF/OH1+Vr74cHFS+fzPfu1tnuONe5D4E77y5y44dKO2Bi6/
+NpV+u5xyvcXA6eT7xKFnTVd+aJDnz3uWcLnTzh/8n++hxj+hLufin/o4MPl
t/LZ89OnN+nYsW1hli99OD+LQ+XCfrhygatH5d3D7L/w4eoLPr/RFyf01V+4
+iJf/KDewfmBjnKE01HuNV149Q+cjnyxs8YV/1S+/NKHax/YI1/S5Tf7gPV9
T/ue9b22PIcT+4n4cPuYGT9x3qC+K+fcTn1Xjo59WHy4fd7KpyNO7Oeyn3/g
9kmrnfW9UXbW9+z4rb4byB54TZff8POcYeyTSjf3rSJfdOD8wB648wP04fxZ
9Z1n4M/cj4jzIfwpHur7ieyH46uP2gfvS4p/uPvf8l3JaJfw4dqlyldPh/94
wqOfb/sk6x19uHoK137S0Q7nO7xRX/L7jmi3tYdw7Tw/iP/ajuH/95936tvc
9nGuQ9b3Os2b6vunxtXiBx8uXXzj+fp+qHF4fZ+UjjjBz32ZiLfKpyNf1j/Z
/7lFV588b+mCxNW7amd9T5ad9T1ZfqvvurIHXtPlN3y4eifd/O4m8kUn92XC
D9UefHHLHvURTgfOHjj/V3vUU/7nN/W06sOVi7iq797yA7yWI3voq0f03U+l
vsDdK6U+OkeU93cF7jwSPn37I/yAD398z1mj3l36UWN8HulWXLp0tEt02KNd
ouMeKvUX/5hr99p09NKG/fhwfPmig29fhj3Spc8PdPDZCbevhC9f9oPo48P5
R/lqN8SD8aR8Vb/B3d9Fn58rbt+Ejrit72Cq7/UdTPGM3/Ttjh6jF8/P+pXr
cIHja2fo4Kvv0sXXPsDZWd/BxKcDV7/qO5jSZf8Pl9x9/7uLG/7Hh+Oznw7/
1Pcr2aMc4dql+l4nvvouHuDKUX23LlHf5bTewh58+3H1PVbrHvjaGeMNfDg+
P9DJc+/h/2pnfX/W+kx9xzb3PaPc6chXfTc293kj3XyvNtLlTzrSre/Y0oHr
X4Z8adAfrt1nWN6jmPchXP+5gx/cd3ji9nHcT8gefDi/4bt3UX7x4eIHnz3y
ZZ0KH27fSrrsrLh089zL4Zf9ec71d6RO3qsQ+YVbT6PDzvx+fKMfjHz2R/sn
v+ZL/1Xt14/TkV/9uPU3fLj1Q/ZIt+LSpcNOOtUe4wF8/sGv+dUO4+s3veOc
3+Hazw08vzfU/9672oRjfjws+dmeHj7104Ff/FFreT+uZdhOM774/sN35DvR
+gX65T3ExPO7P/tcoY+vH8Qv7zOmnVV/tW222vTtw4a31n1S71/XfMGrH+Sr
nkNjZz23A+d/6Q6+a+/LuzePTVy6cHECX3vx1jN7f6Er/6wJG+26yTZPZ7ri
M9c/3CcT9QVe30nXPuDDtQ95r07Elfqb5+giDukrdzpw5Qunw8904NJVX+jg
7/abt1b+oP/TiWd7GHbC897sHVb/zpVrjE2cP72vAed/OP/gS1e9hg9+4oE5
v9jk2bRffXTfKZx+3r8a7V7Vx9cO5H3FYU/FlVfex/jpuS83bToydeh/svXA
oVduOjrzW/nwqg/XbssvXPtsnUS65svWSfDN0/XX+Obj1knw4fjySye/Fwv/
5P3/vi8LP8PZST/nZbGOkfPymNfTZ2ed1+PD8dlJhx/owNmp/8r7/GMdiT77
fZcBr+fq4dZbtP/aN+VrXgYXD9o37So+XLta+XTquVP1hX98f8FO606+a4Dn
+nB8p8BvuT4cOD/j08e33uU7BXiua8V3CrlOb53W9+MRV1UHP9eBgw+3Lmfe
pP/KexRjHR7On3n+J/oRfLj+CN8+Cx31Pc9FB65c9GvKS71OPPoX6bIfv+qL
E3jGQ+hUnD3ShctXvl8c8Ymf94SEneIQrp9d919njb62aWTab/wA5zc6x31p
+yMnb/NsFxyf3+jwQ3kHOfnyBaePrz7i571Mke7Bxw747S3bjuzS78PlC77n
Az/46w+/Mjrtp++cofaNP+t7KNJ1/hAf7vwhvnir733YT6zvjxgXWa/Ah1uv
qHw62g1xwn79Atx5S3bC5Svb/8CtP8ivfFlvgctXfZdE/MsXPly+Kl++2C+/
9OHqXX3/RbtR33+hL1/4cP6pfDr8LF12ypd06/sv7LeuVXHxU/eX4dpPfOWV
+7nRX9f7SPW/9gXqPWzw2v5Ilx+Ue32XR7nXd3zYz078XC8KvvYfzv81v8qL
jvUc87h8ZyfWf6z3wq0vmQ/CrSOZz1YcX7zRyfsTwj95T07g4gTOHnzrJPTl
y/oPnB+se5jn4sPp5ztK7v8Je9hvXQue7xaFnfTh1mGMT/hHusZjFceXrnwZ
V+DzA7508fM7yvCb9SL28wM74fxAH66+5PcOgYtD6cLrPm+9j9d4uN7fq97Z
F8PP75pjHzzHh1F/673NxsP1nlvjZ/r4uZ8b+pVPJ++1i+/u9ZP1e/Mc55f7
Q+jo99lf7/Vlf73XN+8Jif16fLj9+sqnI124/XrtmPKq92Yrr3o/sHzZJ604
fo4D4/tx8eycku++c/4SfoMbh+Obp+A795X3c8a4Ou/ri/sQlItzfe4xgOe5
6LAz1xniHBR9uPNd7iuAS9d9BbmOVe5XqfelK/d6H7vy0u/gw/m/8unU+77o
iB/zmnqfObzex5734UQcws1f6v3n0oXnfCFw9uOLw3pvtvlUvRedjnoNN66o
7x/leb/A7Ufk96TRr+Hr3/UXVUf7b5/COKe+x4RvnRZunFDfOTJOqO8c5fgq
1h/w4foXfPr6hWoP3H4W++u7TvxZ33XiH/nCz++Ow5+Vzz/2MeH8Wf1T38Pi
n/qOlfkFHfbAlWP1j/7LPgv9+j5XnncNvv0UOH1886b6Hpl5U33XjP+N29nD
/3D7StK1j4af8+gYP+Pzs/kFPtz8ovKNz+2X0WcP3HzZeJW+dhDOb7kOGONe
fPNi6fInvnFv9TM+HeUOly7cOLn6Qb7w+V+5SzfXtcLPcPGDz5/KnT4+e/gf
js9+Ovj8UHF+Vi78CcfnT/MXuHEvO40bjefhdfwsrvJcX+DyhW+/mz3GmeYp
cONJOsoLH84PlU/H+p5xO/uNY+HKsdrJ/3U+BcfnN3i1E17T5Td8uHpd/U9H
fvN8UeDya/yvnanzlLz3JuYLef9G4OZlcO08Hbh2vs7vlDs7+ZP/6fCP/FYc
nz1w5SVd5ZL3+JV8wfkHToed/IavXPgNjk+H/fjX/W/9mti67OjDDx/UfUbr
l89sbrqxeXHiPxz14awXO6a3Wm8futbXpnZ2Tm+96MGOS8Z0TG41noRf3/6d
jQ/oNqX1nJ9+4YRdmxv4My0X9O3omNJqnAlvH9vz1i073281T4Gf/vHKwy7p
/KDVd1XwC/c4aJ9Vuk9r3eg/Rz/0k+YGPuzCq3cZ3jmt1XdV8NlrrjFi2v/8
L/bF4CtvMHDnYd2mto7p2/q5fZsb6e581CX9f9w5tTXfYZ/xzozO/3mPKfzz
1AM/e+G05gZ+5ynnvXnw8v+xn99m/fnECzfqMbt11Dv7fvtfzQ18r9WWrH5R
56wu/Iv+2O24n3bOSzvhi0f85sHVmuZlvuBHjT7thvN7zG3d4MoFH45ubuBP
bte08ZTOOV389t31zmm6s2NSq/kCfL13Bnx+YfOk1k2Gnvb8psvLXb74Z61v
r3vBwM/gD29x6t9v63g/4wG++ffPerat44OMB/jcJz7Z9aWOqZku/NiJbd/b
fHl5iQe48h205JmNj1oePxvudfPEzuX+6t/02Litm2fn+jD8w5O236epeVau
A8MffHfoM680fZjrxvDTLj7m1Oe7f9h69+K1XhzS3MBbb7zzlv9qmpb76fDf
9F7/8zOXx4N9Xjj/3Dt544n7NDfwts023vhbTdNz3xwuX0uuG3XBT5ob+C/2
3XLnu5tm5jo5XLx9/1un9j+5uaPl2v8t3zFZXjfsedt7NzXPT/yZOd+95vTF
E1uN3x783/J9s/WwLX82/sxu41svW+OfR+7f3MB/9eCP1l1v8Ztd+PR3/FWP
+09vXpD4QTufdtw1Sya2Gt9e9b/p5j516x13HbPdPt0WNvD99zxiePu81lzX
Cp2Ja574wx2WvNtqPAzf+9TTO77SfULrpP8c3uPo5gb+s4+P3uPNxe+0Gm/D
Pxr7k23OXvxWq3Epv33njJt/9/j/xFHUoyyvD9bqvKxzStYj+NgDrjv9J52T
s77AtWMDtxnytV0/U7+uOeyk05d0zMh4hr8056OOTTpnZvynzr9Xnb1156Rs
T+D83Db47Rs2/Ux7Ij77Hr7Kzy9ani78C9f99sN/LNdnJ/yHG634y6mdH2a+
4Nf844r2zzfN7tKenH/n4Fse7pyd9sCle+Zm99395+X1Dr7Ceaf/7kfL9Ws9
fbe5+08v7pzRJV/ddu398QkD7sj5DjzvNdq595uXNDXw72/Y92d/G9CS8yb4
lP537LX5hsNyngV/ZtgT19z25eEttdz3+9FZX+v9QWvOX9QL8fn1N0e19e+2
OPGpa7618rc65mU7Jq7w31ppu+e6dVua+A5v/fzx15bztds3/p9OvmM2qsf2
bzzWbX7id/X57Y9WXTYv69ct/1cvkn/cLjfdfl23BYl/PGrtHrcu5/MDvM/P
ft88d9nsjHO4/uWpcd87+JRuDT/kfQsf/vXsW5oWZDv/48fX73XR+AHpHzj+
ET84b917PmPn6NdXP6t12awu9p93yR/X2Kd9btZfuP6o78Uft53frYHvubjf
Zeu2z8n6K6744fTdb7zyveZGvzzh0A1n3rE8bq3vwW9/4bYjftE0K9tV+NE7
r/PGN5e389ptuHh+afNhS4Y0N3Dp6kfgH5zRb+vNm+dlPwKXrzOvatv9nuYG
zv8bvvvDW69tbth5wLmbLWtvmpv9jvoi3dVP7zjo8eV8+BtH3LDmvOV4ze9/
zb73F2Oa5nTpF3b61/0P/rJpRvLpsPOJfx/8yP3L8wtfYfz1q52y3B7+gbP/
uNUeXu2Gz/h/k/tu2HfN5f2R/g6uP/rVWSv+6OTlfDovfWv1iwcstxMfvufx
/W6+bfm4pfaDw47q91xTx8SsR/BXx7eddfmyN7M+wvVfB/S7amDP5kY9ld+L
Drn8Sx8tb6/gp15xwi4HLh//5H1EgcvvV+6bdu7Ez+gsGXR0/0Uds7q0Azsu
mz504+XtZB0vrdNv3pypyyZ24f91/Xn/vqBzbraT2e6tt+Lt32p/p0u/sHdb
t8tnLnsr9ROPfvC+F3f4ZK3PjH923n31h+5uf7eL/pTr5uz/attrrcbz8BOn
H/zQk83jWjuOmfnXjz+DH/roJ8dss+z1VvMC+KBTp7Wc3vZKq3ki3Dm9Pz/8
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
pgYPab6wpCeXyUvzn2s/S9y7hGP1mmi+Lur2J555O1Jgeb/FuYt7RMpStO4d
4/77CZfBLd002nfbl/JGh0vlpfnDa+quGmnOsXvu9L7w+4hui4iepXlKLybP
8zrF5Wm1H9hl+r3uXI6W3jCObh7Nm1QoWZ4h7GHGDr1ml0SWlytc/9lMxmXT
cYFfOvvIRLCR/+Kl+W/o55DhfeUkkeVxdd68NCiLY/VjwVFfRTHl969wJcvn
X8mlzTCWs7qy4HVdO609olHfFeMyjl9e4yyRU5rnj/okc2W7tmcomb3R7z50
zTLsJbD2+Qlxw725fF6aD+lSoTdzjzxLy0+in4V5Ty19BJYXNySnocs+eTov
zaPbuedK16dy9h0KcNXcc02nytl3HMBht3+ez3/VWWQcdnhU9GzQRGT9eNRp
9jpGnknXEfCC27d5fUWW1v3BSa46+/y4ZF6aj3ein12NvxyrHwIOe+62XDZv
sMi4f0Dt863lqazuPfIArY8FTSLySHmXSG5ESzmrrwKO93rhOP3fL4Fxz5dV
3T5xrG4hOPSjO63iaorA8iqLR+/3KuTStdZxy6N17Pzk/nR8wYd8a/ZsnyKQ
2ifNN1OfM/ywfLDGXMXyRXvW7RzeX+c7L807le+ONJXJv9N5Cl6x+K/pIu4X
L83vrd8nUDWGC6TzFBzPrS4aPSmPrFN4Ls4r2iomG4xRsTzYNTPnWLuQ+BH+
EBztp7rkFAoa61Rsv1/LHGWhWvN6GS8u05f7asmJ9e7+MKeHMSJ77pZDlQO8
uVBemseb5SKbZCwP56X5usu+1lyyXR6ppTesy9NOV+p8E5mek/8l7nKUv6H6
BFes8+tixj2negPH+dLOV3+fz1Yx+dsWvo0+JfPXel/8TxdsfW3mahXjR4/e
3B8lOmm1D6657cB3nT/0fAMccfKrZmtHWROO5x4KPFBru84v2h4c+/3kI8e+
j9LoZ3r6uvWbdCLpvgk89vOKeQ11wum+CRz7+mWr/Z1maXAr50VjXylC6X6K
5jfum20+V/GLnm/AHqbd6rvriT6rQ0vzZtX7ESunsZW9NLjVnI7TivVY/Vvw
LQ2bdumvx+rYYz7O/+K9ak0jVl+a5sMPdmxW2oDVowbH/01t239zTFax50Jv
VRUTL2Rq8JHJo26vrMXq5eJ9kb/x5O60nSUqxntusnuTqpug1f7tpEOux3Xj
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
qIYil8Y/tJ7AUGPbvgpW35uec6r9ud6gmm5uAvu/74rF9dXT5Mm89N5xaGzz
vwfkKbz0fm7dDc57nslTeen9YguxnW68PE3r/0Qab3y22nlYZHFUTMJ4z2Qv
J1ofHnqDPdQw2HzuqcDi5Bq3rOS6YgQvjZ/P7l5Q+EAI46V1utbf2NTardxP
q/+FifvGWlcE0Hr4sPOG4ePSXMpDeGl9M9i5xeIW4mUV6wf+aout39sIDT6p
/en1bSqD6XcT6P8Ca244xFaG8NL6Y/CTGTHXLgWoRKqfnkcWbY1OcKdygsOf
e2/ZVztXo/3OiRN1k4u86HPB50ZYT5v114eX1knbMm1gl2xlBG1P67ltGz5s
rBCl1b6ye+8mp5VhWnrDeJU+2TX/qIq1P1Sni24P5W9eWhcu4s2UFTIxlpfW
naP/OyeJ+csEVj9tcuysXYvEeK1xN5ozM85C+M1L69rR//Ed7l3YJjB7wDhe
6FRS9ErF2i+6Mm6aixCtFe/1fGn+0lFg3wmCPk9t//XPsSqAyg+OcWxg0Ns/
QMXm+563Cc3mVQdrxZ+BE1vanlCy756AQ/6h3QccnKKxrx++0fRMmjJWyx5g
hyt9oqyjVex9Kx5//pee78NLz39u9vj8M63ST+t9LTsbW5sp2XcfwN+c7+o8
QmDfAQHHeGXtcYgbomL5OYflF42TlFm8ND/n40WjO3WFbF6an4O4NNgo2MRE
YPcl4TcO+efHWAssP2318IZBs5UpVB7wLu5nh3dSJvPS/DGX35dnHFOm8tL7
m0UtantVVidR/dN8sA9Hi02VaVr81xS9PTOV6bw0fwzx/MDizj3lAuPwtztX
mNroCyzvqKr9DbOhQg4vzUfq97qF5zohl5fen8U+ovhJ7HZzQUXzhaD/WkdV
W3MEloc8po3bvYfV8bw0P/mX6HphYnUsL81f8h3l6aWrTOSl90dmxTnuL6hi
6xR40tur6y5UsfWX5rer7XZxP1cjpcDaK5aWDRv0l62nNF9aPR/1bhYtaiWy
PPAulSeTsqvYugwOPQiDOlX7CizP/POFHQ9CK1n8Q/PhPfd696hi8Q+9N6GW
84HTtpFpAuMTN228tKOSrdc0jz3yyI/TVSwuAof+p+f/cAwVWH4U5Dxj8GX6
BYHllQ3yc7p7Qsn2leAe6fdfpSnZ/pTmde804xsJqRK9RdF5MWBBK/cDAuM7
Zrbr+lrJ9sXgK6/3mr5ZYPtEcOwTz5WFWS/UkB/2nPZwd+2NAmvvbPYq1lHI
4KX5YHHvBqz8IWTy0nvx6H/8Gd0h2wWWD58XMiGgq5jBS++/73Ab6RkipPHS
e/Qvhn0dKhL5YbfgkPMW/yTxmMA49FNcbHnkqsDkEU4OvrNVYOcn9H6lerzG
3ivr8Ehg96CPre5z1lBg+3qar1jpZTxaSNbSp5nes8ARQppW+4HNfczukHGU
5s3CP3Svnj2pjcD42KDuRsHEP0BO8FoDn5y+RfynNB/40AIPp0riN6T9/3zQ
UbFRyOKl+cBbx90ZekPI0+LP/rQPCBTyeWm+NM672nocCC9XsveF3x40uru/
hYb+Oy37YblAzKT+BPKg/RE3ZWFvgfU/dku9sy+UmVr+GePbteH4/rMFtl7M
7cqtLq9O5aV1AJKsmsa/JH5buu7USjqlc0SZwWvlCavts/W3zT5dNdaX2cda
F9Undo75CO5gdG83T+xc6p/RT9SSuxdHC4yb/Lu1KoWsF9L5ODOBtzETs3lp
PQfYQ8YFu9YDBZYPeX6THzdPzOGl+ZPBsnGnToi5vPQ+cpPJ7wuqybhL760g
bvwwvlGL9aKScnGAYrFjMjvfAB+1+Ee7mb7snAQ8+XOrxw1T2bkHeL/LnYyj
bJ0k/i2TPreGR/L4maJI+d26i7ke8SxeBb+lf2TtDi8W94KfvWY72SWBxbHg
gbkX7zVdw/YR4Pjf5PeVuycqyLoJv51Rc96CxRUsbgRfZLZ047sKto+g94PU
65Sljo99TZFxxL3V05pmlApsvYicZH2oSSXbp4D/Nvi224X4E+k9rDpOkxSh
xJ9I781B/obVb3z3aTx3Qs9fp2ViCi/NNz76aYZRDzGVl97HhD98ZHd4jrvA
7ust6dByz6i/7DwKfNK6rneEv+w8Chxx5porG3bPFxlH3Ns4LSBivMjuT5EX
DfAqYedXtE5L6fj8Lf9CtOIH6PNlloW3gcj46qvn5/apiuCledTF2+3HRFWG
8dJ7XjbTD/e2rfyt9V4YR59ebXv3F1l8AvkXTr7C9RJZfNLAJKvJweJgybqc
ybeLjP77pShAMq+Jv7sQ/L12kZ+W/UNvL1SDXUdqjGN0kMt5eRHbD1J7UNq0
DM9n+1bwyuEnRp8tYPtWcPTfNK5oZICGnQ/aGFFkHsPif2q3xy6vHV/I9qfg
0IPr6xXdmpJ5Cr3Vu/1E/0rVby1/ctzHo3lJVZiW3WIc1x3Ye9ZUZPamSn7b
w7I6gtot+HadTyPdqqN4aR2hvA6Bs2qR/ZG0TtGKCSGrrck+SFqPCHGd0Y/I
nEaiBl8XucdfGc9L6xHNPBt/tg3Z30nrCCGu+9Ss1zi5yOoPwD87dvL+Zykw
Htt4bn6GyL5PCu58JHz5G+LnpXUbjO/H7jQkz5HWN1jx1zLGXmTf2QTHulkS
s+SalcDeC3HLhtWnXIoEdq8c/NXveSF/BHZPHPLXnd3i9kGB1e/avOSQv1zG
/o8D7/dTGBSuyualdcDcinSm9JLl8dL6WhVDbF+4qtj3sMAhv5We33AHgd2b
1pt2qpGujOU90vvU6vbNnP41fiyw/vE/4I9r5xqsULJ6L7Z9dVtclhXy0npi
po3qLDsrK+CldcNszR8f2yoUSu7BZfJZh+yilsjyJfcuM2n889ZlV+VGDXk+
PinruOu/e7qSultrzz0700dg/zNK7jvz5rmtStsqGXeKK8n9rcrjpXXeYjbs
2iGTsf956f1itTycwVjTOQJrbzVxs5UL0Z9UnkUDMr7UkrH/f8GhT7f5zofG
COz+Auzk448Sl2Ilyx97dkCXd1fmUL8B3m+R2GU62e9L8522Fhx6dVCZTf0V
OMb3UD+b3F9Ktl5zuwL2FF8ZRfMZaL2gyb07j1oyQisvDvI3XvNw4U8ly0vx
Gzux4RyhgJfmp0Fva0ymyJKULJ+tw9060+uQeFiaF2dlfj52EImHpXlxVcG2
d9uReFWaN1XDK/CDb3UhL83Hw7jrtf6ddk/jucYL/F+JpD3iKHC0930tf/te
yf5nKWv448th0l6ab4P29T81ttqoZHrOqW8fGK/M1ZIHegjc8/W+k5LJH6Pc
tWq/Mo+X5msZna0ufKrM56X5Y9D/otCddq+VrH/Hdf/ippLnSvVzb0LXd9+V
Bbz0Hhn6KfXb6NZNYPU6hg0O2HhQxb6PDH4uMMV+qyqfl9almZfrcblMyfK3
wWf0XyIbrWLfTQaH3pwbfNNvLrD7xQNd3rnakn6k+xe075m2clmekvln6NNi
Z+NpvMDqTkwY53X7jZLl4YCjnyzbq311NNrrOQQ1fi3m8dI6RaPaTXFME/N5
aZ0iPPdCYsrejgLjrYY9NC4TC3hpnQ3oeWi3odGGAlvvessfrjXpyPInaZ1A
m1MtH5iy/Elw5F/ZT5v5vbPIeK2xVrHjGvtqzV/kTVm7LV5xTiOuKI2Lv7dy
vLPWvcKnfaelBOWzc3h6H1kdvy1rw4uXBXYvUrl8QG+PCnZOS+vvPVum/7My
UWu/trppvQVXytl33iEP4uQmr9NVCQKrB5JgW7m8uSqFl9YJuZO9IyZfTOal
9Qab1tmXb0H8q7Se4aq5fy19xCSte/SdVD5uQ5Tse9OS793wNpP7nAlXsvt6
GPfo8S8e1tPYd0/90OPoyHJ23g7+NbHfVafyMK1z0Y95fTt3IvYmvVeYMmrt
mmTiP6X3oOn6q4rumaFk5wzcCHvfdcTepPd80f7Yldq6opLxyn1vPWYTe5ae
53QZN+nX6wp2Dg9+b82M1EaV7P8CcMR7hXojN37XOGer08qsTkV5LC+9b4u4
LsVnbdldgd0fbx5jkjG0nJ1703Mtdf+PVp15u0Jg+kQ/N2bfCvIW2L14k9Pz
yzZXsv8paNzYfsyHeRVRWvaJOHn0u8wGCQLjvHzYY2V5hGRfHMUfGdGr1ayK
eC1+Udm28kY5+x8B9jY6pe5tcxn7PxH8vY7R8/My9r8hePnl6wN9ZOx/Q1qf
Ux0PfM2bsuWawPjBbQ4drGTsf0nw2bdlu3ar2PdMwS90Pyp7qGLfpaX7TfU5
j59i+MIfGvEhzlU2Tbvx5p3A2n/3qXkyUpWhFa9i/i5t5dklQGB1hxwiVtic
JftlaT2iOaOTC5aQ+SutsxSyKov7QPbR0jpOzV4uWtmLzF9p3ST3q+lfjEnc
K60HmNtpzdSxJH6W1hVE/PNky4X1tgLj0PNsn9zA1QKL3zp65/3ZrsrhpXWo
oB8v79VpLgLjB5ttcxxP9CNtP86+sHEzon9pnataFetO5YppvLQ+Fcalzoa6
dq805NxWw2pItsi+Wwr+aXqU0yIxTUs/ytT5nU+L7Pun4Oh/ZmTcy9sC4/13
JHh4i+w7reB4X1W7/vVPk/F908XQ5rOY6EPvVz3yO7aBrNfxLb1tC8QkyuGX
uroV/G2gSqYc/mePx7auDzX4yIVrOh8gfO/gduv6qlIoh58M/jYnda4qlXL4
7Te5Ywz6yTJ88P9bzTYRz9xIP9u/NH+RLqZTjuf6zZjWWV/F2qP/RinH7nT9
776hmkv7p9/R8vXcfFdWzb/dXjrRT8U4zj30FGb+/32/k37/U70ONguJa16o
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
FcoSvlYv/V5LZIzD/r0ut2ubImbxUn+i237uDV1VNi/1P2Z+l/ZurpFDeWtX
le8+oYyf5XG6YWcV4xivk/e7nO5cg/W/Y47rinNCOeWQ55F72OgRymJ+wtrY
BvkyxvFe9fucCDLQTaJ5HL+M0rrrCcW8fuBLgzVcMi9dH+fNzjp2mkuhHPqH
fhAHBlrdcbhNnstNd5vRlGMcz82z/3wzRTeD8u3PqwtOKYv4OxuNRi/lGEf/
aA/5xWW7s6Yr//JPJm9tc1/GOI1n1HqAPfdZNm2YHhmvGRP6F/aWMY7xKt86
bWcYkVO6v3tmWeQ9U5e9794Vw06VETkrY+9f/ybL5KVxyAKfoY8Oy9J5aZyz
WrlqkVijgNpVpzEtK1uR8Z0y5PjcaDGfl8YVjkHev5Qia49xf923Yb+U6kJW
50Dtf5BPQOscONjMqiuU8oGJwnqv//L71Xxfud+tXsROIA/sZ9dwz93zhX/8
qEVmey6q8nmpf4Z9Yr5scr484g1pPzGsZ99UFePwV9A/rX85fXD6NyKP2+uA
0bdUjMNPVo9Wvvch80K6HrkO/3RykiqXl66nF3MXl7xWMfnx3KWvB3e4qSyk
HONb8rNUvlmVx0vXC+iH3lP8O6/FeiKn6DYt6ZXI9Ib5i/lC7yk2D91W/7/7
7Go7gV3VX/nZcqBYxu8qqW6xWJXMS/2w4p18Vz1iP1I/j3kE/t6juVtHsZRf
6Xj9eKCKcciPeUHXo0blyU2VZF3u+lPMVaXz0vXly6GeVw6pmJywK8P6K+u6
qlJ56brWcWWA6yBVEi9dF6AH8JXGq/9ZiOX8vdI1YSq9P6zO68EW78zFaj7D
8O7o9OpoVrdVfX54vHftvl2VsZTjfC+t+xDPM/px7L77z13GbcUqvsPU7abb
lPGU47wO8mAcA1oPKYkQqqndYj7OErrd6UHmb+bx0fI+HOPwM7AH+v+IUrc8
rbqYv3BY/5evjHH4sesV9U7W57JpP/CTmF9o389i6Yyw6iK+h9NW35oc43hu
f8PdtnO4XFZ/Ave+1XYFf9jCcFw/d+L3lvcdvTxUxjj8XqHS4v0RLpOXnkdN
S0oOHsKl89LzsRd+NrGlslReer7U6EG93GeyZFZHQe3HoGf6HfiAvGhf4lch
J+R/8NW/x05ihxsaOw9vImMcdoh+aB0Im7VhJ5SlfIvj6wL/qRiHnb+7G/5m
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
VwJjSU/2Pkglv/ONnevCq+gJP7Py/uaWzai9UC7woPUTFhpL81n/wd/rNevu
eJvKRXngK633zimK+IGz73eYTqv/hvSHHtC3u53F2I9VcPBM7Plssjfxs+8h
VeJjLq7Mf0fywMGz3+Tu2hgqF/XFz007Pvz+J8/eY6osJyL7yOGnxA8cfIXj
7gX6kTx4wdPffvnD+yQPu+D/fqy5F1Sf7Ib64v+aF3tsq0c45GGHruk3F4aR
npjn8H9DT64dnE7txebLSj0zJ917NEkifpcZPPMPl40+oSlhOMptE17nu6zK
99DZdzG899cM1hQx/wj5DlvO/7mgKWPlsnewu7fIbSwpZH4W8p19GvfdqFEy
HvCPnGRoOpdwlh9WqX9FgmXzN1XqBTtffzm5exjhsAPwEJ+XIcuq2Ie997vY
fWSJRvw+MvizjnQ1NK9SX8jrlbmdGUg8mM/Yd8oGNd6i/W/9Xumv0D4Xfka/
tqX2BY52KXtUUqoiO4OH7Q9s/XLVkn23WlwX55X1UKSTPOzD3u25YuYeVgWH
fM47n4VGxAMc+qQsdZmoYXaLYPjZJRH656rUC/i5q9MWOJIdwMPeJTYMytol
Eb/fjXZsb3C6U7xG/A412nFYiu6SWxrxO9FMfojJ/jdV9Ic9Q1MHdBhRpZ8A
D2um2NO6in3Ye7BDxwyfRfLQn51fN/q4vpNU7A9Mn6aH/fZS/wSO/u9QqlaP
ov4GfrSb8+DbC4yJB7/j5zbl4l3OVcoFvvVDctv7ZB/8zvJdWxQOfV8FRzlf
8+L2D5aK7QI9Rx05tn6ARi2e91e276fDWY+CSH+Wx1OJF5tutg8i/SEPnssV
brXHVWgYDvsrm51oO4X4wQNc8DVMdid56MPen7TIP9+dcLQX8IXddtm3rcKD
/hnn4rjpOOHoD5Bf4LfNc2UV/dG+Rnec+mjT/As9wZMY/jbreJV2AW7046aS
lqKsv+Lvg5y05v2bL1j/rtR3TaDqrH0VvwrcLLL2jlySZ9+pqsTbDTc296oy
X4B/aIZO/ZNVcMi3qXUqIriKn4f/CGn1tmtNqYjDHtlq8+XhEjGuY/cO3Fvb
vK0yj4Dn27RBhzKq6ZMq/Lep54u9VeIr4JnHuzw3rTLPsn34ns0vyaWifdh7
FPYb3a6S/rAPe4/xWGnxtirzMtrN07/VeIH8HnDYZ/DjfS//+/cOSSU/5J16
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
NmeYZdwRsg+/HkF/Pjf+P9eBcSEMZ/dk/c9bf6J+C1wzzz30O/l9fn2E/vxR
aSZPIx6+3yaddd5/IFfcjzI+ebN0GPUTfh8M9p/oNyHYPFfcp3r8oFb6UbIP
2hf42cJsuzXEw++Pneo2x82UcD4PGf3h0EvrvQYUt/PvHJ7f0HvWhDwxn7nr
LP+5i6i9+DxhtO/qT/5pt3LF/F7w/E0yDHqaF8vOZ+t8aTDkL81PfP4z6iu9
VuGuyhXzrrdtfxB0kMrl85ZR7qvMRnV+54h5ZbY6Ga12Un/g86UnrexnvIl4
+Lxo8NSZkec0JDeC4ehvbUwSphzKEfOrvy0x33Gb+Pm8tYdDhgjH86MF/pwa
8/vbBc/TU8qzGY74cPjghz+dyzOr4Rf1/VvYk53A/1T3W1Ei8fPn5vDzX5vd
ed+Z5Ply63b+YvGE+Fn+3riJ9yaTHfj8atgh0NJtkhG1F/Cxg2es6Ej15fOu
YZ/IwmNd7XLF/O2vHu4Bk0iezwNn73DW+lFzPvEDjx/wp8Sa9OHzfrsetIww
on7O55kX1S2+F05xFXD+fYzrD9xvtSA7s++4HfNt50ZxIZ/XAfnvIT0SUsoy
2Tn4lO39HHSJn88bGXi3Q8OkslSBz0th94C+3X65vTy3Gv+q2VPu3S9LZ/Ua
t2K1bRLpw5/jYzx2OHrp9HvSh39Xdvr9TiHOxAN9ns795uhLPHzeC/RJ2TVL
UYPanX8f5oR2cYuU0lS2TyjvNsntDNmLz3P2GPPGJYbqw+czo91N43OMnEuT
GY5yR+dbFg0lPujD3tlYZjBdXZbN5DtENfzsS/bkz/1ht7UudVdOLxfzCpxf
e0dvofry+QZ1LNxWTaH4g8+jwLjocbCp5H25mO/R0HrJ3i0UZ/B5GvDbsz0c
vi8m/fn3ot/VH6x3vVzMx9jaTnOyB5XL52lI1tn3mUL8fP7DBqeFY9IG+LD9
YT5P0vjlue+WFBfw+Y1u51wVMTQO2H29ynbc4/cowshGzH+Lfvb7+i36fz6/
rv/XfNtoGl/A2b5BJc9k/cEmNZrZMXz+n0WyLJLn8+4wfuevW/7HNmgi/x1w
4U+Dk75zbcW8O+h/3cty21Li4/HRIds21CJ9wePseq1N/4E+LA8EOOyTcvxB
+TbiAa54uX6SZQtflmcCXPozfdHdSbYMR/xz2TNa4yL4MJy9+1G5D995U+ut
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

              "], {{{
                 EdgeForm[], 
                 GrayLevel[1], 
                 GraphicsGroup3DBox[{
                   Polygon3DBox[CompressedData["
1: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
y1jz+z9iRZtP
                    "]], 
                   Polygon3DBox[CompressedData["
1:eJxN3HeUbEX1NuDT3STJPcBcYHqAe4ecJSsooCggoiCKiEhUkkQBkaAIBkB/
YM6KoBgQkKQkBREjIDmI5Jwk58z3PneXa31/7NVVfarq1Kmwa4d31/Sd9/3A
Pv2u646ftetmye/Fo677U/74W+iipM8N3ZH07aHzkt5i0HU/Snqr/G4Z2iH/
Pd3ruidDOyZ9xXjKJn1b6F9J75T/nk/62dDOST8SGqbeWOifSb887LpH095/
Q68kfXHorPTjzNCfkv5D6KdJnxC6KOldUueVtPVS6ONJP5D/TkndD6W90VjX
XZj/Hkz+kdb/80N3Jn1N+nLrVNpL/v7kr0r+luTvyO9daevstLPIRPo6Ue/z
3mend91lKb9Q2l4ybS84o+u+lPy2qX9K6l2V+kcmv2Xyt6b8ayn/x/x/cvIf
TJ1nkr4gz29N/uY2flNp5/WkXwvNSPpPxi/pG1P2trQ3nv/WS90Ph5ZI+oy0
e23690To3GGNm/GbLzQtdGXqPZD6d4WuTfqG0IlJ/7S1+e60f17qnp+6z0yv
+bytX2NibMzfM3n+XJuf+Vr784fmCT2bep9K2YNCzyV9aspckPTTebbaZMYn
77gm+e3S1xkZuzfnv2eM17TMUb7nljz/T9q+N3Rr0q9abHn+cn5fCD1uzeT3
t6FfJf1E6CN5vmLaWyTj/Ur+/2W/6in/5jzfK239J23dMVXj91T+fzL056Sv
zv/3Gt/0dcH052JrMPnPhC5J+p5Rja9xHqb9J/LfO5LfOPRk0n/J8zmSvjvp
O9P+Jck/1681Y+08GNo0zzcJPZT0GaGz8+x3viHpb4UOTfq01L869b+X/BeT
Pyr0/aTXyPg8lbrLZnxeyfPv5L8j8myn9GfF9OfLyX/MeIaOTvo/+Y7Nk17b
Gk76ztD+Se9nzpPeJvUuzpBeGNphrNpb334IfTvpb4yqvHpvTK/5eTzvf6zN
36np5255vmvr8x0pt33SO9rzw6q/c9I7hL6Z9LGhTyT92da+7z0s6cND3036
mFHV187r9kPyDyX/RvJvyvetn/duFNo89O7QnXnnrPmdvY352eYw5f8VOjPp
34f+3a81dlbSX1m0695pjeZbxzO/X03+B/36z7M/j9fY7Bv6q7Uwqvk1zw9M
VXs32SvmbFQk/UL6N3v6d/+o+qef942qP5fl+d+t49TfJv+/PXRs/vtSv/gl
/oWPzZH6P0v+pOSfSn7WGfUrb08+nfSiY7WmXwxNjNX6+Wvr67/T/uP53SDt
v8Ucjde6fEfrz8zxSvl127P7U/7eYe0PbWr7ofHiEXjDw0n/PeXnTnrO0N/M
Tei+7J/bjU3q35ff3ZP/XdpZeKLGEn/H543pNqPav/bxPSn/tVHxA3xhtnzf
A8m/K+UWzLvnn1FzMH/SY2M1N3eParzsOXvvH6G5kn4A3017/0r+jbS3YP67
fFT72v7eLXS/PprPpHcJ3TNeZ4bv8513p/4vkz8z9R/r1/e9nG84NXvhb+nf
c1l/syT/laRvzH8fH6//Pf916M9J75s601P3yqRfSvlX0+cdhnUWrpry++gv
nhX6RNK9tHdYnh+avzbJ80/lv9Xy7ISkL0t/blgy85z0D/Pfj+39tLd0+v6D
1Jkzdb+U/FptL8+V/P4ps2zy3/Ftqf9t/CjlN+zVfz8OrZznq5gX7Ybe1asy
yr6R9vZOW2unP+8cr3d417J5/r3k9w4tnPRGmY/F8+z1lP9knq+Z8hvm2bT8
t1CevbfxP33SN/zmJ+37lkl6ydABSZ8Q+lnSy9p/me/LU3bFtLVC6IphzbP5
3qadYc9O1HPlXsj47pX6S+AlafsfUzW+M/o1B+bi6/l/wloOfc33+i/pxfK+
hWfUebHtoM4IZ8UeofE8nxb6pLM979sp7zsq73t+eq1L69P3LZ30nimzWMqO
Wvn9nMn4Tcq/OL14Ot6+XMpOy/v2Tx++mPaOtL8n6rt9/69DK4zVebBZyr81
dFfSB4bWdE618VpxVPP1w7Y+Vkh+97T33TbfS+Fvye+S/MXJL5P8Pcl/Ivk/
JT+R/KKpv1/yf0x+N3wsz9fLfwclfXho26Q/Gjos6c+E3p70H1Nmu/H6z7P3
hw5Nuss3HJRv+WiSGyf/aL75x8m/K/lx/Cf5E62PlF8i7z4yZX6QdMTDbpWk
vxD6V/JXho5KukeeyLMDk74o9Y/L73eS/x6ZcrxkKLLUUVl3f83zzzqPU/d9
oUOSfmqiyqv3tzz/QX5XyNit6Lwcr/JbpOwHQp9LevPQV1L+2NCmrf3Z08aH
xkt2+3T689bUXZfMkvQ8+e/AvH/rlD8pZbYKHZH0ZJ5/a7zWiLXyHrwy7384
+W8lf0T6+4fk904bi/drzVq71uTXU/8bXa1VMh/Z79dJX5nyJ+d3U/wz9Jvx
WjPWzkEpv0Xy807UPrFfNkv+qFHt7x83eXIq+bfkW39hnKdqnVgve4Z+Nl7/
e/7W0K+S/tyo3ue9V6R8P+1/eVjywMfy3yJZoy/l+ZuyPhdOet38t0zbq/qy
QOixpM9rZ9z7RyVvkjufml4ylLPbGU62+nOe/SV0dej0Xn2jb31/v2TiQcof
k/J/zTt2TP6MlPl7r+opvzn+kd8TrQGydcrPlX6tnv49kvJzJ3996r/dmZn8
vuTG0E2hvUMfJI+0tXBpvncjZ3jyR5Pdpqrczc6KVn7+tHf/sPbrhSnzeP67
LnRx6NFe1T039GDogdB2o1prW9pTSc+W+meRu5L/Uup/eFT9cSY6G28ZzRRn
u4hS3V9HxfOdoc4+Z8Gjo5J3ya//bfxqoaT/r613ustvQlsPSofB5/C7H4cW
d4am3M/SxLe7qrNl6t+Qd19vT4xKR6Ir/TZ0SdMVfN/jTWf40KjGw7hsnfQW
o3qunLneNTRv3jV3aDeySJsv83ZNr/bWhWn3513tMXoEfcJ4nJn0VuSBXs2J
uRmm/IPOWPJyyn8MT+6VzLF9kyWM375NJ/hC/tsqZX/Z1vvnRyXvkntfzfq7
MfmlMi6zZizmnlFnmrNto16duYfjrym/EZl0VHt+3bZ2Lp+qM8xZtnHo50lf
l+dLpr2p0PWj4gl4wzq96oPnM/D/0E2j0u+WT923tPbpgfTB8dBSY/X+Nfq1
h+3lI5wHSW8QOizpQ8mf7d32563Jvzl1503d+WbU976vX3vYXr4m9OH054Oh
a0fVB315U8rPk/LTnFe94nF43WdC6yX974zXK40X0Uc/ELol6ZvzfJW2t+6b
Kp6MN+NheNlVeT5hAaf9OdP+fJm/u4e1/s6lw+B/eT7I87lm1HpfbVDf4FsO
GdVevTF1Xs77r0x+Ms9WDv1nVO+fLeleyx8celu/+vyZ9r2LDuod3nX0ovXt
eDbebfzembIbtvG0XseSXiC0u7NnVLxjnvRv3hnV/nfwA2PkrM/G/Hue/9U7
kv5dvumbqfuN0O/HS996T7/OnK8n/Vr++0bKfpmOmvTroS8l/d3QG0n308ZX
kj7KNyU9V+jXSf88NHfSk+Y37/5R6G1Jv5I6X8uz4/GApGdLmW+29COZjx1S
bsfGbzZrZ/jW9m2vzvYF08bxGY+vhlYyl6H3trP8kqnio/jpSaGfhjaxD0Mf
CW3c+KS96cx1ls6R9/8g7/+eNTVZ7Whv6/bu9fAweyv09qQ3JF/bG6ENkp5l
ssbHOD2e969hDepPaO1RMULjZdwey/Nh8scl/3/2cNKj/Hda0rNF/3006fno
oMlvmPmbnvl7Nm18tVcyx7yT1Z/vJf3NNp6b5vc97Tt93y1ZI+91Hie97qjm
Y9e0t0togaTPyv+nhM4JXRhaf1R5/79jVHNm7jbI+5fI+985qvPAueBseVfo
gl7xPLYUMhHZ6Ahn4VS1e0obn7PbPDo/tmjzuXXr76ZtTn82rDnfPPTzpG9P
/7dqstg5aW/VjMswysdr6dNqSa/CjpL0i6HVp9X/ns8femVQv3fm9/lB5Xsp
c0J+58v/b076rrT/kbR/SN513/Sad/M/d57PO0vNg/m4vbWv3gltfXi+7GS1
7z1vT/qtoTmTniO0rvU+Vf3R79eSvi3v2yLve0/o1qTXTJnXU//jGd+VMr5r
OyhTfoWUfzXl3zZWe+mF0M5jtU6sl6+Gjg7dPVGy6mfS/3vT/3uS3yb5A5K/
J/l18GjzEXpL0r8YlqxL5v1l0nvk95OhA0MH9Gq9Hpzfg0JrJr1W6LCkD2nr
l+65a6uzW/uV/3hrY+6UeTrvfy00z6je4V1k8F8Ni298o613/Z8/ZebMszlC
w7Z3t2lrwtpYdVTtey/b1mqjeq6cvX7ysPjDDm3tLJ3xu3JQOsCsTRZy/u7f
9jieZDyN6+IZ7+XxT2u3V/xj4dD0XukkdJPFvLNXMuG1GdslUv/S1P9zaHrS
46EX8uzZ0LSkp6f82vZaaEmyA/7uvaH5yCYTpVuelL4+0eZrwa5kVrKt+sv1
Sieegd+GDsi7DsETW39WybOVQ6OkX0/9/6T+Hk0/Wjh0ffI7NX1Df69I3QWz
np5J/l8TM1WcbsXWv3HnedKrhxYfFUnTceg6M1L/gtQ/n0yQ9DV0vNQ/OrTc
qOy/9+VsuLtf9olFUuYPKfvH0MRknS9/S3qRvP+5vH/R5C9MfpOM/5IZ/9nz
/yeT/w1+m/Qdxq+ln7B38vup5PcPjSX97zxfsaWfzvPb8Zvkr2n9s55mTf/7
vXq/+Tknz84k308WSb8r75/K+xdM/ozkfxca2a+hc52Xaf+ptP9S2vt08n9p
5+M8oVOs2zx/cqrG59rkpyX/bPKv2C++PfnnfW9+f5n86e2/OzN+23bFc/Ce
ZVN+fWdHr8bTevxkVzoNXfj7mYfleyXTsVvQvRZLeonQd+gB7B/OPus86UVT
Z2QuQ4sk/fWUObcrfeMbST+Z/z6avqyS71803/988vvgn6n7cPr71ZS5ibiT
+scPq70VWtv068smyvbz3Tx7ZHqtn02Sn5/OlGdLZTxuSHvvT/tLzaj9pP++
478p/1zyu+PdeT7RzrO9B/WfZ85z3+c76ZrPJP9FfQm9kPSNeUeqzdT56f6e
bz+ob/JtY6FX8/yl0AKj2jP2zlvyvsVSsW+9Gt9mPzD+X+7KhrFQ229HpPzn
nNFJL5Tv+W3S72S/T/0b8t/SyV/e9v/Syd+VundSY5J+MbSfsyLlRyn/VPI7
4d9530NTtWftXTYFtoWXkz8wz9dM+cmUXyDPbsdrQteEbpoo29UJKf9Yyr8y
UfNpXh+aXnOlvHrm7I20t1va2yH0dNL/zLPzQ1eFLutKn/hg9upHQl/E3/MN
A+dc6G2Tdd5OK3G3u2Oi7IWnJb2/MU36TaOyp7OrL5P+fii/t+Vdt4a2TvqU
PPuN8yh0cOiB/H9L6J7Q/aHD0+9D8v/hoc81fn3ToNaMtbNV2vhP0jeHthwr
e89D5P2kl55RcgR566ImTzyZPn3X/KWtBzIeLyb/S/sr433eVP3vOR3xS0nf
5cwMPZL8w6GnU/5H+f1J6LmJeo/3sYd+xJxkMB5K+QdDi00re92JXdlYHp+o
+j9O+oehZ5I+J/29nr0uZV/M+1fhA0rdf4RWItum3Lf+Zx8J/aDl/f/9ZvNg
+1g+9F72gTaexvX0rr73s13ZhNiGNs77LumVvr5J0k/kv+Py7P2pe27e/778
fsJYt/9WnazxNc7LZzwfSvl982zLPPt9yi+Z5ze2b30h+fuSfnhQ82j+fM9/
jV9o5aQfS/2jWl9/N1U2HLacA1ubm47KHsK+8R7nQ8p8JeNzNl0y6c1GpU/T
q9+b9COZozPy/Cz2gKR/MSr9nx3g5FH5h57Lu5+1x5J+KGVO65c+Ta9m71Zf
O/183wX0i+SPa/YNOvcvkr5vWLr4b1L+nH75vm5Kf3bMuOzeL58Pn92ZdKB+
+TLOGi//zTpJb9Iv/xN7/wFsX6HjR/Vdvu+YVv44/I0ttT3nH/pwv2zcXyHL
h/ZMeg82j1H5ufi7PhfafqxsF/y9Z7T5v2i8fIF8JVMTVV9/9XuFGbUXre+7
2p48J+WPzvPvNH3VOBiP49lg+uV343/7fujboUWn6rlxuz7p5SarTft82Rn1
PRziR4ZOSvp082v8+uXf+8Go3ue916b+j0blL2HzYfu5lFyS9B9Df0n6tFHZ
1h7lU5hR/Ty69Ut/jl203sWXN4b3Z11OT3+WGNQe4086OM8PZEMY1RqxVvi9
e2nvk/Ssttf3HK81a+1um+9ZLs8Xn1br2zofJf1PPC5l5wxdnfRVocWTHrX8
Lvzg+G1o52HxTLzzoLS3atrbgIyQtTwveXuy9td+Kbt36MGJkv+3THqj0H8m
qp76s4YOTnrD1Fk06QOSXmVGyWve5713TC/5a+nkd2NzS/7y5OdLfvV82+lT
9b/nedTtmvRq+X+epOdtZXzf7F35bk5L+b3ynp+Sp/LO/ZLeN/St5I8M7Yn/
Thb/tv9XbLrJPKGFQqNZyp+wc/7ePnRf0uunzCXkoXz/7JMl76zmvA5dmfQj
oV19T+i/E6Wn0FfYmNg05pys/ujXyvn+9Sbrfd5LN6JX0a+mhcZDD6SNvYxH
G997Qzt2ZcN+uPVn4ZRbJPSOyXq+Q559rPV3bLK+13evPqN0Nu/4VPJvnlF1
1N07+dVmVP8/nbqfT1/vn14+rpnn2bB8X/jhF5I/MvToROl19Lu50sYnxkrn
o/vtl/J3p/6/k39b8uuGbp4ov8Y9Sd9t/pLeHl9O+ndd2avnzEJ80tkTmgvv
yu9fQpeGzm7llD+n5V8elD3mmEHpyNOmSh74KFvlVMkt5Jc7Qrd2pb89k98n
WvvLTxY/wQPwgtlG9T7tzz6qjUH+IIe8kf7PMar36/eFUyVnkbdu6cq/OEue
39++7YKp+t/zO9v76TH0mf+2/crnwvfyrqTPnqp3eBc59cHp7Tu6knPY068j
gya9ROj6pNcZr7W3R8q/lsQKk7Xf7fvX096e+X/1rmRoZRbKf2/pyld41lTt
54lZak/am+RP5dW7K+/flpzRlay283itS+vzO3nHtwfVn1W78iWeOVW6p/kw
L3R6ehp97bpW37qbo63t/cdKbrva3ulKfuOL2clYhr4wrHVoPTpz+VFenajy
6r02UWeKs+X08cJbHMzum2dXhD6d9A1Thclxxjpr8YQ3jxcPxCvwlDWST9Mz
eY3znb3tm83fR/69Fz9s/m1+rtu68pnynfJ1f7+dMXze9LW18t1zN3skfW82
czcsey9fxxqD0unYLPmXes6L5h9ln9Te/A3foB3trROazzvxr37ZMGEg5iDn
DEpnZCO+LvU/nWe/Cl0/XpgY2JjXh4W/6JHbB2WjJQTDycDL0HFfpcOMV//0
k2/mn/oVXvda6B/DwmjBaj3c2nw89Iekrwu9mPTsztFB9UnfzKG5xBOPGNaZ
emQ7926fKnvxIGX7/7M/j9W30pHZyOnDKyU9Z7N/X5s2vtArmw+bN/s9vMtN
zV7MnnN4nl3X7NHsQ0clf2qzj9MJ6AY3N/8CeZS+v3vzh/kG30LGhQn5m/3X
Lx8ZX9lPR4W3gLugqMG8wL7cNix8DR8KX8qlw8IfXJbfWfuFgeNjhocznsaV
v5kPjy9vrV75EMnXN6b8S8PCo8C7vUp+HBY+4bcZs7VTbuF23sDEwMbAYd08
VTZ/tv/3tW/kL+G/uGpY2ACYHtienVufzam5hamDgfhtyn88z3YJnTFeMhxZ
Dm7hmqmy2bDdwDXwd8LbwAs+0eSX2cbKN02H5LOZJdQfFKaKD2HW8KVjk/4A
e+tE+ZD5knejTye/njUzqPPX+Qy7wT9Ov6KvzJX6n0j6HfRdtkH+skHZ1Mk8
7OuLpL33NfmH/fKOPPtw0+f8yt/e9Dlt3tN0OLoRe7X2Ptr0hy2swUHpDHT+
pZ3vY3Xesc/uwA7flc+T73PR0BpjpSPTiUfJbzpWNiE2l4n2jeQP/gW+xVOb
vsefZkyMzc1NXoNJhBOEF4RV9M2+nc2cTWZ6G3M+Mpi7JSdqj/PpwJjBfMB+
0PHZqCbtkbHSydnM6Pv26+zNv+bd5of9dcsmH/n+LZp+Siehm3ysyeN8zX/s
yv4MfwZ/CI/zcJPfl5pW/Eaf9O0n+f/dXe0JewP+jH7x/LDwg2xMc0wrmxzb
EzzeGnj5sPxP+MRMfjGotcXmt8C0slmyBbLBLTytfD5sc77Bt7Ap0wn1UV/Z
tOn4fGz8TfxOL6duP3VPGtQcm2uYR9hHMvgzw1oz1s5pTWeAwbDezYG5WNqc
5dnC5IlppePQdehAxmwX58Wg/Ens3d7jfXM3+QlJs9GTrfhrlFeP/VwddflY
2HjxBfxhPvqG/cynl/SVoX+OF4buX63v8GgwT7BPP+/Kr0snpBvCR/J/0VHo
KjCesJ6DGaWn0ld/jTdNlY72cNM/6USwj+f2S1ciUzrj18i3vzFVmF3Y3RO7
OuP4q2dP2Tn6hfWlr7M/TDZ5hU5Ft+IDn4n9GVXfYCL56pzn9Fr67Ymj0uHo
cjA5sEmr0z+bjZ0tHeYG9gaGCZYJxgPW45iu7Bn7pp3NyXMpf8Gw9Pfzxgs3
QL/iI/h0r3xcfAfOL2crnZeuSMenE8MD/mRUZ4K+0cGdFXQ2WFwYQLocHwNf
mTPKWQUDAPsCwwQbAGMJuwizCXvpfPl8vzClsJZwQvghvgjbZk/gq/irvcJG
DUvHR812DQNkf9qnsCEwcrByT/QLG+jMJQeQB5zFMIGwgTB5sHlkBviP5/sl
SziDncUrDMo3DRMIGwjTfEV7P1v5La0+mQyuFL6UrAazB7t3WltP2tQ2DDQs
L0wp7CobwrEtD2vKZgDb6oyFZTUmxsaZ5Gy6elh4U5hgGEKYl0tHxaPxajoK
H9X/MJmX92tvGD+8Zbuu/M8wibCJMJPGx3jBTrK5sL1Y72wBMJszsZtThW16
o1f4QP7SXyd93rDw1jBeMDzL9Qvrp/1/J/9Mv7CQxuPB5BcYFLYR5niD8eJ5
5hMm/KbxwjgbHzITuc4atBZh2uG+4b/Pb/vzmPTn9H7hqZ0pFzWb4vltv8NY
rdQv2xBMOd8xHzLMD0w8uwX7BbwzTOqfxgvj7HuN781sbs1fdUbyb00+PzP9
R+cn/fN+vV8/yE3kJ/wEX8FTyIuPN3uIvXZCvzA69hwd4m3jpePQLT4yKv8X
P9jT0+ub2IfwIN9KxifrwyzALlhT1ha7Gd4FEwMbw8ZLJmNDYxc6vpUhM+GT
+CVZCsb38vHCIJ/d1vdtyd/SK7wPzNEXvbtXeBc+eDg2eDb+OjZJGLOvdWWr
hGmB2WKTZptmg/zAeNlM2E7IUOS+tZo/zH6hyxzW9jtcLnzunqFzhoUhgfWC
iTi0rX9yGnmNrAZDBku2ar9iFdgsYea+0JXuzse81njZwNnC6agwhQ92TXdN
/lF2lH5hjfEDcRziOeB39I2+RUYkK/JhwQjSceg6fFZzTiuZnez+4FRheGGg
YKFgHvYZLxmNrMbnAtvIp8MXQwYkC441/zUMHizeZK/8FzAsd40XpgS2xD6z
36xha9l6haXGQ/HSZdgzxsr+tHLaO528krJ/CJ02LL2AfvD90G+G5RPcJ7/r
d+Ur5MP8UfIrdeXb5LOhG9IR+XKenF4+Z/7hA6aXz+h7dMeufEl8Gp9Kfp2u
fB1keGf2m/qFd2XT/+ywbN5s33QCusFs/cKm8il9e1g+W74mOow+f6tX+Bk6
hnVtffNlnJL0eJ5tR58Y1p60N/lUF2vfwzfLJsM2Y81Ze3y6fLN8qnT2a7vC
dtJJndvOb74BNi22bzo5WxGbFNvUvm0981HDau/3/+1Zv/LbjmqMjBWfN983
GxbbPZsV2xUfMSwWmxnfMYw52ZCMyBZNJ6Ib3dAv7D4bFb1y19YfOh/d7+u9
wiY5j+lqYnLICzAQeyW/Vlf+SecJPWjndt7CGByc/EJdYQ/4iD7QFUbDfmHT
fGdXGAe2TvauzbqyecprU9tsgmyD8I5XpC+/HRae0vlDFju4yQM/THrjrmxA
fGbwpHQ1OhvsmZgCuhUdS6wBvAEcgjG07pzP9HD6uFiLlUeFf/DM2nQmOhvZ
9I9p8h3ee2G/bNN4JD6IH54yKp2Y3kh/hE2DZ3p/V2vYWibzkf3ObOchzANc
hT7pm73y9q6+ybfxwfPFL9fWF//gqr3CHFiPbHRsXOd25fuzd5Yka4V+Oiwf
50K9WtNjjb/y81gz1g58AJmILMRexmcEK/ndtp/YKD/flQ8H/yPzkf1+1JVv
C3/k2+GP4u+Cpd+gKwwXnyR+zc9jzVv7yii7YtsPbIhslU93ZVuEgZg9dd/o
ChuBv7IF3t0VXmOj8dJ/6EGzTpT8RadZbFBYPHvO3mNzZHuEMel6ZbPUPuz+
cl3tX/uYDZItks+S7xLG5E29wgjACvCh8qX+pSvbpv6yfT7Vla3VGBtrmCaY
CDwP7+Pz5vvmMzypKx+g8eJz5Hv8VVf+Uj5xtncYC+VhTGBN+LgXbOcjjJk1
aW3CcLCB8k/OxL5P1HqxbvAm6wW2hE/gX41/mgfzYS3y+S/VK5/9oo0/8r37
zzPnCV8+vAD/OfuqMTfW/NH6rO+nNn5pj8Bhbd76BxMDW7p847fOHzEAeD7e
j9+wSVpT1hb+zQd7cvIvTBT/hx2A0ZzWxgN2D+YB9gEGAraET55vXh/1lc2V
7RUmQuwHzI7yzjxnHwyF8nz6bM58uMu09mAr+ESuaec7LNlHG/+CkeKDwMPw
MvwNlorPh++H3EX+Eo8lnuHhUcV28mnxbYlRW2Za+ST5JifZZ/rl/xNvSWem
59J36dLi3TxXboEZheGA5XB+OcfYUe/tykYuxkJMBtv8XV3Fajw2qthDMYhi
RdlZb+uqjLLiszbMs2XGKv5EjOHUtIppE9vGpzue/NWD8vX6Jt8mpkvsBvzA
XsqOFd6QLYU9CaYABhGG5NKu9ot9w8e9xLSyybHNkZHISsuPVXwITL04WGMG
a2++YC2sGWtHTJZYUOePc4hOQjdRdmxG6ch0ZT5uvu635/9fDAqDA5NIp6Jb
iRtdaEbZgsRlGiP/8T9fiv+OlX/OmsM/8VFrkX+pH9lnn7Hy/8CPX57nm42V
/0099WHK+eSUU36W5hMii7HPwcfzn/Hhwf7zefPtfTL0+6Qf65U9XxllYSj5
uNjwFmo+NT4oOg/dh61ZPO06ME0pexwnxpI1Z+Zu87HC10xnU+rKfyAelpxP
3ucvgI9H0nwCsPN4wOJtreENZL8/9arP+q4NbfFJiAG1hq1lPm0+1YUyFwcN
ykbGViYWTOyL/WxfwzzNnTKHDwoLtW/meaJXe5Scun7q/WpQc2gu2d7EX8Fg
wdgcN6yz4fXQ/w3L/8BviYfipfDqzmpntlgs/gq+zFmaPMlHy3c7d9u/9vdO
w8LYkZf4bPhuVunKP4Sk+WjoU+yUl3S1xq117Tli+Ez5Q+hzYkTYw/lf6WN8
O2s2+Zf9mc/p48Py1/LxsaGQgchC6qi7bONHfJB8pzs2+U6eb3Knrnyr5Ee+
43268nWyabNtb9vkJ9/ziWFhovBH8hssK58wfw2fGd8ZmYxspk/6NtHODz4u
vi4YI/I3H+R6XZ05zh7956uEIYYlJjuyzfAx8DWIRflarzCiMO7OTGfnymOF
f9qYzTjPZgm9e6wwZXx7fHx8eC+Nlz2bzZftl0xg/q0D+Ly35v/PDgpTB8PF
VjxfrzCGMITwhtr3HnhCeD7ryzqD1/pa2nm0q3d6tz7oC0wmDKB9br9fFnrP
WPnP7Cf7Sjzd2vn9zKD6oC9kLLIWPQJ+zhq31tcZK3yZfWF/wAzCdLF1P9+V
zxYmDJ5Qe9qF91oVDxgUBg8mDt/Ff/3nGT6On4tpFfO9UuiVrjBuMHzw2PgL
PsNfTobxvb6bbENHpas+Oax4cfNifrSxUuuzvh86KKwc+4o4Y/HG4nX4/mD7
yFTrjZeN7Oi0dVFXtjM+XVgp561zl88W1oL8Qo5xxtIV6NTOXjIsfym/KdmW
vAhLRQcna5Ihd+nKBkC25HN/Lx41KF88nmzO5uqVP5YPmi+az5nvmW5i788V
OnRYMh/8BxwIWZCMCRtMpyd78rny3ZIp6XU2BnsX+9L647Uf1u3KJ8w3zKfK
t8rnzJfO5wxbST4np/PRiy0jb5I7YQL5tvm4YQ/J4Na99U825xM5Nvl/dOUr
2Yu/qCseJG8cjAcMFyyXPZ3iM3U0e51MRbaCeYN9E+Ml1gsmHzafTsVuxX5F
1xKzBYPPZsR2JCbgY72y8drfYgjEZohxEFvAHgv7DRPOvivm4Ye9ijnwHMYf
1v/LvYongTH/fK9sBnyL7EFiLGD+xY6JsRJrJcZJrBibCdvJHb2KhaIPu2vi
rtY/MUVil7Zs+h6dBraDDYmuQ/6G3XMnhfhGsZuLdSW/kePEHIm9EwMlFkkM
kVinzZv+JmZG7Mx7+xWbBKMGqwaTBpsGUwdbJyZMbJiYsn/2imeQFZwx1pt1
R3Y0fmIx6ITkcTIQWeg9g4qdhQGDFYOhYh+H0dxxUHue7OXMd/bzN7NPw+TC
5u47KPwrDCm/Gf8ZrCmMKmw0jDjsqv2MTx7Wzl82BbYFNia2Ju+DDYVJhU3F
o/El/AnvxpPwLfwLr3JHh9g7+AA4AX3QF5hb2Fv2RrZMMcdij8WsiJmANxlM
VoyLWBd4iPknKyZGbAzMDewNe5dYH/E/8ELqqAsjIZZIvIwzwtkAr4/n4nv4
H14M8/vZXmGE9QeG+NhexcjAFsMY46v4K6yz8xdGik3WWc6Gy5Z7cb/usiBD
khvJj2Rt+r5Yu2365RtnrxQHxwbDFsM+ydd7VbNNwATCBoqZ4o+Rd1fF9s2+
wAbJFumOiGPbeoAN/FSz34ivh4VgLxRPTKZhK4PJIOvog75s1eyl7JniSq1x
a1055WG+YL/wfLz/7/2KB4eBgXOBd4EdZ0teqUTL7i3jJR/AmvGhk2WMt7PO
GBtrPgq+CpjDr7bxvWFYY27sxc/jTcN2XpDZnB/OEbKcc8B5gNWuOV4yk/fr
B1mKbd+0L9b4L5K2r/FmPB1vJ9+Qc8RcwQSLMRK7BJPB/8K+Cqsh/m2WQdlE
2Ub5CmAFYUBgQdwB4S4I/qg/tDws6Uwb+Xhh/GD9yI/kSGNkrNLUzDVkjsi/
5GBzxzfi/gb+Cn4L3+hbyWzGVAy8WHg2ZLbkmT6ZYdmo2arJd0T9ddr489nx
F/Ab8OXxodFH+QX41tj070n9t/XK1s9GxVYFwwnLyR4FC8vXwB8AE5hXzpQX
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
                    "]], 
                   Polygon3DBox[CompressedData["
1:eJwtlFlIFWEUgM/cuSpGpUZd4c4I2g2CNsKszHoIc+2hhzYNCkqIylJTaRHL
rHCptI0oC0wq2qgXpbAFrSiMei2innoqWiyy3ILg9h3OffiYc/45+39mMsqq
VlcGRCQP4iDdF6kNiRwMi1SmiPzMEAmnifS6Iv0wOVVkKCKSlmZyEvRx7qPP
RpYgMiTAXPT1xLrG8S24CRvQB4kZ54k0kmO+gz05x+AkcieMYvOVHOXI22Eb
7IQdsBu7eAoOwhnsXmI36ptPM/HeUrM3XeQo8gByE1wl7wnel0Itcg3sgwZs
PPyFOh3ooo8J9NGC3T1yfYZv0Ix+PGQ5XYhydiRs/geI3wD1YvHH6asklkvP
xtAnETNI/Dbsl05hxtT3nbxRbM6TswMSsWlEbyd2m+aEQ+hr4SJxOqAOitCH
6HeY5whsxvc3eh2cdsy/i/PXxF+JXAolsAaK4C/1VIvNQevsxS6TeiqoK8id
zdE7nME8uaNEz+ZYxtEn5FRqHEae6lg/v/DN4lmDbzX84PxYyHZCd6UHuiEZ
PZ/zfHwLYRkUxOov4/0mqILxkM3hAvJl1+5F5zRObxtds9W+v3D2h3ouid2x
1jkQsbvsxOaca7NV30x8V1HXFqiGBeiH6eku8h3oxj8e/3nkiqP/eHBju3uW
GOncdyBge6r7mo//A+RBaOX9c3JMg9yQ9aS9vffsndr0w9PYXHRfdO/2Qz15
Hc9mc5t6r7v2HensNE8n719BJGB1NMFH4vTCw9hOZqfZfc2CKL5L0Pf4dv+6
S63Y7fVtjxYiZzl2pu/0O7xBHdfhith3ugh/J2ixNOY/+trl23em++9QS4V+
a9S9LmQ+6jvi2d1V4lfu2k7q3W7FVvB5RB8J2LwgXju9JVNDEhSzM75n34Xu
1CjmWZyFOcvBt4WzXLH/0bOIzVrnqnt2H/J8+0+pzXKoIE80bHVr/brPAVhM
X++ImY1NjthddUfsvlQvhhViO6r/EP0HnYI3xJuIXyF5nugsqW0mejRi3/9j
3vel2Fx0Ph88+48W6P8UvQe7/1DYtTU=
                    "]], 
                   Polygon3DBox[CompressedData["
1:eJwt13m8V2MeB/Bz7037fquburfctJfqFlJJpZGUJQ2iQlqQVDNCIxJTMYQM
EkWYQllCRJaZ0oYWWq5lRGgRpVWLtmne39fv/PF+nfP7PM95nuc85/zOeU7h
wJG9R2QnSbKAkmwrTJIStZNkcI0k+dbvbzjh99AqSVLLfmuKaMlNstJVk6RJ
TpLUo5BGlJItUlZewxWpQCkWylrVS5JbldcqkSS1yaJjQZLUlBfK+zj+Su5T
f1p+kjzHi/bzZJWoyA7ZduNrab8VzSjr2OrGuVIfjWKcWUmS7bi6rJBVUd5V
vV5cwsXkyZ5W1lDdJjSiAU/JSiirq04tTqYO2bL6aZ8tKCCfU/nYMYm+ylGW
KiyT1XBejRx3lTp9mSmfYfyV5bny7rIL6MzP8p/oaL8bFzFD/Wdlt2rrMl30
4XJ6M0rWU53f2Mf76i6gfVwH7ffR/gb7P7JT/TLaaSw/xTzl5yXJFvlmmpj/
uvLa8iPm9T7ZBLLkDeW9tFPs91ds0k4j7bSRj5Cf7PrVZLKyqupnyStr5wPt
PGwsDzFL/aKYB3kL/ZZSvwwd1D9NPkg7hxx/hMOcIW8q7yffHtebX2Le5fc6
5wnGcB8TuSfI6mv393QuetDUsYX6m6hsmjrP8CKzmCBrof1h6tQwjjyejXtI
+5VkRfZbcxIlKC97w/lsdNz33OWc7mSuLNu5DbG9nq3a3kyO7Hf30f84zFGO
c4BLlf9hu5+DnKSdP8naOn6Qtgeiu8TpJGfI2nOD7HpOkTWgnWyL4zbzA9/x
X37iffX2aHdfVqafnuqPjPvZuR113DEec06PxvnJlijLdVzV9L4tw9K4r5zD
Msevp5jF9JBd6viR2hzKJB6hl6wHf3fceO6VjecC2YWRp9fqfhrTU3ZJ3B/2
H2I4f+FiWS99zNXX63zBQrrH/aaskjrlKBv3cvzHZcv5zJg/YTl74nxc9z9s
1/r9FZ/zAbtkm7W1yzE76WAOurBF9q7fU9R5Mv5vbFK3knaauBDXuSDXsF/d
AzSUPa//GTzLdB7gQV5jLq8zh1v4K1Ud0zzuy3hWsJgqstrcaX8sS1kezxxZ
IeuNYx07ZbviGStr5poV2NbhS9nXNJcNVG8A/bma67iW7c4tV51y1HcODdgp
m8405ZdFf7La/CrbYb5/5We2sZpVbFT3Z7ZygP18z03czViGMJihjOY2hjGc
27mVglM9t429Dd/reyPnGP9E87897fsX5pv/kub/KmP60e/NjGQE/WR9+Nb+
FrbyNVfIXtLOn/VzBZfTiRdks9mgzW+5Ks6bl2WvMcb+HdzMKF6VzaGv/X50
oSuvyL5kX9xLcV14k2LZTM61343unBX3kWylMdVwjtU4Ef9V2SZz0EJ+Ufw/
6cUd8kXyxfI/1DvEEb6J5468f37m3IeziQnyxfLZ8rfivxvPKbbJf5JPsW0s
b0B9GvGE7CGq26/GNe7LgfE/jmMoHe+4eO5Tkh9kt9AsfTc2xyVJzpFNppY2
asa7mRo8IivjurZ17FksiHdSrAdkM5S1VqcN7WjKVNl6jrgmR+O5Jdsb93w8
T9K57ExPmtOMi+kdz0zOoxcXMMnYHqS9/VPjuWqcT9s+H//z7EzZA/Esi3WJ
k1hre7a8Y7yj5I+yTvYJhbJ65FCST2UDksyc5VMn7mPGycZZFD2ufAp1tZEf
96k+P2W/7ACr1P0inlGyJXHd7H/MIpawWLaWX+3viP8s21gtm8/U9Ln0BE/x
jmxVrM/S5/43bGBl3EO8bX9+1GMe/5Gdns59EWfQkhYsVbY0Hc8yFsa+bKxz
u4uneIypTInntfM5bruPA/Eu42HZ77ZHOMwxjrKbk137Ze6BT1kf665YV5n/
cfbXsSbe95zO3axmFSviOcvZ8SzSzmdpG0u4ndv4JP5X2l+ZHvN5rJm0X6D9
PPnatI8xcT/K68i72b7p99vM4z3Oj/Wq7Xze4Q1q6jePCtp5Ny1byIXq5msn
t55+7F8uuyLWX+asuL71qrlo47h6caxxl465k7VX9w71RnELo2krq6Y8lw7q
t437l3bxrlVW2rYs5SkXzwrZb/mZNXCFeB/E+stYtvm/V0jrfST/kEr2K8Y4
tG1Jn3S23yn+v9TikPFep95g7qFDrMm11cr2Rr+HM4yhFMnaF2TWbPlUZ7y8
sqxVrH+0N4h/Oc+ZjNJh04LM2nJrrBnjPRVrF3XzjLWvvgeyTlbMcf2WVjZM
dhM7ZL9RSrZXW3O1uUb7b2Rl1gaXxPpK/p58t9+7WEA3+S/yybGG8juX9+Je
1H6R61jJuKcbyzRujHeh/BzbmX7P5iVm0UmWXZBZA9/PJB4gR3Z9OmfXcgND
GMRpjulnew1X058Wstb6PW7/GLn6HyprqN9qJTLZUQ7yUTxXjfeZnMwYKyov
zwv2n6exdvba7qHYf/RwrHm10197a/z+OjtTtpsBsfbV1ikxJ3TlXM6jlfkt
lflUSfxMBmjnmGdYTpqZwqQudSiItYvyHrHGi/UcZ8WaJtajtoO5mmsZwiCG
pWvDG7g5vhG5kVqu+wJ9/0Nf2x2/gzk66yprp7wLnRghP6FOF3mr9FvzzGhL
/j/50455U9lb0ZYBj49nouxQ+jzaxR4Osj/JnFB8w25gI9/FecvGxDrAfl80
lVRntOxj2/eZx2IWsTDmKZ7ptstZFus9dXPM/6o0+4zVrGRFzIv676RtfRhr
X/Wz1Z8W3x4mviUeF8lpsX6UdU/noAMdaUJlTlIvhyxKUiK+a3nFMTPifuEJ
HufV+DayvTvWE9zJZB5hr/H0zsl8+14azzf3SE3jmarsSf7JhbEGj+d9rKfU
352ucw5yQtvV1H/N9gPlbzOLmbFWl72Y/p7Hv2MsMUbWKDvT8X3SNdmV8c6K
92U67ukU0TnmyHa2sttsR6fnMZY50X5+5ltyUrwb43veWIrdU+fHei/JfBP3
5/b4Dle2z3ZuvBOzM98GK2JtIfub9iYyjnsZz5h4Nmr/ZdvneCHGEWOKtWd8
zzh2RLpGvIcfon8P1jz97NH/+TmZb/ZN6v8fSNE08Q==
                    "]]}]}, {
                 EdgeForm[], 
                 GrayLevel[1], 
                 GraphicsGroup3DBox[{
                   Polygon3DBox[CompressedData["
1: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
                    
                    "]], 
                   Polygon3DBox[CompressedData["
1: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
k7/yv23Bv7MP7Xs61734l3aHTlM+TfiJ8GcrV3K96zpSWZtrOOh2ynAw1z2g
O0pf2wEaV/rcMa6xlRmW9fRttiH8bv439ZD87v5z8Du7Di/3Pj+nkva1DY+D
f5TyzE1551cW43rTfVVXynCgezTady/C1qTei1D/V0jz2dLXX1dWxvv9vD8H
cfYbzv/iv/4M9HKpi+ntWep0CLRF+f72g1dHZiy4lja5SFk3dDX8FdAF8GdV
0j6202mu1UhzH/gD/A/g1ypzjXPODNCuvFPh3X2gM+C3K+23U+njVyvT60ob
XmffhDaHP520H1AfQn2X5X556Jryb1reTcs/Ojft8A5lfpYyn8r3v6Ge/Y37
nPt5/3ruN+T+JOdO7pv7Ir95i7IcyLunuOclfBXoRPdDtN+Dzs+ErzWU8mxZ
+sKt9cgMrysyYOVT43hnKcIWh46Fn4f/9FjqOg76XzVltuyL+P8rG6znOx5c
+taaXNcu46P/8Cy8c2h7ZI5nMD+syLOVuqKvUm+1Qlf0QeqFloCuJI0lSt+5
Zyh5LQ0tWvJU56LuxTX0k/DTUv/WbtoBmg5+5uHootS9bEV/Ooz2fpX834Le
oC2mo40uoX27eX+j3sg551cnVWSkW/ZmrTZU/r9tnZfhh6Ft4Dfpzdp7JLQx
/Fek+RNpfwq9D3/EmNTD+kxgW1OOvwj7Uzl1NXmadwXaFH6hkr/lUO66Vtl7
uAeZF2qxTbmuDrXC/0YeNfiZoL9c+/JdJ4bvgZ6D3979GGlPB20Hvzd5Tk/Y
DMqz4N/knXcoywvKzOHfgz6DfwV63f1WPfma//jw+/LOrPCzQzfy/XZ1fUTa
CzP/ztMbvZprB9vEtvmONEYQt0uZVy1lGwlVShk3J04/cZuhDeAn53v183wX
9QqN6DzVfe5P+CGE78bzSQkfBe1QzTPDdocOgH+RPI6j7LNAl8DPwvuP8X5P
+T7qAA9x7G+JbnCc8mLKPjtpLUB+9xTZvTL8GaFJyGcAmghqL21sW08H/VmL
Xsm9kPo4dcNP9OQd4z6gTLo363z7kH3pa96ZgLB7Hb+G0ofsS03Q1vBbU44m
wv8h723gvyT++NxvC79sI2W27JtBu8H/SPh/O9LGtvUePNuSsFWgHeEvHMj3
8Tt1N1JGy7qPc6Cyt+F8C/vCao38E/4bf0Cfw89A+91N+y1D/B160z8+Ieyj
0r83471f4X+BNof/lGc/w38DfQK/ifIn+O+gTat5ZtitzlfU/13un+f+au73
5v5D7r/k/gvzqKVP2jc34N2lKd/GXF+3bNBG8O8Q/lJ70jCtw/nfvmpPGqbl
vs39mzpndc+PKDN1rwpfI7237fPEfdsxwbU9ab4I/7LrY/gbe7N3XAi6oTf/
hP/GdZR3z6HINJRtuIdzL/cR981lr+N+8ZkiK1Vmej50JfR0e557v2419z5f
thqZ6UVlfzw4nDJZthud18nvFPsD92sTd0nnR+4f4P5+6FXlD9Ws7Z8scdSt
PAr/WHt0LE+0Z+47o+yh3Us/3p7n3q9RzVzonLimYwXf/za+f6P0z8/I43fC
tiBsGfJfvZr3TefY3pTBsqzC88UJP5JnhxG2tjKG3qybXD+pM1B3cDHxpy95
LdFIOdUNqSOyvHNUY9swU0nTdafrz62VCfZGj6E+Q52NupufByKvvqLIr1+q
Za5yTHBsuM8+Av+Q3xh+QerX1RMZ/Wq9acv7oCNLmyrTVh6ujkf59I0Dqc+R
RV7hHONc8yNz0fTw59H/BrjvgL5hvLyZeWtK+GmgWyrR2ai7Ueen7u8xdYrQ
XdCjRc+pvvPFotPZw/0O1+fcoxddza3Q/UVnoz7O9e/d0M5FH/QA/KZFvnlz
ie97t0ErV9Mf7BenM34fol6vI/FuK3onZcePlfIow7qc61WdkW09yfsHqyuC
noJ/DDoAfj/fhX/CMbkzcYy7JuU5qMTdhvZarR4dvLr31dX9Wm7X78qjodeq
kTkoa3i9GpnGHiVMWYcyjG3ghzoj29ihnra7A9qxnjawLZ43j3r0vY+XuuxT
j3xTXcinlhH+fK7XQ9dBF0F/0ydmLnPnoUOp+6XQZaUNHqTNFuc6Y5EfvEC8
OYg/C/Q8/B3V7Lnda78D/wbU1xq5zQO8uxV5Ts/7UyrvV9ZajUxEWcjb1cSp
FtnO/aNj86Htx8Lkt1N/ymX5ZuzIXL8vabzWGZui/Upb2J+eKm1i+Otc3yj1
nZMx5RP4D8lrd77Hx9T3a/rDdtwvx/1dpPlxe9YEjjnqs5Ttvg0dUE+b2rZP
lr5pmz5a+q/fwjJZtmmgp5UlFtmOMp7ToFVdD3dmz+feb+V6vr02C9ouPEI5
1oafHboJ/mbSuIf1/rXQTfDP8mwsYUsr16I9NnR/Br8L/I+U/xTCDu1Mn9sX
mo36nu0/xXs7OP/Vkt7NZb5ZQ5kP//6G/v8DsU04HPqiMzYK66uztT/x/na8
f6PzG+//Bl0Jf6TyZPhbynw2qp5/yn/pEPd+0GjGhip0pns/5TWEHwadwf2Z
3B/bEZsxbceuVC/Jv7kk7X+Ia3iefdwZXab6TdPrI60B91b12FNMCL93JfpE
13Nv8u4NZb4wT/Peo+gjzdO81UGqi7SMt5XxQV2wcnjl8ctBr8A/R71PIuw4
6B764r3QOX67Iv+5hjgPUP972zKHz0bYzNCs0BxlTHBsOBp6Bn7fnqzNjocu
hT+WNv+Ftj8L/oDh9AXHg51Kn7jWPWxb8jAvx2zH7qu0ZxiKzG+7ztjnKQu0
jJbVPmJfUaZ4SukLyhqViZ8Lf0ZnZKB3aINA2s9Dt8NvWsYEx4LN6mlH29M1
x/U9+c5+79uh23yXPE4n7sX+g9WQ/Jmlz70KjWnNmObYZt4XdKZPWoYXeXYW
1wuhl6sh+T7oPv9/8vi7Pf+k/+bL0FJ8m8mgl5Q31zM2OVbuSv+cijYcJOwG
3l2F+5ndAzH3zAnN3pe5aHJoijIn/aQ+h+tshB1N/N+VMSlz5Nv+xv0sPJ/K
cGjWvqwzF4FfuDtr+hu063B/QfkOpjxHQAvCLwQd7rdzzCbuXNA9ymKrCTfe
Kv1JZwnLVPYI81D+uS0veR1D/nNw/Yv++6f7Qviv3cN77xoZ+gj+G+hd6C1o
iDgfd+X5MPznXL+CxqONJoH6oS+78tz717i+AX0KveceX3ks5TuZ8u1A/9q4
nm/5PmEf1DPe2Jc/U1YDPw9lnbc78gHlBNepb7F/u/fi/bkpwwSEN0HzwP/J
OwvBLwj9BT8Fz0bBT+z36Mu/Mtyd9M1n7Xrm2gbPvqxnXp20O/c+/6EeXcBo
1yDwt6ozIf+jyH9H8p+RNH8ird+hR0dnTeLapA36qp5nhv0GzUDcQZ6PgT7h
/sOu9Af7jmW27BeW9usvfXQq3ql1Z80zNfz39fQt10JjG/n2C3Tnm85V2sC2
+Kcr39g+Zd+ao/TBmaBZutNnZy5tU4d6Sht9Xo/uQN3GZ/X8ax905fv4nQ6l
3otQ/0Vdw/WkHW1P62V9tJPU/s81iPPqd/A/QN9D30KvQG9CU9O3foe+oT07
y15uf9pz0tIH7Xt3jE4f+Ky01bv19LmPSl+cDL4Bvd2Vd3x3uSK/UI6h3OcP
6JeulMP871NHSdod0IM96fd/Qy2uGTqy1myBfu3KmnMy/pcqz3dSj9qIvFJ5
zbgiL1Fmp3xWOa2yvOPKeuf8Mka67tE245gy5t1GOtNxXYO4e/dnPzuFtkva
HPVEZ3AD4eM6o0uQv7Ezc6TP3q1mzj+tzJlPQ0d25plhG9QT5npgHfh/1CdQ
trGktT/5XVnJP+m/eFUlfWV8aLzSZ+y7nVB76cNv1aMXUK6vbmB3yjiab3+M
ey74D+tpJ9vro3rGjVfLd/b7vl3Pt3L8eKfIEtUfvNwVmaJrnfu4vtCVNY8y
SGWRyt/fqOf5S11Znxv+e/mef5R/6uN6xhb7wpF8n5/pTw3yfcy5ne/zST39
2v79qXM1135oku7805MUfV+13E85nL65B+22ciP90v7pN/Jb1Ur7dJR/cvt6
1tLq776op90mgiYs7dcFjYB6oQq0XT1rUf8x/7VrK4lj2HWVrCFdS2oj4Fp6
Jsb+maEZoRmgRbQX0r6hOTZalzM/1Hm+gDrukbFb1H5xavX3IyOfmh7+U21H
+J+u11aU+7mg6+DPYn2wIPwt6mOV/2kTQ9yD1Elrn8L9P+qLud+attmePjRz
JTapd9FGL1Dul6AXoeehHdQpEn4W/WMJwu9XJ9UZnaO6x+NIr5f87iK9bUjv
fO5X5P4e7ucfioxLWdds0Ly9kTnbT2p838P5HhcQf4WW6LTVbV8MbUfcI3h/
2+HYLGi7cCn32w1nT+zeeC1ol97YO68Lf59tMxydvLr5R7SnGIrOS73VAPkd
QX5rEr4G6R9C+ObO/YO0hX2JOr5K/OlcU9I31iP+acTvJ/wCwj8g/JWh6DTU
bUxE+EHqLwi7GroeutG+SPglvH+W8wLvLkAebyqTJP6pxN+Z9WujOTZ52ubN
y/Plibsc9L++2Oxou6Mfw3iN2DPVud+T8s6iPoR490MPQQ92Rweh3L6ddw9s
RCatbLqD+wMa0YGpl5iQ+0O5r1GmW3jvVueJwdzf3h0Zm7K2McR/oiMyNGVp
nYRvSfjW9n34R7g+Bj0KPQzdV8pjue6FnoWegp6DnoGGeOdxrk9Dw/AL0h7n
wG9IeU5vxN7QvqHNu7bv2kvNCr+P/Zr67kb4DM2xadC2YVbSqI/ge0KzDcae
2rXvCqX/HulajbDjuB4B7dOXNYdrjV3h9+2LDkWZ+36u9Uijn/iTQLPAd3Kd
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
pC1vS3yRtLf7Af4H+CWHYqOoreIl2qU0ouNT11frjO2wOr0l1SV0Rtdnvit3
RwZn/tq0atuqT8osw2nv8/1ehE9Vj8+vvtf6iOsL/PzI2MNfCL00MjpRdaPa
/K6lbox3d4f2gHYt/7z//p62AfxSfNdju2IjtTT8M5W8Y9xn4Zfh2Y7d2fcs
q22U4yFxz9UWfCjP9i17IfuQNtfqXDcs8pD5eLZUd9p9/r7ocdWtqWNTv6uN
uLbi71L2nRwv6pF7Kf8afzA6kLOLzkPdiD7n1t92WHgo8m31x+qR1Q/bJraN
9rfa4erzqO/j2/A7DsfHVl/bD7hfdCgYAGIBfMr9YkPBKBCr4E3uFx+KjlVd
qzbgW9RjE61t9PV83zHF3nQOvvc/xF9hKPYbTdz/yP3yjhfU+2v/BehT94e0
wVdcf6CNTqStvq0kjmHfwTeo81vwmxHvjEZ0pupO1bmqe92E5691Zwx/ij56
QH98ofSJ+ps22JTwdxwLShobQ2905x3fFVNCbInjibtfI3Zt2reJuaB9dRNz
4HjQx8T/pzv+5erHtod+qSadjhHpQ5ZBucBI9+tlj9cNvdudOrzq2orx7geu
H0CTOn4T/ib8AWVM9/lf0G/Qe9AMg8nX/CcfzF6veUTmAOepD6GPuiM/UY6i
z7u6O8toWc3jg5LWZPBbUOcv4H+CtlIWMBg5jPKYeQZD8spu5i2ygNYRkTso
EzBM+c0jJc5/RmXN4FqhA/7wvrSZZT5EmRo0LffTQUfCd4+KfEQ5yYTwz/HN
viPuj3yz0/rjEz9XZ2Qiyka+rETmqKzxV3WTpPFJqfc2fZFX/Om3IexNxyOu
f3D/u+3ov9sXmZN13BH+x9K+tonfQcwQ/bwc0x3bbxyKHlB94BTD8cHfsehP
lSV1Qo8y3zzpOraaMnxY2n5b8xqdPEx7y75gRIgLID7AHKTXNiryI2UA443K
d/R72g/8/vpk6ZvVqX3xcGwL1+L52t2xMXRN4NpgK+hh+2c9zw1vGYx/kbJP
faj0pdqX/nZaa3yw9MWaBjpd+TXpr0FdJ+P+BGXi3K/G/eS1+N/qhzsV/8MQ
ZbhL26LRse96jLzWJK917HPFbtF7n8/WEZ2Nuhv1Xe/VY1uofnW7YmPoGsO1
xg9lv6sPpb66+uzqW6n+QP1Oo8j31akpV1e+/jV882D2Fq5txjUyJv5RdD1N
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
yoSUDenP/qVtC83sHqCaedn5ec5q+vPZxD0DmhJ+Cugs+JPL/ROuMeHXag1m
lXIt5Vv2M/uXGKGPlLJMQf4LVLN2tU1tW9teXdZM5Rvon/89ef8IzV1NGSxL
rSX6dNvUtp28JfY0y9MftqI/fNQWfbX6O/0t5ij+F/qB6A+iT4W+Feok1U2e
656ynj3FP7x/XUf2GmJ6apugjYJYn/a1Obifuz1YL/Nynaf0L/uZPlT6UolR
KlapfqXaeuhTrG+xPlDaJmijcGXZa2hvPFPZc9hHtR3S5t++O0dJf96S50Wk
2dUeGzJ9Ta+oJcy8r4Jfgesqxb5JO6eVy73Pl26PT4vyO22I9HVxznLu0sdD
X4+foNHUfedq/NWvKWma1rXw61mP9siQ1Vuvo11V+d/871wjibUn5p5rp+vL
O8YdC794e3zBpih7PMu8cKnrfI3IDJQdHAb92Rs5z1jouCLjOgI6VFkLdKQy
g+Hwxp2lkTXD9mWvu53yhlrScg/r3lp5xI+tWUO4lnDP6953fPKfrRH5zSNl
r+3+V8zWI0peYrkqA9mnyFY2h//L+Rn+GOjiog/Xdkybb20DlK2Jz/VaW/Yh
7m0Xa087WP/dy976hFLnCevBDT/GsbSRNbrYeWLouXY/prSH7aIcTJ97fe+v
Ie/lG2mn44s8x/ZSXmt+5qvtmLZpK5e+oG/JhbXgAogPcF4ttkid8B3twWK/
3DooK2K+vQF+mvb4Rukj9Sfpn807g9zXoXPgm7n2Fnu78cszw5ThnlsLbrz4
8abj+/bl7vbYINqnryePHtdr6uCdL2rpV47r/2sEg1h7R20gdypl9f2uUubt
+iM3Vn6svdsy6gxI62b4LXl/VCmf5fyH/Bcg/PSO+Jjpa7ZoPX5U+ldNz/01
vDcx/O2EXwt/pjLH9tj8nKWso9TZuurLrgxPWd7y/ufqnklvQv1S1GuS/1z1
+Gno86Dvg3PbqFIWsX3/nbPagyFlnScl/svKeqBpiH8seXzfFpuTo+DH1dKO
fo/TGFuP4f6TtmBui70tBqFYiGIiik34I89/b8sY5Zwm5oRYEGJCiEVxGu/8
pz194sIy94lf/mOJ7z/sv6zdyrzU51P4z9siX1Gmog2ctnDOzTM2UkbL6r8w
dyP6MvE2xN0Qn2G4Hj3Wmdyv20jd3mmLTYnvnVD6jHW0rspuxOMyX/NTn6Xt
5lelTEfXYq+j3c48pHcI/8cz1H9a5QW14EKIDyFmh9gh2vQ4V3xS3vE/1bdD
eYH/693KyNqzxrkH/p6u+M/oR6Nftn6K+ivqU60/pLiZYiOK5yqWqj5W+rSI
n/FtLW2mHc+3pS2n4vuMG5k97IruXxvBibfdXXss1MgaQgyku7hfrBGbMzGg
T6rF5uFo0lio2ELos+u+2v21smltcp2DxLDQVleM03+xTnuDNyx+xbftseE1
/HeeLd4XnwJ9C/Qp1g9WGamyUvF/3es/1Bx8Adec7in+xZyoZZ/9SJEHGHfh
RmxulSk9XouPnL5z+tDpOzf5YHTr6p5eG4rNwdNFp64tgj6x+saKYyA2hJjH
+qnok6BvgvXVh9U6WBcxi8UuvofwVV0D9QV78A/lsf2pj77S77cHX+PTRtbI
jmGOZb7ju/dCq/RG3/2rdgWjoh/XZlSbw0vbY0t6pmNKX3SE6goP64vvxc/k
d2p/MMrFKvesjI8b6RP2jSOgZXpTBsuiTaS2kerz9Q/8LzTRqPiw68t+D2ns
OxS5k/InMZ7FetYnUt9I5+Hbavmuft/5XC/2xudT309x5G+qZQx1XHF8ucD/
23+yL5hOYjt90YgN5R6E30n4fIOxHZiw+D+IPyv268qux+AXbGSNqI/aGa6P
G9kTqMO7txYMGtfIYlSIVSFOrNiwpmFa2oBqc/5Sqb82aNqRaMuhbZoyN/dC
4hEqixMjRJtu8UBeq0X+I7b2MeX/EcNFrCIxf8R2EbNDG1jxNi6rBZNDG3zx
QJ6uBY/ktfbsoey/5mFet0Ar9cbnXNwA8QP0RdeHWL9jdan6krpmce3ieu3q
WmSIYi+Kt6tsUZK/Glq3NzaX+gloO6KtozIr8Zetg3XxG/utxXQS2+lb4h/k
WkyZYD3/hP/GJ8VmQwx+sfjFQv+IuL9Xgrc5EvqtEoxNsRK13XiDtD9o5BwJ
dWbqzvRhF4tSLGt92/UxFxNbLGx9zz9s5FwUbaC1hX6/kXNU1Mmpm1tHm0nK
8pnya/2fKeN/OzOHz0jZFuJ+ZGfm0Bm4/0K9cndsoPXp+oU0hjoiYxEr6dVG
/OaUOSp7nIP3f+nIGmRu+NmgHzqyJ55uOPYp4kFq36qdq/+5/7ttYFvYJraN
Nrza8voP+i/+XeaWtyqxbdCHsGtUbEK0VdJmSVuRVxrxU1GmqWzzvUb08Orj
xc79pBEbcudM507tzcT63J36PlpNmqY90vF0VDABxAYQa+zrRvFPrUT3fGs1
OnF148s7v1Sjg1UXuzr393LfQhojig+U5dMHpq/4Fh0+HJ9LfS+1BXqb771V
LWvXw8ta+YGBnIMhJppnX5w6OraLYsddOTpnVHhWxYXl2/9UiT/Zk9AvlfiI
OT47Tr9O+scTZ5G+rE/Feraf2d/8Jn6bdyuxrdLG6utKSP516KtK/CX0nV/J
NWE1NovaLv5C+fYaE0w8sfE8y+PLRnD0xNNz/acvjBiBYgU6Zzp3+r+KceA/
7b/tOOx4bB2si/ICfTanVD/EOy/zztjRkcuJdW0/tj/bR+2r2txpe+cZAZ4V
oE2QtkH2AfuCNhzacvhP+G9ok6Fthv+Y/9qhw7Gt1W5xItrus0bW4a7H1XV9
Qh7XdgdT6oue2ARqGyiWzTuN+AsYbjz9Hz92XumOTa0+j9ooaqso9ty7jdgM
ajvoOQeevXTIcGy9xZHTfmc1baK031LP2R+bI22PxhXZgc8NNw/zctx3/NeG
TNsx+1lf8XfTt81+Zn+rF1s0MYGmLTZAYgWJUSzWrJixYseKGSt27OqtwTo2
jnHFZLipEoxYsWLFkBVLVoyC94vv9KNDweAUV/IRsX4a8QHWF1hf3sccqyvx
vdDn+IZKdCbqTsQwEctkrO3TkzMnPHvCPZZ7Le0VJyr+weIDi3GxUSVpmFYf
dH0lGMzOSeqDxHY2X/P3Hd8VQ1cs3Y1aY/9lfcVyXqHUX52JupMX9QkYik5G
HYnnjnh2jD4P+j6oc1b3rAxeWfx66rjr0Xmo+/iKZ0cPxWZBnDnx5rRlMH+x
u8UMF9tXHaC6QOts3fVHF19Ae3nt5nsq2euIKXFNJZjaym7WaQ3WtpjjynF8
ZpgY4uIG+039tq7ZXburw1SXaZksm5hlYpeJ+yr+693QZZXYUGlLJZateLDK
gJQFKZ/ybC7XE8p5lPdoHyJmqJhY2jRr2yxGqTjW4lmLXSommZho2rhq6+r6
QznjfmW9LoajuIoP0wb7E3YC+c7D/ZzQ8ZWsB/Qrm7nIU26sxzdUrEzxLF1v
6xcySdnv6eOuDYVzlnOXmKdin4rtK96sNtbaWv9C+ZYayvpDPw/9PcQSE1NV
bGxt9rXdd/2jL4z4b2LDKUNTlqbMWFmbZ56JJSnW5b36aw5HhqXsSvs+10P6
/U1Q9p/auPv/+R8+PhQcXPFwL4HOr0QmqGxQ2dpQyU9Z3pmtkeVps2v72E7a
8rq+0c5r/iJfUmao7FCZqbJTMUAXKlgM4nW63lNuqPxQ/abrTeWsylvdy4vr
Kb7nRtDJleB5ipe5MnRqJfW0vj4zTL9b/W8nK+ONOiX1bOrb1DW5/1D2Lb6g
/tA/c/9RNWfUeFaNNkjq4dXHa5u0oesX9yvcz1SPjYV2HuOKfGh9wk8m/CLC
J6nHxkS7Cu0rtD1RR68dx4ulvytTUCcx2BlZg5i/2hSKYb5iPf4PJ/E93q/E
P10ZgDKOzs7IBrSR0w7pwGI/YTzjq8NWl62PqTbRnkmm76n+tOs1R7es/vmH
RnxWxJdaoh4dgjZK2iapW1BHpQ7hjo7orjwjxrNi9iKNJXpzjoznyczI/VLc
f0/8A5UZacNSzxrFtYqYc2LP6b+7PHFXgOYs+1txPcT3EFvkO+IfVc2ZS569
ZJqmLYaCWAraxGg3o/2MtjLqhJSx3NwRXZE2UtpKTeQ85FjSiIz4NPJ/vhab
KW2n/kv4aUNZE7g20G/w/lp0bMqsxnVE96ZNgnYC2gtoqyCmlmtesWjEvhFD
WCzhk0j/IfcThJ+k3In4U9SDOST20KPEOXgoGBViVTypnnYo44F2VdpXiYXh
P+y//GbZL4jbfFPB4BDL+wDiP9QTXw+xLpXZKbsTY1WsVXW66oXVD6vrVf7z
QkdsiOy/lsmyXeh6uZ5x1PH0xpK++319ccWn1L/Q/0Vd7CLEP5rxch3CTyf8
ce6H6vHX0Z9FjIN3KsFcEXvFMlpW91NiY/5dyqfMRhmKNs/KcpyX/8US6src
MqU2r4S9VsqnzkybBm0Z1KWJGy1+tBjcYqOLmSx2sn53j9Uic1bn2tcRWbSY
deLQiUcnlp1naIjjJZ6XZ2uIXym25Sdlv+d8qR5bfba6bMdlx+czS37asGjL
Ip7w4UOZ85z7vnD/WwnGkVhHyqyVXYtrLL7xNtAZlfjp9RaMAddDrrlce4n/
+1KZr8S69vwo/Zc7BuObp0xF2coFY+KXqQ1182DmL7E1PU9Af12/md/ONZ9r
P8c0x7ZHS3/QB/Si7pxZom+omMiOo46nYiV/Vw8OljbQYhc5X4pR6RkDnjVw
zphg0XxasFzOHxO/J3XKYmeJke484XwhdroY5M7bzt9ik7v3vYv7OyvBMxIz
yDWE7Sge0K/14CIp4xH7yvnK+L7n3llcf/H99THQ16BOfW7rDsZFbTBrXPeF
15X6b1QPrpg+N2LfzU4ab/bGplfbXjHFPHPEs0bEGtMHS8x7se71zZqV+G/0
xidZ32QxCD2DwLMHxCYUU0Ps4ltK/tr3aLuzS3Ow9PSR129e/3ntMfXJ/577
pdriqy/GoWcyeBaD2IfKPL8jfNa2yELVKWgXeWqxrxOT6jb3epVgVWkDpW2U
mCfaRomxL2a1NnXa1ikTc5/kfklZmZj7YuB75qVY/GK4iOUiRotYLZ4p6dmS
szQHr0NMezFGtTHS1kibL22/tN/VNlgMGrFotJvTFk8fov3VzTXHt0iMCLEi
tAvSdkkfJ/269O/S90nMUO0+Ni367ReH4ven/98l9K2Xh+K3pf/WRWOCgS8W
vudpeJ6FGFs3lnW22FuuN2/uzZkUrl/dD9zO/ZZFP6rNiLYjKxV7Fm2mtJ0S
k+bicq+t3XYtqe9/G8EFFh/Y82Btb23Ppm2ObZoYMHd1x4bN+cH1/U3a0LRG
/66Nj7Y+nvekvZtnZmpHpz2d51e5HhZTd+HW+HfoI6WfkzKEKQZTRssq5s75
5ft4dqiYOGLjeGardtraa3t2jWd6isHsmbCeDeuZJuL6+Q/4L4h5I/aN/4z/
jhgtYrWIkSNWjvrMczqyhnDtoaxJGYdyCLEq9Nl8k/vnK/Hl1Ifv3Y74UPYN
pr77kP+2zbF10l7hi46cGafvpj6W53XHB9D4tsd+xN++Jf6ZYuKIjbO/5/s6
1w/GF1KfTn07XbMowxQTZJXSv5X96n9w6Zi0sW0tJpK2hmJwHON6syXYHJ5R
ptxU+alnl71eZMb6q005mP22MgdliMoS7S9iRa/eHNsjfdy+J/yb7vi+Ge/d
IpfQH80zr1Yg/pXNOd/I/0WccfHGtZ30jCvXPa5/PN9KHyNlDMoW9D1yv217
2+7K+jwjTTmi8kTPY9EHShmVsil9o/ze4nyL93156Q/ipouf7nkl+gTqG+g5
jE+X/02s3nVagsekDF+Z7+TNwSuyDW1L/d0ag7FZ109AfwHtm/UxH0lfqI6I
77k+W/rF6B+jL5c+tfrW+o391kfVc/ala2rX1trsPE1+X7TElkeffnEBxAfQ
/0Obqxe4f6k1tlju7x7m/tGi+xeT4QPu+9rijz8l9/dxf15LzgvW50lcavGp
tS85a0yw/pVRK6t2/3GPss6W2DKIsSaOv3j+Yq+JmfE54Yu0BUtDvFnPVPMs
Nc8TFuNJrCcxo8SOck2uHOXk8r+IUfKeOoxi/+O5b57/pk+fvn3KUJVx6Q93
2ZjMV8pm7iz/n2OCY4OYUGJDqW8RO0zMJLGTzM81/oUlf32IlDnqj6ZvkePl
c4Tv1R28GjF+PAfG82C0X/L/ce3vHOVc5RkunuWyf3Pwl5T5KZPRH3COwcjs
leHo7zfrYHRF+jXp36TOSJ/u1/z/KvH19v9Vb6D+QKyrf2rBtVdnJra6GEFi
BWm3qS+HGF5ieXmGlmdpKaNxTegaw7WGZzqIhacPl75cyqLEH/BMA2VS+tzr
G6+PvL74LwxlH+h+cNRg7D3ETlC/oJ5h5GD805cv/uH6obmWEvNC33t90PRF
E/9wvMFgAOhXpoxSWaVjsmPzeMV/y/N29Qeer/izHdUfW2zlGQv2RUbhGlsc
Pc/m0E9Wf1l9yvQt89/Rl1OfTu9tW/3Q9EfTl8w9u3ta+7B9Wb8x/ce6Srhn
0nk2XX9XzoYV80zsM3Vc6rrEPPSsCM8bEQtRTCaxmZSRKysXk0lsJmWYyjL1
eXasFQNKX2jPtPNsu1m6cp64Pm/6vqmzUnflGZ36/4nZK3avmLyeEfpBZ7B6
9cHWV1ufbX2zxTzQT1KZrvJM9/zu/fWp07fOM/fUN4sJLDaw/dOzzg4o9ojK
VJSteEaHZ3UoM3GN7rk8nt2jH6n+pPqQ6kuqzEvZl3tK95au75RXK7f2/OWp
B9P+fgfHMmWaHzlfdkfW+Voj56Jph6Gvk+tnsVTEfBP7zblH/aM+xvrCuUdy
r+Qe2L2wZ4iKcyWmk9hOrzdyDpR6aH0JfMd3W6DWUfHx1ddX39fDSH/T/tgh
a498nPYXpLFMR3Q66namIfzMkbFBVz/0ZiM4XfpFeRadZ9SJo6dP6S1l/rIP
2t/0JXat4Vivj7O+1p4R5FlH+iDqi6hO5nPub+6Orsb1jth3YryJ9eb/oD/2
xsW/W1m1eBD62Cuz1qdWrEExB/W1tV7W77fyfZRRK6sWf92zj/0mfhvPcPYs
Z3Xw4kyIN6FuXhsAcSneLPYL2thoa6N/i74n+kTrm/51qd9PjayrXV9fPhRM
aH0ixLUWK1oMtd9LfxFbbe6ig1X3+u5Q5D/64HxW5D1ifIn15RmVnlWp/FTf
L/3XPPtaDDKxyLQ51/ZcGYOyhr95/9gxmf/VYWozp+2c8ht93NR5qftSZqHs
4kxtqutZn6g3UX+i7kTMas+w/G9Xwc8eii+TOjJ1ZY7f6onUF6nL0WZdnbpn
mnm22VzD0Wmry35nKPORej71fer6lE85fonFMm098hZ9kdShqUvzjGvPlhJj
X6x9/a13ruRMF8920edT308x5sWaF3NfHw1x/MXid32kjYNnjHrWqOsbdZ7a
7Gu7rzxNnyF1dOrqPBNVPIDN/YfH5AxQ7Zk8C8azuN1PiJ2gTuqBsp4RZ9M5
c+my3lNHqn2/Z4V6hqv2ZVuqbxqT+VGfvbHa0g3lTFfPVHXN4tpFnYAyevE+
zx2TM/fUdyoDUhYkhqFYhmIYimUo5qbYm44Zjh1iZoqd6T/vv++a1rWtZ9p6
tq2YnWJ3inkn9p3rK2UE6kv0vVcGqyzWPbl782eHgtOjTEDZgBiaYmk6xjjW
iKEpluYWZSwQA08sPHWQ6iLFWBZHRHyTeYfj0z9TwSQ0PzE2xdp0zHDsEMdO
PDvtF8VaEqNSrEoxLsW6fHIoONbu2d27i7k4ushbxWIUI7FSMBXETrTPaZeg
fYJ98Zmh4FAp01C24T/nOOh46L/4xFBwVpQxKGs40D3HiMyhrr+1qVCPrT5b
WwsxIEcVTEfxDv2mflvPBPZs4OeHgqvinsK9xcm8f3YlmI6WT4w+1zbOr2L3
ndQfnek7ZXwUg1AsQjELxS7cnWf/HRGZjuthMROmKRhMYilof6Odr/a++nup
s1F3o699Rfkz14M7gkHvnKedl/ZeI8S7HB0btq7OyHuV+w4UX199fpUZX1GN
73JXsXdbpB4sam3QtEXTf7W3M+OL44zzted2e363Z21XOmObp37cf3wV+NU6
cybByp2R1Wvv63nn+hKsWsL1d9fv3TPmPWveM+g9i145sucVeC7YDMWHeimu
83TGt3qm4djf31Ls6ZzvPYfX83g9e1ddjva9nhev7fH36tXE8+iMnfyS9WDp
i8m5VD06CO29tftWN6EMe/aS9+L1+FivR/muaIt/te+Kxz9jSUNbPzH6xebX
d9w8zfuZlpwvps+4WBbKm/Ql18dCX4uP3W84bowJ7rdtbtvrQ2qb2paOm2IC
iB2jPF+5/jz1YGWLuzxnPes3zyH3DA7xg/Xnf6Ul+x33Pb3FlrGnfEMxd/Q9
Hyj+C34Tv437H/dBGw3FzlSdvbr7X2vByRYXaF7SH78zvijaS/yrg+qNr7A+
xPoSO0c5V9nuM9djM2HfUCaubNyzntp4v7UzZz7pT2qapqVe68fia6B9xQ/F
Dlh74Dp0/ej4INzZEX2CegUxBsTVFl9b7AHtbbWH1S5We1z9XvR/ORG6bXTq
YF30ydE3ZyNl9m2RsSlr08emozPyX+XA9gH7gufTLVaPza22t/o/60utTerx
HZH3W0dtKKbuDOa3thX61C8Ev2BnfO3vLP/gYOnD4tKJXSCmndh2+jyuUv4d
fSG1G9V+1DRNWww1bU08E0W8JDHTtAEUk1osNfMSS2nJkudSxVdlvvIPaROq
beiW2mC676/Gl9c6WBd1SINlfFi2How7fVH0fxH7zrNWprXfdwYHSB/b1Unv
lLb43k5dwqcvbbAe4WN64hcjloPveXbsVOV9x9NXqOfPXcETVzeoLcARxd9D
Hw19NdRXqrfcqyO+avqs7dmRPZh7DvGW3Jt5ltvu9puO+KE63z1F+ut2Bx9l
He5n6wlOp1ierglcG3gOZFc9Z8p5tpw20NpCq4NSF+WZbZ7dtlVJ33xcA+iD
tmhH1uzqOTrr8X98u8j39cH61x+sNb5Zm/NstZ7YToslYJ7mrY+rvq7q4PUf
/Lz4S57REf957YO1E3ZPuir1PbY/e1VtcrXNVaeibmWwHiwWbVq1bRXDwTOV
r2wLtoM6EXU3l3dEV6JOR92kNr7qevTHeqIl8i7lXsZXl/JW0UeNK3tescfc
u/pfnQyd1ZE1p3grn7ZEPqOcxj2Htg7q/92L6Hel/5V5mNdWrvd6YnerbbH6
Gn2d1IGpC3N+f5Tvt1J38M+U777O/dLc/+N6hjSebI28R7mPPp76nmrPoF2D
8/8dxB/qznkPh5X5Un9m/Zq1ydDfUb9HbTUWoowT9+SMe+0LF+b+Pz05Y/ju
3qxX7nXf0RV8e2XFngXumcaebaxNh/69PxZ7B30o9aV0v+C+wTHfsV/5kXIk
fbD0xVInrG5YvJVtWyNvVu7s+cZiUSxd8tdH88iO7OH03RRzU588sW7EmnO9
dzvlm6E7unh1kI5NYi6oH3TNumXpv559uD7xp+oJrqpYsWLuiLEohr9YPMpT
1Eupn9IWZh/e268j5+u4Z9+A8KV7cgaZ9hDikfzVGpmcsjntb8XlXL74b4wt
7x/TEdwt18fatWjfoi2NPtH6Rmsvo92MPln6ZukfJxaR49QJpT7WS1sdfZds
I9tKHxttfMXM0/dGn20xeTyzQF9u/0H/xQ+Lf1hvPeOI44n6vGn53ueMjI/X
+r3Zw7iXEUdy6nrmNOc21xL63mmjqq3qdtDt8Ps0ghklBszS9Zxhqv+ZPnCe
baot907t8VfTplss3t247tmes2bdn2zreNgZe7a5a/Hl9MxZz57duxFM8U0J
X64enzd9DbR31e5VmxjP11MnoG5gT+jLavZc7r3EDxZbtNqS8wfF+RVn1GeG
6S+3f3vxqaimTtbNM8/vqEVHqq50viLfFL/07vbYH2qHeCPXm9tzfqjniF4D
fwN0TUv25OoTlqMsN7Xn7HQxPj13yvOnxP78mjLM1hb9lXosbQJNw3fd14ub
K36uzwx7qpaz/sR8Ffv1Aq63tudMdm2kPcPr1c6c2eXZXZe3B6tVzNarSrks
n+W2vNowa8vcKPYiYqfeBl9tz1kY2lxfWtK3/PoZ6G8gHrC+geLTvaNusTNn
fbnf9qyod8u9Z4R5VtjHRb6lj6m+pp457NnD2gGcDC3TFhxuMZD1ZfWMXs/q
dX+5Oel92xk8Um2U9I9TNqntkroTsRHESBcr/aGS5rJFX3hAe7CM9IfRL0af
c33PFyX+3r05A6vWlTO2PBtLvbLny4qDIf6F/oBi9WpPrV31A7XgFItX/HAt
Puf6nntmpmdner6FZ8O9Vtpf+XStOTobdTfaSO1S+q62Uz/wfMm26DfVc2pT
oW2FeZiXdiCelzu2PWcQHleL74Vn9HhWjxhuf2l/1R9sN23GHJ8dp9XtLVgL
dq9nEnk2kTbp2qZ/XORD+xJvmuZgVohdMbM2+yPzzDDlk54dNlj0UdbD+qiv
VG+p/sj29zuoy7Kcns01SymvbWxbL6h8vjf/mf/bAeV7LFILtq9nOnu2szIa
ZTV95XvsVsaPXcuYIQatmKGeASM27TO19G19BPQV0GZMXyF9NrQl0+bHvaAY
Mdq/uE90f+SY5rpdfG773vTQZ72xoe4pe0dthxasZ653LaLvkjYSrpU9M0X7
G/3Y9GfTZ17fedf5nr/T2pH1vvhUV7dFJ6RuSAwqsajUqatbr5f9gfsEz+EV
X+jWjsinlFO5jxP/5qcyBouXsH5HZLTaKepzp++deDPb17Kv7S71td7iKIm1
IyaW2Fj6hesffj105+j48WmrrI+fvoDusdxr6TOl75SYwZ4b6PmBYglfzLNp
+DZTQhfBX1wNFpJ7FPcq4tX8WPYyyqW0Gf+67F20jRKjUwxQz54Su1O/fv37
74Euhd+xmrOC3JO4N1H+JI6HeB5jnbuqORvwpo74h0ny2jNp12Tb6Tum/btt
aDpTlO/ld3PMcuz6uMx3ygzPLOs5v7UyS23VtGFTlqkNvWmZtrZT+gToGyBG
iFghnvl9eRlbPQtcn9pT22M/pR2V/rJiz+tPpF+Rewr3Fre3Br/eeMY/w/kQ
WoK2nrsnmPH2xxdqee4Z4afXcuad+NliqHsWnpjTYqR6dpVY1I7dd7THZ65a
5innK88l1sfsQ9KstkUfqF7wC9d8bdHfqccbKO+Lr91fbMBOK2WzLGJu6xs+
XvnHxKc6oy02F9peiNcttn3NNnZsoz4L9gTD23vXRPq26qPkWkn8brFvzizP
xMh37Paf9N90jHWsnRZarBYMCrEotDHR1sS1yNnQOWVNIga59z7Xr0aM8gvK
3OgYYTvv8//t2R55qbgj4o9ojyzGuNjl1sG6eEaC2PmPalNci0xK/3K/pbIq
8z2vrBfMXxxv8bzN07zfIo3HWqPfVM8p5tSG5Pd4W7ColDfr96T/k9gpaxM+
X08w7sW6f5J+uF539nPu69SRee9zdWfqf91zuWZy7aSdkOevuf53H6A9ygLE
+4Mx/ceB6KcOrwTjXnsmMQnFJtyh+MZrc6ftnWORZ4Nrc6ftnTIRZSPuxTzr
Q5sG92Ta37gmEB9AbBttUcRq1sZNWzftAcUqurgj9p3uYQw3nnsb7e/EVnm4
I/Zx+g/e3xOsSrHDtaHXX0Qdv7p+9XvaEWtPrK3u9+Q5DWX/p9hbuT8S70P/
AnV06lrVTXpGmzpXbXjF6tRGSlupNyo5P9D9lfssxzHx3cQ8U+aiTZm2Zau2
5awMzzjyrKMzSOOBejAgxYJckjzHr8WmTNuyddpyNoQ2N9reTNkafHHPFPZM
YDHBxAbTVsezUjxTRuxl20BbQW0SbRvl52Kui7Uunro+GvpqeOao9lKeceRZ
R3tp811PGqalPkm9kutnz9mZs8j/tPl0rPQMWO37bunI+bNiDHlOiGfweBbP
H8Q/sR79vDIR1xALFnss/1HPZPBsBvc8ynTEZHQvpEzDs9KUGSvrUAepLlIM
VrFStGdwTyz+yRMDkVGI5aqMXtmF/cr+5Zky2sxoj+iZterE1Y1r86Tt09nF
XluMfrH65y7zw79ncmh7VuzPtAnXNlyMm6+KfZkyvE3bIgtT/rcK6e/UFnw2
8cQ9H099uXrzpQl/YWSw3cTmE1NPbEt92vVt16ddrBwx97y3j9nXlO8o53FM
dI0ghp9jpTZp2qad1xYsOHXE6oqnK/OpGPNizc9P+n8X+w3HJNdIrpXUAasL
1oZG2xvtN8SuPUXs7yKrt/2tg3XxjC/P+nqMZ2/WI6PRFnPTjshutN9wTyTG
mVhnYliLZS0GvFjwK3Lf0hNcmj8GImN0zaDvvLJHfUL0DVEHqi5Umz1t99Zo
C7aiNhX2b/u5thbKz8SqW7f8H5555tlnz9pe9cjUlK2dUdpLDG2xtMXoF6vf
M7s8u+sk4j9bzxlEnkV0PfeP1oPJLza/uB+fDGReV15zRlnDieEulrtngDse
er6o53+KTyFOhf3Q/igGsWc9qHNQ96CMSVnTmTzbiribFvvUnRs5B8fzcE4b
k/FdbEExWsVqVVcjlr1nEHqWiLp4/R3Un5xViW2iuiUx9LVRVOZjfN9TFiQG
vVj09kH7ouu2G5VPtcdnURmXsi7XmK41xTsV+1TMRbEXtd9VbqL8RF24Ol91
v3cUf2Xt58VVFl/Z85Sts3XXf1s/btdWM5bxwnFjXdJbpCdnfCxb9MliF4rB
KZaDuqEjqNvhpX76X+sn7p7FvYv2b2LZi/GjfbJ91r4rppLYSuLKiy8/VnuW
StrMtvMM1Acq0Wfr2y7ewxkDOV/A80w9M3zVSmR8yvrE+NEeX1sOse2PLemp
G/PsU9/xXWUcyjrERBIbScxJsSofLP5AizRyTpPnNR00JnO2c/cjpb5imIhl
og+DvgxiKomtJL6z+iL18fq56+8uVsBjleD9K99TzqeORV3LX2X8NH+xL+8u
3099jNi3reV/2reRc8s8v2zcmPgY3FHmK/0lxLgW61oM7H2L/ec1vcGo/62M
X2KDXtQWe94vqdd9vPtAR8590aZM27JbSv9Vhmh72W7KFp3D9dXQxt+5/b5K
zjtVPqicUPmrWLrnl/HNfmp/vaXML8oQPStTHaiyRX2E9BXSZknbJcdvzzJa
uy1nLTlPO1+7pnFt45zg3KC9lnZbYjaL3SyOklhj2tOK8eWY5dg1B/eXjI4M
evOiezV//3n/fc8E9GzAo7i/rZ52EN/T829sD234tOXzzG/98dcijSl6glkl
dpX/rP+u8kflkGLqi60v/oP6OeVj4uaLn+/55O4B3ZNdVv5X9z22v99BHy7X
M1+25MwJz574P4Jq+hs=
                    "]], 
                   Polygon3DBox[CompressedData["
1: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
3nfmwf8BLBeURQ==
                    "]], 
                   Polygon3DBox[CompressedData["
1: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
D/P1aJxj0P4PE8JGBw==
                    "]]}]}, {
                 EdgeForm[], 
                 GrayLevel[1], 
                 GraphicsGroup3DBox[{
                   Polygon3DBox[CompressedData["
1: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
XdgRe4C2n2pbKO4vdI+4w+prijb9MAn/B1zc0kE=
                    "]], 
                   Polygon3DBox[CompressedData["
1:eJxF3HXYbkX1N/BHBBHhjge4j5znCN43zzlgYKAoKgrS0imCNEinhSKK+rNF
BKVEkJJupbsb6Q5BVLqREoH3+2EN1/vHuvbsPbNnz55Ys+K7ZrTZTmvuONPY
2NiDs4yNzZzrkdPGxt4/GBvbrTM2ts/UsbE/T46NrZb7S5Oeb8bY2IHDsbHf
dsfGbs39ydPHxm4ZjY19tz829r3Qpin757y/bso/kvdPTplOym4W2jQ0S+iw
lPla8m9O3rTUd0TKvzf3X075q/Ps/1L/7Cl3dtLHT6/3xkJvdur9Q/P+l1P+
yuRP5P2jcj9/7g/K/TD3c6fMKPRiys+V65dS3/ZJX5f8E1PfkSm/Ucpfm/v3
p/z9uZ6ScqeG7kv6+tA6Sa8d+lvSe+T99ZK+IemT8v487X/813joxjz/aq4b
hm5Ket+U3zfpA0P7JX1e6FO9sbGFQ+cnfdfE2Ngbac/rodNT/i+hVzr1TN69
KbN1ym4a+kraelfuf5n0r0J3Jz0+UemfheZM+oy8P1O+9Y7QmUnvPKy26asd
kt4pZZYaHxtbOrRj0hOhU/PuX0JTk+6m3Myhd4beHdoy4/lArv8IbZX0P1PH
bin7/dC/kj4t33gtbX059Nek/+1Z8qalrvPSP2fl2azdapO2/S35GyT/kJS/
IenDM97LpP/nTP5VyX8s712W+ydDKyR9bP75xaTXTHoy47Nwyn089MHQ9NCe
qWONXBcK/TbpY1J+6pSxsVdTfv6UPyvPvpG8a/K9lZJ3Tv5hG+nQbsl7cWqN
xSdC/0n6nDybmvTcoXOHNe/Mv9lC5yT9ntS7Y/K2D82W9F15tnfy/hC60xzN
//wx7f1m8mdPfi+0d9K/C3WTvtN6Sbqf9Lnpn1tz/3+57+T+nNzfn/ZtkLHZ
KPSNpO/P841T90bdWiOH5B8OT/2DPJ+a/1s712Oy1o4NrZX0wZPVf/rxvcn/
SOr4RfJ+GNokeaunnhVDq4S2DS0zUWt1t9DSE/V8tdAmLX+5iXr3V6FVkr4l
bdguzzdo89v6NNdWCv1qWONkvF4IrZH0N/P8W63/jcOH057dU9eyybsy/3te
+mv5lD03+Uemvi1TZuvQjuZraIvkbZ/rV/CMpM9P+clcf5/yq6WOHw1r7ayQ
/N8k/WyePZv892QOvDBR71qLX211HDFZ+crNO6Pm5cqt/f7ji3m+WNq3Z2jF
pM/K9/6V8idljOaZqHmg//TjEqFF8z+np+w5oc8kvXzoxaRfDn0t3zo3738K
f0sbV837KyT/weQ9FNpistbOJ1LPh7q1ho7Os9nT9v+k7CjtWy7lX0vZ/4Y2
T94zef5M6uumzEtJn536H9NHyV9+onjUjqlnu07xruPTJ//F95J3Vfr78Ml6
Xz3vS/07Je/roZ1Dp+WdbXLdvFvjoP/PSf1Pp/wx+O5EjfsWoa+F1g39KfXd
lPwnkjfPjOKL+KM5+/bcVd82bQ7/Ne15Bi8wZnn3iZTvp2/nCz2X9KHJ3zX5
R9kbkp6R6+Khpc2d0CN59uuU/WHo0aSXGhTPwquWTnr1yRrrGxt/1i7tuzD0
6aR/af3l2/uZP5M1Z8ydNRovMac3aP+mjuXybJOUvSbpE6zXjMdR/Vpzn0p6
l2HtK/aXrfC+0GO53ye0Vuo/Kfez9uof17Qf5v5v/iP1nZr6Hst1Duvf/+Cf
ofuSf0foX0kflf7fPW2fJflP4Y95/5yk359/OT/vn5D8I5N/Vp7Na0wnijfv
ok+TPsgctP8mPSXjc2Tevy11T4ZWTd7Jue+l7OP2ntR3ff5pev5tvtB7kj42
z6/Mvy2YMi8kfTh+lXcfsk+m/DO5viN5M4WeVUfy35v000n/dXrtl+u2+bJX
0g/m+dX4QeiBpB8cFp/Bbx5K+pLQZ/L+y8k7XXty/7Xc/zVt+FLa+6vQB/M/
t+R/Zs7/HJJyC+Z+RuhPSV+R/vhA1sYf0/4vT5QcQB4Yhf6Y9F35py+O1x74
taS/YA2HFgl9vs0z822p0JKhu1PHV/Lu+qF7k/51vv/hpG9NepZ8/+FcT/f9
fHOXpH+T/E/k/vakZ8V/U8dioc+FPhnaI/kfSf5tyX/XjNpTZmu8hAyz07D2
3jObvHO8/03d/035GSl/+qj2S/vme3J/cu73T98chL/k3XNz//Ok9wj9fFj8
ce2UPyzlZ0v5fVPfjv4l9fdm1H/4n1+G/pdn+1kTST+Y5/3kf7b1j376TOhy
/ZfxWDJ0aeqeOeUOSPn9Q/9M+orkr5y81UJXDUuuIl9tGLov+buG1knfrxv6
7kTNS/NzMv/4raR3wJeTnhbaPumvp45Bvnte6jk2/fHJ1H9lxvbbybs5998Z
lixwRfKPy/3ZxjT/vkRo92H9h//5XeihpO9J/mr59pqhrfKv+09W+/3HeP73
S0nPm/reG1oB30/51VPXuqHlU3br1PlC0q+GVsn9nqHPpNwJ+f678/4Zo3pX
m7WdTLdE8hcflDy3Yq7DbtWxmHU7KjnGP/iXi1J+pTxfLnTB1JKzydurhC5J
+rRR8TpzxFy50Pzu1j5CFlP3/1r7fMO8MX8+Enot6T9M1nqxbuZKe0/I/fdy
/3DuFyBPpP6PpG82t5ekPw9M/jHGJ/dzJ/+4yRof4zR9RvWxvl4y9P2kr8w8
GyX/4ozRd8g+k7V+rKPZU363iZJt1g99L+nN8r0Vk96ObJHvnZj7nVLXt0Ir
pr6rUt9CqW/VlNk5ZX5PT0h9U41p0msMao6am2tK5/1b8u3vp+ytqe93k1Xe
e3PMqHVn/X0ydMdEjZvxWzR0Z+73mqz+Nw7WlzVJv1hyUGv11NR/Qdp2WWh9
e8lkja9xtr70gb5YOvSDpP+a8rcmfVto02GNKZ2BruAbf5ws/oGPDPL+hin/
mfzrtrm/Me3fJu88kHfvsacPi6RvD22f9KZkzJTvhzaZqPJfSH2HTqv5eGyu
38z9d/K91+kGE7U2Vwy9I+njkr9X8i9L/t+n1tyf0uavefzH1HcWPpi8M9Oe
FdO+d+Vbm+Xd63O/RfKPS1u+TaamWyX/88lfObRD0r/P/22DH9L90p6L8uyK
bu0BayTvyTz/cfJ/FHpgouah+bhr6O+53zblr8t4ftM+nu9dkvs7u7VHHpfv
nUSvDD0T+nfoh3m2YPIubvzgmPzfHqnrAHtqnl2mveQavCzpA0J/tp7Iein/
jdw/mXqeC30z6WtCX01fzULWSv6Z+f7jnSqj7LvyfK3krx2aNelvTBRvWSv0
dfM/ZX5gfebbZ+T9nfP+jeRMMpK+yf2l+b/j8v5Gk8XfzQ06G93tzanFa5cO
vZH0hcY36f/iBanv6Pzfz/N/i+TZS3l2Pj24W3PMXHsV/0neZ0OvJH3u1NKJ
52o89VTf6NYevvZk9eM3Q99p/Wkfs599G39P+evoW73653VSfp/JGj/j2M34
zkEHoX+H/kWXy//M6JUMsWLKXk6/z3peMP2z5UTNC/NjK3vi1NLJ6GYrhHbF
v3O9t81/62DrvDMt786Lf08U38c76YSXJ33AZH1fO+acUXoSfenQ0NwTVeYj
bS/27tVp34Fp30Ghv+M3+E+vdLxbcr86/pxvbZN3b0h/n5p3XupUH+rL55N+
KPSPNmfOT/k9uqUT/j7vb5H3Ppr3P0bemKg949WmKx8zveQY8sxPQs/n2QV5
/6Ru2SAOzvsPp+yzob+H7uvUvm3/3j50j73VGsv8OSS05WTNe/Of3Gy/OC/5
X+6WDeMXw3o2o8nS9hY6JfvL5oOS19dL+UNT11ho/cma50916j/936+HpUeR
scnaW+b+0Tz/V2izYekt9JdO6EU66ET17cGhKeZDvvexbo2BsVh9UDq9PXBV
con2jpeMsN2o9hq61dn9kgk2nCjd6Z+hjYxt3vt+aDf6QrfW8xG5Hhn6Q9Jn
5Hpi6ITQ6d3S0ffL9U/d0t3pPfQfeir99Cehn4bOz/+cFfpF0r8K/TL0826t
591z/WHod+SrXH+sr1P2qk7xyzNzf3booKSPz/W0xm+Oa3wUP9Uu43dyt2xN
xtu409deyvVCbUx6rMnW1qd1+v1BPZP+waB0pnnZFnqlS7HDscf9plvr6f5c
p3VL3if3Hx06tvXPEa1f9M/xrX3fCx3aLf1r1zaH9259xb63jv8zD5VJev/Q
wd2ycbF1bUvO7tYa2HpQPBfv3a/1/YWjGifjdUjKX5rrta2/zmzPdmvfpgt+
nW2vW3vGN8hQ3dKN8P87255l71IPex2d4hdtrB5s+srP2/gdkfQ/8uzX3Sqj
LD2GPmMc8Td1XNrawhZ4qfWV9HP6Ku/v0trg298ZlI52U9LXd0t322lQY2os
d2hr9Iw296xdY2Js1Hl7e7cf6rU69Om9bazoatflOke39osbWxu19arGm29N
+oZulZPPhsaWpl5tu6XlK3dzt/TP69v3fpz0iaHZeqWjntTG8tXQG21MXc/r
lv3SvbFl69q7jfHF6Z/nu/WeufBErk+GHu+WHvxy6KI2n83rY1LmKWsntA97
Ta4vdsse8Eybt4+0/tZH1+J93eoT8848ejj0aLfWsO/s1S192/fYo//U8o9l
v8s78yX9fnOkU/Wq33d9j02HbefEt/kTO0F4y0/7ZYO8N/S1pHcIPTAoG8hK
dPFB2UaUUfYnoSeSvmZUuhz70AP5/r/tPeydoYeTfjS0bcpuF3ok6YVGde/5
rJNlw/m/3D8+KNuOMsqy77Dz3J86j0xd/0z6XZMlQ13d5jp9fINh/af//XbS
r7TxND7GCa+YOfTOxjNmD72PvTb0nnZ1P9ErOyj7QLeVP2VYa+C51ndsOcoN
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
26Lte5/sV53q/txE6Xh0Ozzl88a8W8/kPWpck945dZ86rXjRJ0IfbzwJz5qv
zUHzk74zf/5t8cYP1Ylffapf9eGH5q95fHnyT0udV6bu5dOHe9HJcn9J7rfI
/f5k1tzfPKg1YC3oA31B5++Pii/jz9qs7ewVT7f/xh/xTO3UBrxTn+LXC/Wr
P/yTf7sk73xhovggfmjMjN1LwxqvGW0+X8tf1SsehVc9Q+dI+ti882r4z/8G
hbewP9onXw8tm/Qy9IekZ5pS9knzybz67bCwUHyGsHo/GZbvmW/sPbn/Fv7Y
KZ8s7Nt/B2UPpFPAeXwu7Vku6ZeTnm2yru5907e/l/d36JRPHdbutUHZEtWh
rsXz/h3pi1nSljmS/84pZXvTRm3da1hYgHckPXvyn84/bpn39uyWPYgNgy2D
zY7t7tnkf4v/oVv21mdyv13uz+2WfVQ96tNH+oqNkq2SDYgt6Cg+kqllE2Eb
eXNQ+KKtQmN59/5BYY08k3fk9NIL6XB0uX/ne4vk+fVNn3su97vxhTR7AJui
//OfHbaLXGcNr7g/Y3hSyh2e+vbj48r7Kyuf+9/mftXcLzMsuYJ8QeYh+zyU
+ufJ9evNn/ZS0qf1C98B5/HP5A/5S/hI8DaYnqllo2CrwJPwJhgfWJ8HByVr
kbnYoug59B11qvtfqW96rn9o+o5xM353hnpTChN4St49uVdYQbZ9tmE2YjZ+
ZZTFv/CxuUIDe3dobjKCfX+8nsnD415P2VmnFO/TTu19tF+YJiT9WOhdU0ru
I/+xycN0sembb+Zdd7KeyftZaLYphRnSPu2EpdJGbT0kNMeUwoz9NXU/Nygs
GRsTWxMb18nDsuGw29Cp/jKsPc/e92Db3+jCZzd5m9z9+LDGBQ6Hv8n+dXee
PxD6b9LrTRb+r9f2p72aPvC9JvOT717L9ZXQWNbOLPyrad87/T9ZJDST/grN
NCp+YX+1z/IXk9O/0fQJMj6ZiGzkHe8+Maz91T7L3w8TdGbKnd4rrNBXJ8s/
yBZjPyUfXZD785o8ZP+9uFc8CW86I9dde6VH0Z/WnSz8qLkBjwSDZK76hm/B
iH6/fQse9IMTtTbuanv8zcPqC7oObBfcKPyoOWfuPdy+6Vuwp89nvv4w/zPe
K3vkO+Eh8q9n59lryXstzx4x11v/P5pnyyZvarfsoTAk/J78n7BbjyV/ZXte
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
tYT/kUHEP982KhsVX93MzT7Ev8Tn71+dXfE2puP+3C82+v8YPvY6ZyM4s+WE
Nnec5QIjcHTrK/Xwd1vH5u2nR2Xj4ttjE2f7Yl+HyXgq+bePyr7PV+/ME2ef
8DfAGDjTxNkmzmh5olMxtc5keZ7ttV9YAviAu5O+N3RP6K5+naFi73msU/gt
Z94c0HgJv5ln8vgP+BGcwQLvJc230GmYFGe0OKuF7ZH/h0+IjeL2fuEZYCD4
NO4YFa4Gbst5LM6UgFX0zbWabfKKftko2C2cCXJMawtf3prDio0Q+7B60odN
rZgTeA24jePbWrAmjmtz+qhOnelgrh86tWRd73h391y/36n4eHHyYuSlYUxg
TU7sVDy0uOgTQr8I/bTTzoMIHZBym3fKn82vzde6Z2ivTvlc/e9drb+XHdWZ
GmJq2OCcGbDysLAseAjd3Rw4s/EuZ+Fc1i9fGxsTmw2bj349tu3fcHbwduaY
ubZz+7527NIpewo7M9vu/c0ewm7OFi029OC04cBOa9PUajfbwH6t/exDsMFs
5qOGwWUnYstx9oMzQBbv1BkRzgaBSXqpX/PBvIDbg98zJ81NOjhdXCy8sx3Y
ENgSxL6J9WUTIfOL9xO7S6cj84tndbbD400ndWaDsxvgT/AG4w5P+Hi++yR+
3681A2P1TL/Wp3XKn4FP4Bd0SzHEYon5nJzRwIbCliImV2wuGwoeb6ydBUIn
phuLARYLzE7Ef/wWnqRfPAvvcsaFsy7IwGQAZxw464AvQX/CNLOBfn5UscPO
SVliVHYz9id2qE7bZ+239ln7K5vpVe199qe39wBz11kP7Fh86+xrbFaPNBuN
syuctYGn4W3OH/niqEjaWS1Ljgqz9Vze27JfPhdnKokP5pPkmxQjfHtby54Z
a9jPl9uYwyM90Na9sk+38fhP6IV+4UDhQfEh8cxwmfCZ1pnzl6wRawUmFDbU
sxPb2nPGkjE+vq1tflV13N14mVhpZzrBl8rje9Wn+tbZM8uQP/qFh/pL+wae
+lSbL0uN6rwTeiicqfPuvONdmD3+XmWebv+y9Kgwev/oFz/Gl2HmHm9zD982
vnCGcPnO9+PTva3xQ/5h74q9fqjV4Tw1eiicqvPz7mn8+pHWXjICPoafOatm
STZzvDm0VNK7NlkEP8FX2MPs/Z7vO7X2090brzNvdmyyiD0XZsUZIDs33uGM
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
                    
                    "]], 
                   
                   Polygon3DBox[{{6903, 4370, 4369, 5650, 7106}, {6700, 5548, 
                    5549, 4061, 6697}, {6904, 4371, 4372, 5649, 7106}, {8432, 
                    4037, 5545, 7085, 9492}, {8535, 4075, 5548, 7107, 9506}, {
                    9113, 7085, 6885, 4048, 8436}, {6885, 5545, 5555, 4095, 
                    6704}, {9127, 7107, 6700, 4062, 8534}}], 
                   Polygon3DBox[CompressedData["
1:eJwt2HncDdUfB/Cbyo/Kg8q+3WvJkoQs8Wuz77IllBShJEtUkhRCyZKUpLTY
2glJJKXILqksWcrST6kkqZD0e39f8/zxft15PnPmO2fOzD1z7pPp3r9dvxyp
VGotObknk0oNK5pK/c1lBVOpKuyRbUunUo/mTaVGMZYxfC17iFpZqVQNalOT
YbIejmmUP5W6mmtpTndZA3UfzOc4hlGbq2XLHfNXkVTqBHXUrs0HsvZlUqlf
ZL9RUlaKRfJ+at2oZmfK62MF+suG2veptquoqi9VeED2IVc4ti5XcTUrZF9w
r+3BPMAQtsiuZ1oe9f19E11YJytVIJUaLx/HKMZSQtbCvoG2f2Ue8+kpG8Il
+tCUJpyQ95GVccxk248wlOEUlw10DV1cU1cquabK7JaNckxDx9fnGsrzcPTT
+Kx1rZvoIGvPY/LN5DKuuemr733YJGtGb+dqTkv60lS2nlu06UVPrmRljJvP
tayJ6+fTuC9UV7eUe5chTRlqyJ7Vj0ezx2Yko5kqe5ph2dc6hIeYIivvmG/U
280u9lJRNt+589suSnHyMk+20hiVd65y2ee+hI9kk2ijTWua0YoJspLGsQTF
+Fy2IerZrsXlVKEc1ahJUfZrs52CtguQ5nb34K4YS4q5J0XZIVvkHKu1Xc5J
TrNQtpxc+nYBecniA9nb/KRNLjXP5RzyqZUVn+TlD/t/4wLbTd3fmcbpP87b
QXYjG43Dpf4+YHsf37KTSrJbtK/ncyDtHd+WO/Wzm79Ttv/Vjxw+F/q8PtpH
HdsHOUv+j89Osnn6+auaxznGUebLljn3n/pznOp5k+/UUtn7VLLdmEYUYoGs
m/7UV28oN+VPnu0B+vOjWo8414jsueABDskOOe5HfuBg9nPxPX9nj+8y1nOK
E/RWa4Da/WigdkN6yVo47+v6+Hs8Y9pVYIn+lLCvs3NtZD0b6CPrat9Gz2QZ
7cqy2nYXWZZ9ddSuTWVtq5BHdjf3y4bQKX8yF/WVvZtO5qg0GUqzWHZHJrkX
bSjlfmfYKetn3xJ9XMw5vrs5uTu+o/o/SO3BlNG2NN9o/4J9O7X9hr7G6y4+
lI+Rr5PtinGW3Rz3Sl6K2/S5G925lZKyv2Je0rYsK/XxE36XjU4nc0g7uqjR
iUdlL7JG9hkDZYNYoU5peqvZn4EMoLxsvPY3aduXntp2iPstKxDvhZjzuZYG
XCwba98G/d+tP1217cYH8nxcJatLTW0rxndKdiyd9Pkj3tD2TdbL2xi3zers
0b6HrDvjtL2LU+5pWn+ay67mTtk9FJeViDla1oT34plKJ/ciK+ZcWUPelZdR
91Xbc+P6nfvjuMey4jFvx3eHHfZt53PZTfpTzf47Y6zd+wrxzpIX4QZtO7JN
268oJnsvnTyrlzBaVpkbZHXt26vtcX7mJxrKeqnfS+0+XKl2HW6RT3XMVH2f
Th81hvCxvEImuUeD2C87yBZZd3Vax7PDCftO0lQ+UJ3lxvNDGmvbiMXyVtov
kO3Q/hrZVdyh7f18LF9JK1lLlmg/PJ2sDerQVtae9+UPppN3dDXayDqyVJ7O
JM9qD3bJvqWsrH/MNWovpZ7sOhZF//UjZ/acWogtxq+qrJ72Hd33thTQtlA8
K/FdlL+kxsvMsu8V2shaMcX2JCZwT7wnZdUds0RfFjOPkep/KW/AJDUm0DlP
cq768S7lc9ubqeWcNVmgRrt0cq45VJBVirGQ3Wo8G+lvcyaoP57LtK/BCtvL
4/3BZ1wh2+eYufE+9vdqtlJH3kTeVe2buY1baRzfRd7Qx23qX+GcNXgnvovy
RtFnrqMVDWVXxvMZ7xBeU/v1WKvFXGLfW+psjzlRjToslHeSz5bP4QM1lnJj
fEf5W3aax7QdyyrtK8eaRs3RjGE4l8ou53nbU3iGRTH/q3GhvL6/68X1Rg02
yS7KJHNIQ9bIPmOz7Jwgy82SeKbYIGuu1pP6MpkissK8JT8rxj577dCUFqRk
59lX02ctVsRcy0ZZNWar/TIzmUVV2Rz1v/Ys7+A+bavEMy3LbV9hbfJTgELk
krW27wV9mUG5eMaZJ78m3pHxToznn90xZ8a7K52M7Qou17Ya8+O+e36eU2M6
GVk61hrxnMv3yw5wr2wwH8lzcK6aZ5MzXzJWZ8l6ZpJ3aD1KeufMifWKczZX
51U1jjFKNpJPtf0h3qnGpiT35U3W0odiTU0RY7CHvWyKZzJ+F6jTUds/yVI/
J43j3sacrg+/8a/aKfnXsus4KvuVf+RnYq6UzVXrgLrf8T3Pqd9B1lr9Nfp4
MJ71rORezJafdL4iahaOd69rK0PveL4zyZxcOtZ69hViu2yEY85z7AY2R/+Z
Fd+VTDI3/hnrKG3PYZvsduftrN7v8czIctNE/ppjjjv2KIeYGH2V9dT+Zm3/
II+2F9AsnrV4h8naRi3Xeowv43unfVNZM36Oe8JW+RS1Jqh5mJ85wqsxj2n3
uD6OY2LMVzSRtWRSdv4Yk2kh6x7jaQyP8QtH6CVbxT/G8gwN3Nv6MefIbmee
bD5b8iRzXY94z+rTvfEsUM41lWVXrDf8nd/2RTE2xvo8bpXNcMwyfT7DSU7x
hmwwK9ReFHNHnuTd3VfW0ji8I1tGwazk3T1Ifm0meSce5rSxORnvJFmtTDJ3
zY17JpvNYe0rxvpNdh/fy/7HF7Ie8bs3fntRkaqx9pd1yyTv1rr8l6WxTlVn
QLxX9eFDFjCP/rJm+jlLH4+SQ9uc8btA+7XpZA3fjinajYnvY6ytONt59jNZ
9lT8rojfuOqcL7uQ0XmT3+C7tN0TazLbU5nGrFgry55nYYwhb7Ek1gCy8zPJ
2qkq1eO3WvwukW21L4/aB3neOWewRv6tfIaa05kpm8U6+cvyfa7pW9ZlJWvC
l2RH4n0SY5n9W2Ifp2Q77csX3/W4LrWeYodst+PfyR6z5ayKeUL2un2HfO7V
/gHHP8hK530znYxhimGy4XwiPygvFt9tFsQYc0D2FSNsP8F4JsZvOtl+Cmtb
kBfyJtf4nayDcT4S1yV/RO2H43rk7eSH5T+QJ3638bZ8Woy/Pg+N/3fE3MCz
sRaItbvtXvSgM0/IJsecGM9qrJ95iCdjjZBOfpsPiPvonNPjHRZrn1jne+a3
sYs9dIu1jP6cG7/ZmKrtM/Fek09ka3wX6ZqVrL0nyGbGmt72KEYwkldkj8dc
abtVrIc5P/bJvlCvhXvXmla0jLWFrG323+1oTjPaxzvM9/l0vEeyf1ueiedK
9oxa22KdwLSsZC36tGwvF+n7xbyk7ousdb2r08nc0pBxsidiHGIsY/6MtYzj
u1M03quyp/hS7a/orW0vlqvzf3CXtSU=
                    
                    "]]}]}, {}, {}, {}, {}, {}, {}}, {{
                 GrayLevel[0], 
                 Line3DBox[CompressedData["
1:eJwl019ozlEcx/Ezj9pcrJmHjQ3lgiiitAvJLtwIaxePLZk/SS62J03zd6FG
LClirZj5tybRMlpratj82dawJaVFifIUKResuLCyvE4u3r3P93O+5/c753f6
Ldi1N1WbFUIYQxp78LU4hFo+i3P4oT7PzQUhzJsSwnyk54Ywh2ejCMW4YL4p
9uEyKtRH+Gh+CPXcgfvoQr8sx5ps5GI6qj0zyQPm8njCxnbL/vAkxrFT/ZN7
9ezg7Vgta+KLaEWp+jp36Gnh41gla+BGHEKJ+iDf0bONZyEZ32VvEwjqXPXf
+B30THK2LE+WxQlMQ746hzfMCOElv0BK9paHUGY8yG9wz3NGuFzWxjdwG2vV
XfwQd/U84mE8Rqf6Jt+K54nzOFEUQo/8m/F3jOKkb/2aq+2jNRHCVbQhURhC
O9fIk1NDmIlSffX6+5zpdHwfP8OTeP/yYT4jH+JRvMJh+RrrMvJr7uYSeuJ9
czMKPb/ce1IYl3/W2603zTXYH8+qruJj5it5PdZhCyqwCZux0veo430xMx7j
U9Zk+D0qZe/4S7x/40/8ESN6PthLryzDv/AbT9X93Ifnega4U/YgngHd6FAv
4xbzS3kjGmRlvBVVaFSv4Ct6lnMJDsgW8UIsRp16CbcX/P+f/gHpBnb9
                  "],
                   VertexColors -> None]}, {
                 GrayLevel[0], 
                 Line3DBox[CompressedData["
1:eJwl1GtojmEcx/G/2pyHxhhziCynCREl9gYhOZ8eZzu0TCK0WbMSJUNSGhFa
iNEYyqnMcSOHhBgviLwQDYk3eMXnyYvv873+v+t/3/dzX891PX3z181Z2yIi
snxMTomYhP09Iu6lR2w0Xo9STO0WsZl3y4t5FcpxRP47NWJa54hZrSIWYjH+
yFfzHPkaXodUnHDvkbIU44u4hnqckRfJnxg/RRNeoU5eL//TOuJ8+4hLWN49
4go3d4m4zQ1oRIH8YpuIv/ovcJXsEBLyw/xR/2muxVkMaRexXTaYszEAOTjV
J2Ioj8AO88O5RpbFPdEb1epeXGG+Ax9UN7eN+IKvqFTf47so0tPAO2Uv+CXq
sUF9nZ/gKcrVz7nJ/V7ijfo+N6IBb9UPk9/B+zzix2iSLeGlWIln6v2cpqeK
9+GGrIxLUYKb6s3cSk8Fb8FV2VYeb11yUWGuf1pEX2SjK8pkmZyeETGKR2Mw
tsm/u+an92xOGj/w3G/XSe9v4194jWrvd1s+S+9k44mYiilolOfJ5xrPwEzc
zNTLhfJyLsEmPJCX8Th5Hq/A4uS95QmeJ0/YM9MxEznyuVxpb0zgXIxFtnyQ
/VtnXw/hlbJ81Poue/TmGRdjFYqwV1bAX1p6V3xDbu+Iz/wJOeZv8SjZHe5i
D2dggroTd8QYPenJsyGr03MOFzBcfYZPo5+eWl4ke8/v8AHj1G/5Daqdv6Je
Ecf4OA6gUF3Ju5LnGFn6z/Js5/Ecn0emrMT1pdiEYer5fFnPAk5TJ5LPxnJ0
VC9LPg+P9RzlgbIjfBKnUIPt1m+n+fzkOqIQxaiylg3WN2G8MPX//8w/JKCe
zw==
                  "], VertexColors -> None]}, {
                 GrayLevel[0], 
                 Line3DBox[CompressedData["
1:eJwl099PjXEcB/BPGrFUYkXd1NGwldpYk1QahsiapayaH8uGu7oxsrGlDZuF
4t9wkTY2G1szN2a4cqFha01olYrR8mNez1y89v58P8/7nOf0dE7qVHdzV1pE
vOVyVkQPvQwyV0hexPCqiCW5Een8Ns/bZ+RH/DGn2X2UQ8zYT+s35kQ00MRh
xuwH7J9lRzzmCSN8tn9qX+W1l7hCL9P2k/Z95lvc5pDddrmDahqdB+UAFamI
fnmTGo6XRNS7XmneyhZydSrkZso4prNTZ73Pl2IF94ojlsssVtKqs1gQUWeu
pYYRnSpZTT0dOinvc818nbuM6tyRgwzQrlOs02O+yAMmdIblfYZo0ynSeZTc
xzPt9HnLZCnltDjPuFah80V+4pf3mEieL+NMU+76lCzwmiLWsGC32v8r15xF
Jj+Te3vGP+Qs8/wl3GdBLvLQ9TTPKsMuW+aQyTLndLmUdzop5xPmNjrY4Hxa
nqSTMZ2Ndl3m81yg1Pmc7OYsH3RK7M6Y55LvGHucv8nvyXUWdGrs3pu/Mssu
51rfpUq28VJnrd3+5Bq7WZd0ZB17eaGTb7fPfJRWCp1b5BEO8FqnQb6SB2Uz
Tcn3jinP803yec3Fyd/LJibtn9tf9dvp4wb9jNq35/3/ff0DUVV2yQ==
                  "],
                   VertexColors -> 
                  None]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
                 Opacity[0.45], 
                 
                 Line3DBox[{4475, 6913, 4476, 4478, 4477, 8678, 4484, 4485, 
                  4550, 6921, 8694, 4482, 4483, 4479, 8677, 4480, 4481, 6920, 
                  4498, 8681, 4499, 4501, 4500, 8683, 4504, 4505, 6922, 4558, 
                  8701, 4571, 4570, 4568, 8700, 4569, 4560, 6923, 4559, 8702, 
                  4574, 4573, 4572, 8703, 4575, 4576, 6930, 4591, 8712, 4602, 
                  4603, 4606, 8713, 4607, 6932, 4605, 4604, 8724, 4644, 4645, 
                  8725, 4643, 4642, 6937, 4530, 8690, 4516, 4514, 4515, 8688, 
                  4517, 4518, 4519}, VertexColors -> None], 
                 
                 Line3DBox[{4487, 6914, 4486, 4703, 4696, 8743, 4695, 4694, 
                  4693, 8744, 6944, 4690, 4689, 4691, 8746, 4699, 4698, 8745, 
                  4686, 6943, 4676, 4675, 8738, 4671, 4670, 4672, 8736, 4667, 
                  6938, 4660, 4659, 8732, 4654, 4653, 4655, 8730, 4521, 4520},
                   VertexColors -> None], 
                 
                 Line3DBox[{4489, 6915, 4488, 4497, 4496, 8680, 4495, 4494, 
                  4491, 8679, 6916, 4490, 4697, 4692, 8742, 4688, 4687, 8741, 
                  4685, 6941, 4662, 4661, 8733, 4663, 4666, 4665, 8734, 4664, 
                  6942, 4674, 4673, 8737, 4657, 4656, 4658, 8731, 4564, 6924, 
                  4563, 4565, 8698, 4562, 4561, 4567, 8699, 4523, 4522}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{4492, 4493, 8739, 4677, 4678, 4679, 8740, 4680, 
                  4681, 6940, 4684, 8754, 4717, 4718, 8755, 4719, 4714, 4668, 
                  6939, 8735, 4669, 4706, 4707, 8749, 4708, 4709, 4710, 6950, 
                  4713}, VertexColors -> None], 
                 Line3DBox[{4525, 4524}, VertexColors -> None], 
                 
                 Line3DBox[{4526, 8689, 4527, 4534, 4535, 8691, 4536, 4528, 
                  4529, 6918, 4533}, VertexColors -> None], 
                 
                 Line3DBox[{4531, 4532, 6936, 4632, 4633, 8722, 4635, 4634, 
                  4579, 8704, 4580, 6929, 4583, 4584, 8707, 4587, 4586, 8706, 
                  4585, 6947, 4594, 4593, 8709, 4595, 4597, 4596, 8710, 4598, 
                  6946, 4700, 4704, 8747, 4701, 4702, 4705, 8748, 4566, 6925, 
                  4468, 4467, 8674, 4449, 4450, 4451, 8670, 4452, 6909, 4457, 
                  4458, 8672, 4453, 4454, 4455, 8671, 4456, 6926, 4555, 4554, 
                  8695, 4540, 4541, 4539, 8692, 6919, 4538, 4545, 4549, 8693, 
                  4546, 4544, 4543, 4542}, VertexColors -> None], 
                 
                 Line3DBox[{4537, 4463, 8673, 4464, 4465, 4466, 8685, 4510, 
                  4461, 6911, 4462, 8686, 4512, 4511, 4503, 8682, 4502, 4447, 
                  6908, 4448, 8719, 4622, 4623, 4620, 8718, 4621, 4619, 6933, 
                  4618, 8717, 4617, 4616, 4615, 8716, 4613, 4614, 6945, 4650, 
                  8727, 4649, 4627, 8720, 4628, 4646, 4629, 6935, 8721, 4630, 
                  4640, 4641, 8728, 4638, 4639, 4577, 6927, 4578}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{4547, 4548, 8697, 4557, 4551, 4552, 8696, 4556, 
                  4553, 4509, 6917, 8684, 4508, 4506, 4507, 8687, 4513, 4459, 
                  6910, 4460, 8676, 4473, 4474, 4471, 8675, 4472, 4469, 6912, 
                  4470, 8715, 4611, 4612, 4610, 8714, 4608, 4609, 6948, 4601, 
                  8711, 4599, 4600, 4590, 8708, 4588, 4589, 6931, 4592, 8729, 
                  4652, 4647, 8726, 4648, 4651, 4581, 6928, 8705, 4582, 4636, 
                  4637, 8723, 4626, 4624, 6934, 4625, 4631}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{4682, 4683, 8751, 4723, 4724, 8752, 4725, 4727, 
                  4726, 6951, 8753, 4722, 4721, 4715, 8750, 4716, 4720, 4711, 
                  6949, 4712}, VertexColors -> None], 
                 
                 Line3DBox[{4747, 4748, 6952, 4752, 4743, 8759, 4744, 4746, 
                  4745, 9070, 6963, 4732, 4731, 4730, 8756, 4729, 4728, 8757, 
                  4736, 6965, 4810, 4811, 8769, 4807, 4808, 4809, 6964, 9071, 
                  4776, 4777, 4885, 8788, 4883, 4882, 4881, 6980, 9078, 4884, 
                  4926, 4925, 8796, 4927, 4924, 4923, 6985, 9079, 4922, 4935, 
                  5024, 8821, 4928, 4929, 4930, 6986, 9080, 4917, 4903, 4902, 
                  8795, 4904, 4901, 4900, 8794, 4899, 4908}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{4782, 4783, 6995, 4993, 4994, 4995, 8814, 4996, 
                  4787, 4788, 9084, 6996, 4785, 4786, 4789, 8766, 4790, 4778, 
                  4779, 9088, 7003, 5031, 4984, 4985, 8824, 5032, 4990, 4980, 
                  9082, 6993, 4981, 4989, 4991, 8813, 4992, 4858, 4813, 6967, 
                  8770, 4814, 4815, 4816, 8771, 4817, 6970, 4826, 4822, 8773, 
                  4823, 4860, 4861, 8782, 4862, 6976, 4855, 8779, 4856, 4952, 
                  8804, 4953, 4954, 4955, 6989, 8805, 4911, 4912, 4959, 8807, 
                  4916, 4909, 4910, 6984, 4915}, VertexColors -> None], 
                 Line3DBox[{4803, 6961, 4804, 4806, 4799, 8768, 4800, 4802, 
                  4801, 9072, 6966, 4812, 4896, 4895, 8793, 4894, 4893, 8792, 
                  4759, 6955, 4760, 4763, 8763, 4762, 4765, 4764, 6956, 9066, 
                  4761, 4758, 4757, 8762, 4755, 4754, 4753, 6954, 9065, 4756, 
                  4905, 4937, 8800, 4906, 4907, 4936, 8799, 4897, 4898}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{4805, 6962, 4738, 4737, 4739, 8758, 4740, 4742, 
                  4741, 9064, 6953, 4735, 4734, 4733, 8761, 4750, 4749, 8760, 
                  4751, 6958, 4775, 4872, 8787, 4871, 4873, 4875, 6978, 9076, 
                  4874, 4876, 4886, 8789, 4877, 4878, 4880, 6979, 9077, 4879, 
                  4938, 5023, 8820, 5022, 5026, 5025, 7001, 9087, 4920, 4921, 
                  4934, 8798, 4933, 4932, 4931, 8797, 4918, 4919}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{4939, 4850, 6974, 4849, 4851, 8778, 4848, 4847, 
                  4846, 8781, 4859, 6977, 4864, 4863, 8785, 4868, 4870, 8786, 
                  4869, 6981, 4842, 4841, 8775, 4840, 4839, 4838, 8777, 6973, 
                  4845, 4837, 4836, 8774, 4835, 4834, 4833, 6972, 9075, 4832, 
                  4770, 4769, 8764, 4771, 4768, 4767, 6957, 9067, 4766, 4784, 
                  4792, 8767, 4791, 4796, 4798, 6960, 9069, 4797, 4968, 5015, 
                  8817, 5014, 5013, 5012, 6999, 9085, 4969, 4970, 5011, 8816, 
                  5010, 5009, 5008, 5007}, VertexColors -> None], 
                 
                 Line3DBox[{4946, 4944, 6987, 4943, 4945, 8802, 4942, 4941, 
                  4940, 8801, 4854, 6975, 4853, 4852, 8784, 4866, 4865, 8783, 
                  4867, 4887, 6983, 4892, 8791, 4890, 4889, 4888, 8790, 6982, 
                  4891, 4844, 4843, 8776, 4828, 4829, 4831, 6971, 9074, 4830, 
                  5036, 5035, 8825, 5037, 5034, 5033, 7004, 9089, 5021, 4774, 
                  4773, 8765, 4772, 4794, 4793, 6959, 9068, 4795, 4967, 4975, 
                  8811, 4973, 4972, 4971, 6992, 9081, 4974, 4988, 5016, 8818, 
                  5003, 5004, 5006, 6998, 5005}, VertexColors -> None], 
                 
                 Line3DBox[{4966, 6991, 4965, 4964, 4963, 8810, 4962, 4914, 
                  4913, 8806, 6990, 4958, 4957, 4956, 8809, 4961, 4960, 8808, 
                  4951, 6988, 4950, 4949, 8803, 4948, 4947, 4857, 8780, 4819, 
                  6968, 4818, 4821, 8772, 4820, 4827, 4825, 6969, 9073, 4824, 
                  5029, 8823, 5030, 5028, 5027, 8822, 7002, 4987, 4979, 4978, 
                  8812, 4977, 4976, 4986, 6994, 9083, 4983, 4982, 5019, 8819, 
                  5020, 5018, 5017, 7000, 9086, 4781, 4780, 4997, 8815, 4999, 
                  4998, 5002, 6997, 5001, 5000}, VertexColors -> None], 
                 
                 Line3DBox[{5052, 7006, 5051, 5050, 5048, 8829, 5047, 5049, 
                  5041, 8826, 7005, 5040, 5039, 5038, 8828, 5046, 5045, 8844, 
                  5101, 7018, 5133, 5132, 8854, 5131, 5130, 5138, 8857, 5142, 
                  7022, 5148, 5150, 8860, 5149, 5153, 5152, 8869, 7031, 5202, 
                  5208, 5199, 8868, 5198, 5207, 8871, 5196, 7028, 5192, 5191, 
                  8866, 5194, 5193, 5218, 8875, 7034, 5203, 5162, 5161, 8861, 
                  5160, 5159, 5158, 7023, 9090, 5155, 5154, 5183, 8864, 5182, 
                  5174, 5173, 7025, 5172, 5204}, VertexColors -> None], 
                 
                 Line3DBox[{5119, 7015, 5118, 5117, 5114, 8848, 5113, 5116, 
                  5115, 8852, 7017, 5123, 5122, 5121, 8849, 5120, 5102, 8845, 
                  5076, 7010, 5075, 5074, 8838, 5073, 5072, 5070, 8836, 5064, 
                  7009, 5063, 5066, 8834, 5065, 5141, 5069, 8835, 5068, 7046, 
                  5313, 5312, 8908, 5311, 5316, 5314, 7047, 9092, 5309, 5308, 
                  5307, 8907, 5310, 5319, 5206, 8870, 7032, 5205, 5212, 8873, 
                  5213, 5211, 5210, 8872, 5209, 7036, 5166, 5165, 8862, 5164, 
                  5163, 5171, 7024, 5170, 5220}, VertexColors -> None], 
                 
                 Line3DBox[{5180, 5181, 7026, 5184, 5179, 5177, 8863, 5178, 
                  5156, 5157, 7038, 8885, 5237, 5175, 5176, 8886, 5238, 5187, 
                  7027, 5188, 8867, 5195, 5190, 5185, 8865, 5186, 5189, 9091, 
                  7029, 5197, 5292, 5293, 8904, 5294, 5295, 5139, 7020, 8856, 
                  5140, 5151, 5136, 8855, 5137, 5134, 7019, 5135, 8858, 5143, 
                  5144, 5145, 8859, 5147, 5146, 7021, 5055, 8830, 5042, 5043, 
                  8827, 5044, 5053, 5054, 7007, 8831, 5056, 5099, 5351, 8920, 
                  5352, 5355, 5353, 7059, 5354}, VertexColors -> None], 
                 
                 Line3DBox[{5200, 7030, 5201, 5356, 5368, 8923, 5369, 5370, 
                  5371, 7063, 8927, 5391, 5393, 5385, 8926, 5386, 5387, 5341, 
                  9093, 7055, 5332, 5333, 5334, 8914, 5335, 5336, 5337, 7056, 
                  8917, 5343, 5345, 5342, 8916, 5338, 5339, 7053, 5236, 8884, 
                  5077, 5078, 5091, 8842, 5092, 5093, 7013, 5094, 8879, 5230, 
                  5232, 5223, 8878, 5224, 5225, 7037, 5226, 8891, 5245, 5246, 
                  8889, 5247, 5248, 5249, 7039, 8890, 5250, 5257, 5258, 8894, 
                  5256, 5251, 5252, 5253}, VertexColors -> None], 
                 
                 Line3DBox[{5217, 7033, 5169, 5167, 5168, 5214, 8874, 5215, 
                  5216, 7035, 8876, 5219, 5296, 5297, 8905, 5298, 5299, 5300, 
                  7049, 8910, 5301, 5302, 5303, 8906, 5306, 5304, 5305, 7048, 
                  8909, 5315, 5317, 5318, 8911, 5320, 5321, 7050, 5061, 8833, 
                  5062, 5067, 5059, 8832, 5060, 5057, 7008, 5058, 8837, 5071, 
                  5322, 5323, 8912, 5325, 5324, 7051, 5127, 8851, 5128, 5129, 
                  8853, 5125, 5126, 5124, 7016, 8850, 5111, 5112, 5346, 8919, 
                  5347, 5350, 5348, 7058, 5349}, VertexColors -> None], 
                 
                 Line3DBox[{5222, 8877, 5221, 5234, 5235, 8883, 5229, 5227, 
                  5228, 8882, 5233, 7045, 5289, 5288, 8903, 5287, 5290, 5286, 
                  8902, 5283, 7044, 5282, 5285, 8901, 5284, 5291, 5281, 8900, 
                  7043, 5276, 5275, 5274, 8899, 5273, 5277, 5278, 7062, 9096, 
                  5384, 5395, 5396, 8929, 5390, 5388, 5389, 7066, 5394}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{5244, 8888, 5106, 5105, 5104, 8846, 5103, 5110, 
                  5108, 8847, 5096, 7014, 5095, 5098, 8843, 5097, 5100, 5086, 
                  8840, 5085, 7042, 5270, 5269, 8897, 5261, 5259, 5260, 8898, 
                  5263, 7040, 5262, 5265, 8895, 5264, 5279, 5280, 8913, 7052, 
                  5331, 5379, 5378, 8925, 5377, 5383, 5381, 7061, 9095, 5373, 
                  5372, 5375, 8924, 5374, 5376, 5363, 7060, 5362}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{5255, 5254, 8893, 5243, 5242, 5241, 8887, 5240, 
                  5239, 8892, 5081, 7011, 5080, 5079, 8839, 5082, 5107, 5109, 
                  8880, 5089, 7012, 5088, 5090, 8841, 5084, 5083, 5087, 8881, 
                  5231, 7041, 5267, 5266, 8896, 5268, 5271, 5272, 8915, 7054, 
                  5340, 5330, 5329, 8918, 5328, 5327, 5326, 7057, 9094, 5344, 
                  5358, 5357, 8921, 5359, 5380, 5382, 8928, 7064, 5366, 5365, 
                  5367, 8922, 5361, 5360, 5364, 7065, 5392}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{5465, 7076, 5407, 5405, 5406, 8939, 5468, 5467, 
                  5463, 9104, 7074, 5399, 5397, 5398, 8931, 5408, 5409, 5410, 
                  9125, 7103, 5459, 5457, 5458, 8970, 5630, 5629, 5623, 8969, 
                  5624}, VertexColors -> None], 
                 
                 Line3DBox[{5520, 7081, 5519, 5517, 5518, 8949, 5522, 5521, 
                  5516, 9109, 7080, 5491, 5489, 5490, 8944, 5492, 5493, 5426, 
                  9100, 7070, 5425, 5423, 5424, 8933, 5428, 5427, 5421, 9099, 
                  7069, 5422, 5494, 5495, 8945, 5499, 5497, 5498, 9131, 7111, 
                  5676, 5674, 5675, 8980, 5678, 5677, 5673, 9130, 7110, 5665, 
                  5663, 5664, 8978, 5666, 5667, 5562, 9115, 7087, 5561, 5559, 
                  8955, 5560, 5564, 5563, 8956, 5557, 5558}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{5553, 5551, 5550, 5552, 8954, 5554, 5555, 5545, 
                  7085, 9113, 5543, 5542, 5544, 8953, 5546, 5547, 7086, 9114, 
                  5556, 5669, 5668, 8979, 5670, 5671, 5672, 7109, 9129, 5661, 
                  5659, 5658, 8977, 5660, 5662, 5541, 7084, 9112, 5415, 5413, 
                  5412, 8932, 5414, 5416, 5418, 7067, 9097, 5417, 5507, 5506, 
                  8947, 5508, 5509, 5420, 7068, 9098, 5419, 5512, 5511, 8948, 
                  5513, 5514, 5515, 7079, 9108, 5486, 5484, 5483, 8943, 5485, 
                  5487, 5488, 7088, 5570}, VertexColors -> None], 
                 
                 Line3DBox[{5577, 7090, 5569, 5567, 5568, 8960, 5565, 5566, 
                  5584, 9117, 7091, 5574, 5575, 5576, 8959, 5572, 5573, 5580, 
                  8958, 5581}, VertexColors -> None], 
                 Line3DBox[{5583, 5582}, VertexColors -> None], 
                 
                 Line3DBox[{5589, 7092, 5585, 5586, 5587, 8961, 5588, 5590, 
                  5578, 8957, 5579}, VertexColors -> None], 
                 
                 Line3DBox[{5610, 7096, 5609, 5607, 5608, 8967, 5611, 5612, 
                  5571, 9116, 7089, 5496, 5482, 5480, 8942, 5478, 5479, 5481, 
                  9106, 7077, 5502, 5500, 5501, 8946, 5503, 5504, 5505, 9107, 
                  7078, 5510, 5523, 5524, 8950, 5525, 5526, 5527, 9110, 7082, 
                  5530, 5528, 5529, 8951, 5533, 5531, 5532, 9111, 7083, 5540, 
                  5622, 5620, 8968, 5618, 5619, 5621, 9128, 7108, 5655, 5653, 
                  8976, 5654, 5656, 5657, 9127, 7107, 5548, 5549, 5648, 8975, 
                  5652, 5651, 5649, 7106, 5650}, VertexColors -> None], 
                 
                 Line3DBox[{5613, 7097, 5614, 5626, 5627, 8974, 5644, 5645, 
                  5643, 9126, 7105, 5636, 5634, 5635, 8973, 5641, 5642, 5616, 
                  9122, 7099, 5447, 5448, 5449, 8936, 5445, 5446, 5451, 9103, 
                  7073, 5444, 5442, 5443, 8938, 5440, 5441, 5461, 9119, 7094, 
                  5539, 5538, 5536, 8952, 5534, 5535, 5537, 9118, 7093, 5599, 
                  5595, 5593, 8962, 5591, 5592, 5594, 8963, 5596}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{5617, 7100, 5411, 5404, 5402, 8930, 5400, 5401, 
                  5403, 9105, 7075, 5464, 5466, 5472, 8940, 5471, 5469, 5470, 
                  9124, 7102, 5462, 5456, 5454, 8937, 5452, 5453, 5455, 9123, 
                  7101, 5625, 5628, 5633, 8971, 5632, 5631, 5597, 8964, 5598},
                   VertexColors -> None], 
                 
                 Line3DBox[{5639, 7104, 5640, 5647, 5637, 8972, 5638, 5646, 
                  5615, 9121, 7098, 5429, 5430, 5434, 8934, 5433, 5431, 5432, 
                  9101, 7071, 5437, 5450, 5435, 8935, 5436, 5438, 5439, 9102, 
                  7072, 5460, 5477, 5473, 8941, 5474, 5475, 5476, 9120, 7095, 
                  5604, 5602, 5603, 8966, 5606, 5605, 5600, 8965, 5601}, 
                  VertexColors -> None]}, {
                 Opacity[0.45], 
                 
                 Line3DBox[{5716, 5704, 6913, 6782, 5720, 5719, 9143, 5721, 
                  5718, 5717, 6919, 9156, 6786, 5770, 5777, 9159, 5778, 6784, 
                  6917, 5700, 9138, 5701, 5702, 5698, 9137, 5699, 6911, 6781, 
                  5747, 9153, 5759, 5760, 5791, 9162, 5792, 6924, 6790, 5878, 
                  9193, 5880, 5877, 5876, 9192, 5879, 6938, 6796, 5892, 9200, 
                  5904, 5903, 5902, 9201, 5901, 6940, 6797, 9216, 5932, 5930, 
                  9212, 5931, 5933, 5934, 6951, 9215, 5940, 5769, 5768, 9155, 
                  5767, 5766, 5765, 6918, 6785}, VertexColors -> None], 
                 
                 Line3DBox[{5740, 5727, 6915, 5728, 5723, 9144, 5722, 5730, 
                  5729, 9149, 5748, 6935, 5872, 5871, 9190, 5870, 5869, 9189, 
                  5868, 5829, 6931, 5830, 9177, 5834, 5831, 5832, 9176, 5833, 
                  6946, 5803, 5804, 9167, 5805, 5806, 5807, 9168, 6789, 6923, 
                  5789, 5795, 9163, 5796, 5802, 5801, 9166, 5788, 5787}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{5751, 5750, 6927, 5814, 5811, 9169, 5808, 5809, 
                  5810, 9170, 5815, 6928, 5818, 5817, 9171, 5816, 6792, 9173, 
                  5821, 6947, 5844, 5845, 9180, 5846, 5842, 5843, 9181, 6793, 
                  6930, 5825, 5828, 9175, 5823, 5822, 5824, 9174, 5785, 5784},
                   VertexColors -> None], 
                 
                 Line3DBox[{5752, 5724, 6914, 5725, 5726, 9146, 5739, 5738, 
                  5737, 9150, 5731, 6916, 5732, 5736, 9151, 5733, 5734, 9145, 
                  5735, 5749, 6945, 5924, 9209, 5923, 5922, 5921, 9208, 5920, 
                  5925, 6948, 5928, 9211, 5927, 5926, 5929, 9210, 6791, 6925, 
                  5793, 5798, 9164, 5797, 5799, 5800, 9165, 6788, 6922, 5783, 
                  5790, 9161, 5786, 5780, 5781, 9160, 5782, 5794}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{5756, 5755, 5754, 9152, 5753, 5757, 5758, 9154, 
                  5764}, VertexColors -> None], 
                 
                 Line3DBox[{5763, 5762, 6949, 5937, 5889, 5888, 9195, 5887, 
                  5886, 9197, 5881, 6939, 5882, 5885, 9198, 5883, 5884, 9194, 
                  5742, 5741, 6943, 5913, 9205, 5912, 5914, 5915, 9206, 5900, 
                  5899, 6942, 5911, 9204, 5896, 5895, 5897, 9199, 5761, 5679, 
                  6908, 5680, 9132, 5681, 5682, 5683, 9133, 5684, 5692, 6910, 
                  5697, 9136, 5693, 5689, 5690, 9135, 5691, 6926, 5707, 5708, 
                  9140, 5709, 5705, 5706, 9158, 6921, 6787, 5771, 5772, 9157, 
                  5773, 5774, 5775, 5776}, VertexColors -> None], 
                 
                 Line3DBox[{5779, 5715, 9142, 5711, 5710, 5714, 9141, 5713, 
                  5712, 6920, 5745, 9147, 6783, 5743, 5744, 9148, 5746, 5694, 
                  6909, 5688, 9134, 5687, 5685, 5686, 9139, 5703, 6912, 5695, 
                  5696, 9183, 5857, 5855, 5856, 9188, 5866, 6933, 5867, 5898, 
                  9202, 5906, 5905, 5907, 9203, 5908, 6941, 5909, 5910, 9207, 
                  5918, 5917, 9214, 5919, 5916, 6944, 5893, 9196, 5894, 5939, 
                  5935, 9213, 5936, 5938, 6950, 5890, 5891}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{5813, 5812, 6934, 6794, 6795, 9428, 5874, 5875, 
                  5820, 9172, 6929, 5819, 5865, 5864, 9185, 5863, 5862, 9184, 
                  5847, 6932, 5839, 5840, 9179, 5841, 5837, 5838, 9178, 5827, 
                  5826}, VertexColors -> None], 
                 
                 Line3DBox[{5835, 5836, 9187, 5853, 5852, 9186, 5850, 5851, 
                  5854, 6937, 9191, 5859, 5858, 5848, 9182, 5849, 5861, 5860, 
                  6936, 5873}, VertexColors -> None], 
                 
                 Line3DBox[{5961, 6952, 6798, 5962, 5952, 9218, 5951, 5950, 
                  6053, 9247, 6977, 6064, 6062, 6063, 9248, 6065, 6051, 9242, 
                  6052, 6983, 6818, 6088, 9255, 6089, 6090, 6060, 9246, 6809, 
                  6970, 6032, 6031, 9237, 6035, 6034, 6033, 6969, 9438, 6808, 
                  6828, 6223, 9286, 6220, 6219, 6218, 9328, 7028, 6352, 6847, 
                  6353, 9327, 6354, 6368, 6350, 9326, 7027, 6846, 6394, 6340, 
                  9323, 6341, 6395, 6370, 9335, 7036, 6329, 6328, 6326, 9322, 
                  6327, 6332, 6335, 7033, 6852}, VertexColors -> None], 
                 
                 Line3DBox[{5969, 9222, 5968, 5967, 5965, 9221, 5966, 5983, 
                  5970, 6954, 9430, 6799, 6096, 6099, 9260, 6098, 6097, 6100, 
                  7001, 9452, 6117, 6116, 6115, 9263, 6120, 6119, 6118, 6986, 
                  9445, 6110, 6109, 6113, 9262, 6112, 6111, 6114, 6999, 9450, 
                  6171, 6169, 6168, 9277, 6167, 6166, 6170, 6998, 6827}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{6025, 6024, 6007, 6008, 9233, 6026, 6004, 6005, 
                  9437, 6966, 6027, 6022, 6023, 9234, 6028, 5959, 9219, 5960, 
                  6958, 5987, 5990, 9232, 5991, 5989, 5988, 6964, 9436, 5993, 
                  5992, 5985, 9226, 5986, 5994, 5995, 6972, 9440, 6811, 6196, 
                  6195, 9281, 6199, 6198, 6197, 7004, 9454, 6206, 6204, 6203, 
                  9282, 6202, 6201, 6205, 7003, 9453, 6209, 6208, 6207, 9283, 
                  6211, 6210, 6189, 7000, 9451, 6190, 6216, 6215, 9284, 6214, 
                  6213, 6217, 7025, 6336}, VertexColors -> None], 
                 
                 Line3DBox[{6044, 6974, 6813, 6045, 6043, 9239, 6042, 6041, 
                  6048, 9240, 6975, 6047, 6046, 6050, 9241, 6049, 6054, 9243, 
                  6055, 6976, 6061, 6059, 9245, 6058, 6057, 6056, 9244, 6807, 
                  6968, 6806, 6036, 9236, 6037, 6039, 6038, 9330, 7031, 6849, 
                  6358, 6356, 9329, 6357, 6359, 6355, 7029, 9460, 6351, 6346, 
                  6345, 9325, 6349, 6348, 6347, 9331, 7032, 6850, 6851, 6363, 
                  9334, 6362, 6361, 6360, 9333, 7035, 6366, 6365, 9461, 6364, 
                  6367, 6331, 6330, 7030, 6848}, VertexColors -> None], 
                 
                 Line3DBox[{6069, 9250, 5980, 5979, 5971, 9223, 5972, 5981, 
                  5982, 6956, 9431, 5978, 5946, 5945, 9224, 5944, 5943, 5947, 
                  6979, 9442, 6815, 6131, 6130, 9266, 6133, 6132, 6121, 6985, 
                  9444, 6820, 6123, 6122, 9264, 6125, 6124, 6001, 6960, 9434, 
                  6803, 6161, 6160, 9276, 6164, 6163, 6162, 6992, 9446, 6826, 
                  6179, 6178, 9278, 6177, 6176, 6180, 6995, 6181}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{6091, 6071, 9251, 6070, 6073, 6072, 9252, 6068, 
                  6067, 9258, 6800, 6955, 5974, 5973, 9225, 5977, 5976, 5975, 
                  6978, 9441, 6814, 6076, 6074, 9253, 6075, 6077, 6078, 6980, 
                  9443, 6816, 6126, 6129, 9265, 6128, 6127, 5984, 6957, 9432, 
                  6801, 6000, 5999, 9227, 5998, 5997, 5996, 6959, 9433, 6802, 
                  6156, 6159, 9275, 6158, 6157, 6165, 6996, 9449, 6187, 6185, 
                  6184, 9279, 6183, 6182, 6186, 6997, 6188}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{6137, 6987, 6821, 6136, 6135, 9267, 6134, 6106, 
                  6107, 9269, 6989, 6145, 6144, 6146, 9270, 6143, 6142, 9272, 
                  6823, 6988, 6822, 6141, 9268, 6140, 6139, 6138, 9318, 6317, 
                  7022, 6845, 6321, 9321, 6322, 6324, 6315, 9317, 7020, 6843, 
                  6437, 6436, 9354, 6438, 6435, 6434, 7047, 9465, 6455, 6451, 
                  6450, 9356, 6454, 6453, 6452, 9360, 7049, 6443, 6442, 9464, 
                  6441, 6444, 6440, 9355, 6439, 7063, 6514, 6513, 9472, 6512, 
                  6510, 6509, 6511, 7065, 6865}, VertexColors -> None], 
                 
                 Line3DBox[{6334, 7024, 6333, 6388, 6389, 9341, 6391, 6392, 
                  6393, 7038, 9342, 6387, 6383, 6384, 9340, 6385, 6386, 6369, 
                  7034, 9332, 6239, 6235, 6236, 9290, 6237, 6238, 6222, 7002, 
                  9285, 6221, 6233, 6234, 9289, 6231, 6232, 6030, 6967, 9235, 
                  6029, 6092, 6093, 9259, 6094, 6095, 6817, 6982, 9257, 6081, 
                  6082, 6083, 9254, 6079, 6080, 6981, 6066, 9249, 6016, 6015, 
                  9230, 6011, 6010, 6014, 6963, 9435, 5954, 5953, 6013, 9229, 
                  5956, 5955, 6012, 6962, 6805}, VertexColors -> None], 
                 
                 Line3DBox[{6344, 7026, 6337, 6338, 6339, 9324, 6342, 6343, 
                  6325, 9459, 7023, 6212, 6192, 6193, 9280, 6194, 6191, 6175, 
                  9448, 6994, 6174, 6224, 6225, 9287, 6226, 6227, 6173, 9447, 
                  6993, 6172, 6200, 6229, 9288, 6230, 6228, 6810, 9439, 6971, 
                  6040, 6084, 6085, 9256, 6086, 6087, 6812, 6973, 9238, 6019, 
                  6020, 6018, 9231, 6017, 6021, 6965, 5942, 9217, 5941, 5964, 
                  9220, 5958, 5957, 5963, 6953, 9429, 5949, 5948, 6006, 9228, 
                  6003, 6002, 6009, 6961, 6804}, VertexColors -> None], 
                 
                 Line3DBox[{6407, 6408, 9346, 6412, 6411, 6409, 9345, 6410, 
                  6405, 6406, 7043, 9348, 6417, 6418, 6415, 9347, 6416, 6399, 
                  7040, 6854, 9344, 6403, 6402, 6400, 9463, 6401, 7041, 6398, 
                  6285, 9305, 6284, 6273, 6274, 9458, 6286, 7013, 6287, 6469, 
                  9362, 6470, 6471, 6472, 9466, 6857, 7051, 6466, 6300, 9310, 
                  6301, 6297, 9309, 6298, 6299, 7017, 6304, 9369, 6495, 6496, 
                  6497, 9370, 6498, 6863, 7059, 6493, 6494}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{6413, 6414, 9350, 6423, 6424, 6425, 9351, 6426, 
                  6419, 7044, 6855, 9349, 6422, 6420, 6421, 9372, 6515, 6404, 
                  7042, 6280, 9304, 6281, 6282, 6283, 9457, 6838, 7012, 6271, 
                  6272, 9337, 6377, 6376, 6373, 9462, 6374, 7037, 6375, 6305, 
                  9313, 6306, 6307, 9314, 6303, 6840, 7016, 6302, 9311, 6293, 
                  6292, 6291, 9312, 6294, 6295, 7015, 6296, 6499}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{6428, 6429, 9353, 6433, 6432, 6430, 9352, 6431, 
                  6427, 7045, 6380, 9338, 6379, 6378, 6381, 9339, 6382, 6288, 
                  7014, 6839, 9308, 6279, 6278, 6275, 9456, 6276, 7011, 6277, 
                  6290, 9343, 6396, 6371, 9336, 6372, 6853, 7039, 6397, 9367, 
                  6489, 6490, 6491, 9368, 6492, 6862, 7058, 6487, 6488}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{6520, 6519, 7066, 6537, 6538, 6539, 9376, 6540, 
                  6531, 6516, 9473, 7061, 6502, 6503, 9371, 6500, 6501, 6861, 
                  9470, 7057, 6477, 6478, 6479, 9364, 6480, 6858, 6481, 7056, 
                  9365, 6461, 6462, 6465, 9361, 6463, 6464, 7050, 6259, 9297, 
                  6258, 6316, 6261, 9298, 6260, 6834, 7009, 6835, 9301, 6266, 
                  6320, 6319, 9320, 6318, 6844, 7021, 6255, 9295, 6244, 6243, 
                  9292, 6241, 6240, 6242, 7005, 9291, 6829, 6152, 6153, 9274, 
                  6154, 6155, 6824, 6991, 6825}, VertexColors -> None], 
                 
                 Line3DBox[{6524, 6525, 6518, 6517, 9373, 6526, 6527, 6521, 
                  9474, 7062, 6522, 6523, 6529, 9374, 6528, 6468, 6467, 7052, 
                  9363, 6475, 6476, 6473, 9467, 6474, 6859, 7054, 6486, 9366, 
                  6484, 6485, 6482, 9468, 6483, 7053, 6390, 6262, 9299, 6263, 
                  6257, 6256, 9455, 6832, 7008, 6833, 6267, 9302, 6268, 6269, 
                  9303, 6270, 6836, 7010, 6837, 9307, 6252, 6253, 9294, 6254, 
                  6250, 6251, 7007, 9296, 6831, 6245, 6246, 9293, 6249, 6247, 
                  6248, 7006, 6830}, VertexColors -> None], 
                 
                 Line3DBox[{6530, 6504, 7060, 6505, 6507, 6508, 9471, 6864, 
                  6506, 7064, 6535, 9375, 6536, 6533, 6532, 9475, 6534, 6860, 
                  9469, 7055, 6445, 6446, 6447, 9359, 6449, 6856, 6448, 7048, 
                  9358, 6459, 6460, 6457, 9357, 6456, 6458, 7046, 6265, 9300, 
                  6264, 6323, 6314, 9316, 6313, 6841, 7019, 6842, 9319, 6310, 
                  6308, 6309, 9315, 6311, 6312, 7018, 6289, 9306, 6151, 6150, 
                  9273, 6148, 6147, 6149, 6990, 9271, 6108, 6103, 6104, 9261, 
                  6105, 6101, 6102, 6984, 6819}, VertexColors -> None], 
                 
                 Line3DBox[{6650, 9395, 6633, 6632, 6634, 9393, 6635, 6641, 
                  6637, 7077, 9485, 6613, 6612, 6611, 9390, 6616, 6615, 6614, 
                  7079, 9487, 6619, 6618, 6617, 9398, 6621, 6620, 6622, 7081, 
                  6881}, VertexColors -> None], 
                 
                 Line3DBox[{6687, 9404, 6682, 6681, 6683, 9403, 6684, 6686, 
                  6685, 7083, 9490, 6668, 6884, 6669, 9401, 6666, 6665, 6664, 
                  7084, 9491, 6558, 6557, 6556, 9379, 6561, 6560, 6559, 7069, 
                  9478, 6868, 6870, 6570, 9381, 6566, 6565, 6564, 7099, 9501, 
                  6896, 6899, 6745, 9418, 6746, 6747, 6734, 7098, 9500, 6895, 
                  6902, 6742, 9417, 6743, 6751, 6735, 7100, 6897}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{6688, 9405, 6671, 6670, 6672, 9402, 6673, 6674, 
                  6667, 7082, 9489, 6660, 6883, 6661, 9400, 6662, 6663, 6562, 
                  7067, 9476, 6866, 6642, 6567, 9380, 6568, 6643, 6569, 7070, 
                  9479, 6869, 6627, 6626, 9391, 6624, 6623, 6625, 7105, 9505, 
                  6900, 6901, 6748, 9419, 6749, 6750, 6744, 7104, 6898}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{6689, 9406, 6649, 6648, 6647, 9396, 6645, 6644, 
                  6646, 7078, 9486, 6636, 6879, 6638, 9394, 6639, 6640, 6563, 
                  7068, 9477, 6867, 6652, 6651, 9397, 6655, 6654, 6653, 7080, 
                  9488, 6880, 6882, 6659, 9399, 6658, 6657, 6656, 7097, 6894},
                   VertexColors -> None], 
                 
                 Line3DBox[{6701, 6699, 6698, 6696, 9408, 6695, 6697, 6700, 
                  7107, 9506, 6905, 6759, 6760, 9422, 6761, 6705, 7086, 9493, 
                  6886, 6774, 6773, 9425, 6777, 6776, 6775, 7110, 9509, 6906, 
                  6907, 6780, 9427, 6779, 6778, 6722, 7094, 9498, 6598, 6585, 
                  6584, 9386, 6582, 6581, 6583, 7072, 9481, 6580, 6872, 6577, 
                  9383, 6578, 6579, 6590, 7102, 9503, 6602, 6876, 6603, 9388, 
                  6604, 6605, 6600, 7074, 9483, 6873, 6875, 6601, 9387, 6552, 
                  6551, 6550, 7090, 6890}, VertexColors -> None], 
                 
                 Line3DBox[{6702, 6703, 9421, 6755, 6756, 6757, 9423, 6762, 
                  6758, 7108, 9507, 6738, 6737, 6736, 9416, 6740, 6739, 6741, 
                  7109, 9508, 6765, 6764, 6763, 9426, 6767, 6766, 6768, 7111, 
                  9510, 6630, 6878, 6631, 9392, 6629, 6628, 6599, 7073, 9482, 
                  6591, 6589, 6588, 9384, 6587, 6586, 6576, 7071, 9480, 6571, 
                  6871, 6572, 9382, 6573, 6575, 6574, 7075, 9484, 6546, 6545, 
                  6544, 9377, 6549, 6548, 6547, 7076, 6874}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{6718, 9409, 6712, 6711, 6713, 9410, 6715, 6714, 
                  6716, 7089, 9495, 6889, 6729, 6728, 9415, 6724, 6723, 6717, 
                  7088, 6888}, VertexColors -> None], 
                 
                 Line3DBox[{6719, 9411, 6720, 6730, 6725, 9414, 6726, 6733, 
                  6727, 7096, 6893}, VertexColors -> None], 
                 Line3DBox[{6732, 6731}, VertexColors -> None], 
                 
                 Line3DBox[{6892, 7092, 6708, 6706, 6707, 9412, 6709, 6710, 
                  6891, 9496, 7091, 6543, 6541, 6542, 9378, 6553, 6554, 6555, 
                  9504, 7103, 6595, 6596, 6597, 9385, 6592, 6593, 6594, 9502, 
                  7101, 6610, 6608, 6607, 9389, 6606, 6877, 6609, 9499, 7095, 
                  6680, 6678, 6679, 9413, 6675, 6676, 6677, 9497, 7093, 6721, 
                  6769, 6770, 9424, 6771, 6772, 6887, 9494, 7087, 6694, 6692, 
                  9407, 6693, 6690, 6691, 9492, 7085, 6885, 6704, 6754, 9420, 
                  6753, 6752, 6903, 7106, 6904}, VertexColors -> None]}, {
                 Opacity[0.45], 
                 
                 Line3DBox[{7142, 7143, 7144, 9141, 7147, 7146, 8677, 7148, 
                  7149, 9140, 7150, 7156, 8695, 7277, 7276, 9159, 7280, 8696, 
                  7265, 7266, 7263, 7264}, VertexColors -> None], 
                 
                 Line3DBox[{7151, 9142, 7145, 7139, 7140, 7141, 8694, 9158, 
                  7155, 7154, 7157, 7158, 8692, 9156, 7269, 7278, 7279, 8697, 
                  7267, 7268}, VertexColors -> None], 
                 
                 Line3DBox[{7181, 7180, 7179, 7178, 8732, 7416, 9192, 7409, 
                  7410, 7423, 8737, 7439, 9204, 7458, 7459, 7389, 8718, 7388, 
                  9188, 7384, 7385, 7373, 8714, 7374, 9211, 7476, 7475, 8747, 
                  7307, 7308, 9167, 7315, 7318, 8703, 7313, 7314, 9175, 7343, 
                  7342, 7341}, VertexColors -> None], 
                 
                 Line3DBox[{7183, 7182, 8739, 7448, 7446, 7447, 9200, 7437, 
                  8736, 7436, 7435, 7443, 9206, 7419, 8734, 7420, 7421, 7422, 
                  9202, 7383, 8717, 7382, 7378, 7379, 9208, 7347, 8711, 7348, 
                  7349, 7345, 9176, 8710, 7311, 7310, 7309, 7329, 9181, 8712, 
                  7358, 7357, 7354, 9178, 7355, 7360}, VertexColors -> None], 
                 
                 
                 Line3DBox[{7185, 7184, 7451, 7449, 8740, 7450, 9201, 7453, 
                  7452, 7444, 8738, 7445, 9205, 7454, 7455, 7417, 8733, 7418, 
                  9203, 7456, 7457, 7380, 8716, 7381, 9209, 7473, 7474, 7339, 
                  8708, 7340, 9177, 7346, 7344, 8709, 7330, 7331, 9180, 7359, 
                  7361, 8713, 7356, 9179, 7352, 7350, 7351, 7353}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{7187, 7186, 8730, 7408, 7411, 7415, 9193, 7414, 
                  8731, 7413, 7412, 7438, 9199, 7390, 8719, 7387, 7386, 7364, 
                  9183, 7363, 8715, 7375, 7376, 7377, 9210, 8748, 7317, 7316, 
                  7305, 7306, 9168, 8702, 7304, 7303, 7302, 7312, 9174, 7338},
                   VertexColors -> None], 
                 
                 Line3DBox[{7219, 7218, 7215, 9152, 7214, 8688, 8563, 7216, 
                  7217, 9182, 7362, 8722, 7401, 7323, 7324, 9428, 8723, 7319, 
                  7320, 7321, 9169, 7322, 8728, 7164, 7165, 8983, 9144, 7163, 
                  8680, 7174, 7175, 7176, 9146, 7177, 8743, 7464, 7486, 8989, 
                  9213, 7477, 8749, 7432, 7433, 9195, 8987, 7434, 8750, 7235, 
                  7236, 9155, 7237, 7238, 8691, 7233, 7232, 7231, 7234}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{7221, 7220, 7223, 7222, 8698, 7289, 9162, 7285, 
                  7286, 7191, 8682, 7113, 9132, 7112, 7119, 7118, 8675, 7137, 
                  9139, 7133, 7134, 8674, 7138, 7203, 9164, 7299, 7300, 8700, 
                  7296, 7294, 9163, 7290, 7291, 7295}, VertexColors -> None], 
                 
                 
                 Line3DBox[{7225, 7224, 8699, 7288, 7287, 7226, 9153, 7200, 
                  8686, 7199, 7190, 7115, 9133, 7114, 8676, 7136, 7135, 7117, 
                  9134, 8670, 7116, 7204, 7201, 7202, 9165, 8701, 7297, 7293, 
                  7292, 7298, 9166, 7301}, VertexColors -> None], 
                 
                 Line3DBox[{7227, 7130, 8673, 7131, 7132, 7129, 9138, 8982, 
                  8684, 7196, 7198, 7121, 9135, 8671, 7120, 7209, 7208, 7189, 
                  9147, 8681, 7188, 7213, 7210, 7211, 9160, 7281}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{7230, 7228, 7229, 7197, 8685, 7126, 9137, 8981, 
                  7128, 7127, 8687, 7124, 9136, 7122, 7123, 8672, 7125, 7195, 
                  9148, 7194, 7193, 8683, 7192, 7212, 9161, 7282, 7283, 7284},
                   VertexColors -> None], 
                 Line3DBox[{7244, 7243, 7242, 7241, 8752, 7485, 7478, 9212, 
                  7479, 7484, 8755, 7442, 9198, 7428, 7429, 7441, 8746, 7472, 
                  9214, 7467, 7468, 7463, 8742, 7207, 9151, 7170, 7171, 7206, 
                  8720, 7398, 9190, 7395, 7396, 7397, 8726, 7326, 9171, 8986, 
                  7337, 8707, 7336, 9185, 7368, 7402, 7405, 8725, 7371, 9186, 
                  7256, 7255, 7254, 7253}, VertexColors -> None], 
                 
                 Line3DBox[{7246, 7245, 8689, 7247, 7248, 7240, 7239, 9215, 
                  8753, 7483, 7482, 7440, 9197, 7424, 8735, 7425, 7426, 7427, 
                  9196, 8988, 8744, 7465, 7466, 7205, 9150, 7166, 8679, 7167, 
                  7168, 7169, 9149, 8984, 8721, 7394, 7393, 7325, 9170, 8985, 
                  8705, 7332, 7333, 9172, 7328, 8704, 7327, 7403, 7404, 9191, 
                  7258, 8690, 7257, 7259, 7260, 9154, 7252, 7251}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{7250, 7249, 8751, 7489, 7488, 7481, 7480, 9216, 
                  8754, 7490, 7487, 7431, 9194, 7430, 8745, 7470, 7471, 7469, 
                  9207, 7460, 8741, 7461, 7462, 7173, 9145, 7172, 8727, 7400, 
                  7399, 7392, 9189, 7391, 8729, 7407, 7406, 7335, 9173, 8706, 
                  7334, 7365, 7366, 9184, 7367, 8724, 7369, 7370, 7372, 9187, 
                  7262, 7261}, VertexColors -> None], 
                 
                 Line3DBox[{7272, 7270, 7271, 8693, 7162, 7161, 9143, 7160, 
                  7159, 8678, 7152, 7153, 9157, 7273, 7275, 7274}, 
                  VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzUsrxFEYgPF3ppREuY1sDH9MlJXViI0yyXpiK5fRsKGRHUqzw9i5bHwL
WxYoJeEbuHwCt7D1s3h63vOc93SShbXiaioiZlHqipjDPBZR1x+xxBWM9kaU
eRn1+gYn2YgZvYczyOkdnMW0nuaavQb9gO8xqT/wIwb1J37GlP7CrxjS7/gc
E/oFZ7RLvkJBu+YbtOu3XPbXqV7ojhjui1jRx815nOgjPIaS3sk/9qv6Lw/Y
L+rf5jfs6O//s5Zz92Vu8WZPryURn3qzcwpp7OqN/KE3cSv2tTY+xqZ+yEc4
07d4GxWs4w9/zjcJ
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzr8rhAEcx/GvzoI6g8HiXHckJjNhUOyHgYW6oix3OBQmGZBBsfgH/AFk
QZlYZPDzbIhdkcHG6xlePZ9737enJ1csj5RqImKSmYwnUxSZTbRFVNsj5uwS
Zf5Y0t/15taILClqWdY/9IzdwqfbRyr6m/5kV3nmngX9VX+wb7njlCZtMB9x
Zp9zwbzbF/3avuSKm+Qd2qHb3VzEUDZimG630/qB3ud3D7106WP6hv7r+/q1
ATr0gr6u/+hffDOqdfrvRN/2/pTbNBN6o+eRvqM32HWM61tavb3JHvus6sd6
xV5kjZWk8w+0Njws
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzbFKgmEYR/EnaFHIwa0h61NrcqiI4JsLGpJINyFBpKXFCKSCUiq8gYa2
oqGpK6jupTSImoRaa/LXcDj/9/DAm7QP652piKhjphCRQwZZlMsRee4nEY1i
RMV+ntP0PT7RU33brmJa3+KuvqZv2JvI6Y/8h5r+ywvaD3+j535X/7Rn9S9u
+Wtf6/AR1vUuH+NA7/E5Ur3Pg/+3/s4jVPUPfsWZ/sZD7OhjTuYjrvUiN7VK
KWLRXsKNvsptfZlX8IAX/YpP9dT9pX2BJ/2W73CPCc30L5o=
                  "], 
                  VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzs0qRAEYx+G/K0AsUGaMUT6KnVwDUtMsWUwzRVZDaXwlsxhcgJTsZaxZ
KOUybMiCbFngAjyLp/d9f53TOaXGVrXZk6RCbyHpozyR9JuDDPAwmrxp2+Xk
zn7PErul5Fnf1FfdayzS0l/1pn7j7nJLUfszV8aTX/OHT4b0I+/U9Zrv1Wkw
r69rO/YWe+yzoG/oB/YOp5yxrB/qL/Z3Pviiorf1b3thzH9wpc0Vkwt92pxk
ipo+67/P9Rn3sGdHuNSv3Y962zzmhA5PWtf8B7+WMNY=
                  "], 
                  VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzT0vQ2EcxuF/E1JlYBEvyWmdnqYGiRjE0qkxdDMw1KyJSLwlhIRdSYnR
4htoIgz1OczEdzCVSJRr+OV+nus5yUm3DtcPchGxqelixIxmdZRE5CsRx/ZE
tXLEqT1TgZ/bX23wgX3SBH+2PdX5i33QOO/aDzX4m31XlWf+VVWTZ1nEPCu7
f3v/0hpPecL77tveWmzXVvgy33Pe1x1fKUUs8hYvOpd0z1ftEt/hifPA923+
Zxd4kwcfnot45QX7w0btmDreHvm17fMbO6W8LnknjfjkQ+4jumWT9kJtXekf
USAw3A==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzr0uQ2EYwPGnQw9X0KVUWzWwYhYSg8Qk0amToaiPLmiFkcFQXxvX0Ko7
YOMOkHRxCQaDr8TvDL88T/7nvO85pbXmym4mImrkCxHboxFJJaJhbrHDMY3x
iBe9ZW9zRHh/T3/Xs/aEDHeeNfWB3rd36TEgpy2VI17tbzzwyKRe1Secr1B2
vqA9ebaoP5ufFPURfVn7SP/LuxtsUtdv9PNSxPRYxAyzrOu3+px9gXmm3LOq
n+hfzv7xS1X7Nk/1H3O4GDHEtd5xrp/eb15yxaF+Yd7rHd/N2hNqaddy9hZt
9ulpB+YZ//YZN24=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzTsvw2EYhvGbmcHk0Jb+MSAxSSoxlbEhcT4sIkUkBnYiEovDZBQjrbCb
fQ1mBnwLP8OV6871vMlbNI+XjzqSzGNsMBnHBF4rSc9o0uZH1IeTB26hS1/h
JdT0RV5Ft77J65jW17hT2+AtnBZJQ/+0e/Uv3vbXud7Ud+0pfY/3caCdcB2T
+ixf4FC/5kvM6Fd8gzP9m3+woP9ypZp86FW+1+ZGksIuDSW3epl39H4eQJ/b
u17iu/8/vS/bz25v+gu38YQ/BRgpYg==
                  "], VertexColors -> None], 
                 
                 Line3DBox[CompressedData["
1:eJwVzb1KgnEUwOEjDQk1NhVprwpBZk6BN1AIocI7RBQFNTVluApZUw01NRQY
UV2FYHfS2vfHFdjQ0/BwzvnB+/6TvXZ6kImIdaq5iAkKpYhJc5ws8yxoG4WI
sr3CEtuzEWN6TW/Ym6S0yOjL+op9lTrfJHqqj+y/5IoR09rH/3f6m/lOXp/R
17Qfd8d7bQ6p6ft6197jmBM29XP9LIl4dr/wSks/0k/1J/cnX2zpF/pUPmKO
IjtaybzUK2aZRXb1qjnUb/znwX5HT783H/W+3rffMnBfmdf8AbepMO8=
                  "],
                   VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz78rxHEcx/G32cRictyxu/sDUDqpKwbDFaE7M25SRvkRRVn8GNyRb93G
36CI7tgUZWczoGSweHyHZ89Xz+/386lPdrE2vdIREWXkMxEFTGIhFzHFRQwN
RoxzC6t6m8vI6/XeiAZG9TM+R6e+y1sY1rd5D2P6qXMb2Yg1vW43MKEf8bq+
pB/bJyjpr+nWE73SF1HTqjyPGVzos7ysz/EHHrXEmR97X//lTzzoX/yNA/2N
3/Gkd/V7w0DEod5t9+BFb7rnTxvx7dK/19oV32BTv+W7FP0+vQs7eovbeMY/
awg8Iw==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzrsuw3EYx+Fv3YdDURfQViLFRrAYjEZTkegkUsHQhcSiTkktVpFuDkMr
XAqTpDW6AY/hyfv+Pvn9D8WtxsZeIck61bFkczKZNctUeOV4KhlOJ0/2Z7pc
0tS/9St7m85oclhMjvSBfuN8yzVN/UT/0d/c7dHnQm/pv/raeLLKCu3/+9qL
/+k43zHn3oG2Y3/Qd8062+zrXa1hHzLgXKt55lOvTSQLLHKvz5tf+qPvlOwz
nLpbKCVLZsW5Spkz5xF92fzw3h59Wt7zbv4BLIcziw==
                  "], 
                  VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzE0rRGEcxuG/+BqYwRJlFhYcxUYGK9sZJWzNpJQsUZKymD1ZeKcUn8AU
sZCXTDOiWChfASVci1/3c65znpOeLI4V6iIir6Qpok85TbQw26P2tohee6E5
fmnHleFZO6w8H7Gj6uKLjRFLSviyLWmAl72vaoHX7JOG+KE90AzftXvK8lu7
ko6Y53fOg+zePmiHTTVHdLdGzPJp53dd8y13PpzX+Kt90w3/sonv1/m3c33K
f/m27xucS/yX/6nC9/kP63fniB3rnG/yT37i+VRldmY7/GODd9pHz1e8Yqta
5TX7rBf9AwFLQh4=
                  "], VertexColors -> None], 
                 Line3DBox[{7742, 7743, 7857, 8816, 7858, 7823, 9277, 7824, 
                  7864, 8818, 7865, 7842, 9278, 7843, 7850, 8814, 7851, 7853, 
                  9279, 7854, 8580, 8815, 7855, 7856, 9284, 7882, 8597, 8864, 
                  8022, 8017, 9324, 8018, 8019, 8863, 8020, 8021, 9341, 8012, 
                  8595, 8862, 9010, 9322, 8013, 8014, 8046, 8874, 9461, 9015, 
                  7658, 7659, 8923, 8617, 9472, 8234, 8226, 8227, 8922, 8233, 
                  9471, 9027, 8235, 8924, 8236, 8256, 9376, 8254, 8255, 8929, 
                  8245, 8246, 9373, 8241, 8118, 8119}, VertexColors -> None], 
                 
                 Line3DBox[CompressedData["
1:eJwVz0srhGEYh/G/fA6HYcQKpQyNJFMWLGaytbN1TlnZWFg5LDRFM5Ele8cy
KCsfwYIt5QtY+s3i6rq7nvd53u7C8sbiekeSGirdyThKWOpLJngSw8Vklu+x
pd/yIab0I65jRT/mA5T1ZlfSwLR+ymeo6C3n+4VkW382v2BGf+UT/Vyf70kW
sKtXua7f6WP9/qPVtFU09Gt9zbyjb/Iv3rVLZ39a2Z1v7Qdf7Z16k84Be/Eo
BvGhX/m+aG66M8Sf2giXcKHNeefGG2/t/fkBe/ojP6GFf0RNM5o=
                  "], 
                  VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzr1KQmEYwPGnpamvG+jD6hK6j8qMgrAgcEsdbBBaCupELglCUEMphks3
USAEDak11R60WEPhVvRr+HGe53/O+3JS28V0YSgiMqSnIrKzESueGVZZpjwX
8TYfsWhe4nQyokpef9Xr5gYnVNjRX/TEfEyNcipiX+/rT+545oIDfU9/1y/t
V9Q513e1G/+zOR2xxYLvCtqZd019TVtng5Le0nLmL74ZUNUf9YYzn/Y+Hxy5
6+f/jD4xEzHGOIn+q1/rI/ZRavaeO4bN987ecseh3tbb5gd6dEj0rucfMAU8
sg==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0Dsvg2EYgOGn/oLDphR/wWhUZkuxSDroIMFEIkGlDJYOElJLE4mkI4l/
oEkN7dcFSSUkJRKLmCxOiavDlfd57+/8ZfJrc6upiFhkIR2xNGa25pjnht3x
iPeJiGtznQYzbOqv+qw5y9Gwc1nRO3rRvM0OZfb0D/3euXfUqLClv+mn5nPO
KGUiprUN75PYN2mxrlUcq+nLIxEFJl1f4tOxvP0LXZ7Z17/0b/Mvf0xpZS1x
jx/7vlEfT4rj3vvpQ+Z+BjjRBq23etWzL1xzSbH3T7Qrc0KTFgd6Q2+bn+jw
wKH+aP0H7n1DJA==
                  "], VertexColors -> None], 
                 
                 Line3DBox[{8364, 8365, 9042, 9393, 8366, 8367, 8946, 8368, 
                  9044, 9394, 8369, 8376, 8947, 8643, 9034, 9380, 8282, 8285, 
                  8933, 8624, 8283, 9381, 8284, 8309, 8936, 8629, 8305, 9384, 
                  8310, 8295, 8935, 8296, 9037, 9383, 8298, 8312, 8937, 8631, 
                  8311, 9385, 8319, 8323, 8970, 8660, 8512, 8513}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{8384, 8379, 8380, 9396, 8385, 8394, 8950, 8395, 
                  9046, 9400, 8393, 8271, 8932, 8622, 8270, 9379, 8276, 8358, 
                  8945, 8641, 8361, 9392, 8355, 8321, 8938, 8627, 8303, 9386, 
                  8322, 8329, 8941, 8330, 9040, 9389, 8331, 8335, 8971, 8661, 
                  8514, 8515}, VertexColors -> None], 
                 
                 Line3DBox[{8410, 8408, 8409, 9402, 8407, 8404, 8951, 8647, 
                  8402, 9401, 8403, 8498, 8977, 8664, 8548, 9426, 8546, 8547, 
                  8980, 8669, 8562, 9427, 8505, 8417, 8952, 8648, 8414, 9413, 
                  8412, 8413, 8966, 8657, 8489, 8490}, VertexColors -> None], 
                 
                 
                 Line3DBox[{8422, 8419, 8420, 9403, 8421, 8495, 8968, 8659, 
                  8501, 9416, 8496, 8497, 8979, 8667, 8555, 9425, 8499, 8500, 
                  8978, 8666, 9063, 9424, 8554, 8477, 8962, 8655, 8476, 8485},
                   VertexColors -> None], 
                 
                 Line3DBox[{8443, 8442, 8440, 9408, 8441, 8524, 8975, 8523, 
                  8522, 9420, 8525, 8445, 8954, 8446, 8447, 8448}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{8454, 8453, 8451, 8955, 8444, 8438, 9407, 8430, 
                  8431, 8953, 8437, 8536, 9422, 8528, 8529, 8976, 8530, 8540, 
                  9423, 8541, 8544, 8545}, VertexColors -> None], 
                 
                 Line3DBox[{8455, 8956, 8433, 8429, 8428, 8432, 9492, 9113, 
                  8436, 8526, 8527, 8535, 9506, 9127, 8534, 8538, 8539, 8533, 
                  9421, 8532}, VertexColors -> None], 
                 
                 Line3DBox[{8465, 8461, 8462, 9410, 8359, 8339, 8942, 8636, 
                  8338, 9390, 8345, 8360, 8948, 8644, 8386, 9397, 8336, 8337, 
                  8944, 8639, 9041, 9391, 8353, 8354, 8973, 8519, 9060, 9418, 
                  8294, 8290, 8934, 8626, 8289, 9382, 8287, 8288, 8940, 8635, 
                  8327, 9388, 8264, 8265, 8931, 8621, 9031, 9378, 8260, 8261, 
                  8959, 8653, 8466, 8472}, VertexColors -> None], 
                 
                 Line3DBox[{8470, 8957, 8469, 8468, 8467, 8654, 9496, 9117, 
                  8259, 8258, 8257, 8619, 9483, 9104, 9039, 8328, 8325, 8324, 
                  9484, 9105, 8292, 8291, 8286, 8625, 9500, 9121, 9058, 8520, 
                  8517, 8662, 9505, 9126, 8352, 8351, 8350, 8638, 9488, 9109, 
                  8388, 8387, 8389, 8390, 9487, 9108, 8341, 8340, 8342, 8640, 
                  9495, 9116, 8464, 8460, 8459, 8463, 9411, 9053}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{8471, 8958, 8317, 8316, 8318, 8632, 9504, 9125, 
                  8314, 8313, 8315, 8633, 9503, 9124, 8308, 8300, 8299, 8297, 
                  9480, 9101, 9036, 8307, 8306, 8630, 9501, 9122, 8280, 8279, 
                  8281, 8623, 9479, 9100, 9035, 8375, 8374, 8277, 9477, 9098, 
                  9033, 8370, 8363, 8642, 9485, 9106, 9043, 8371, 8372, 8373, 
                  9409, 9052}, VertexColors -> None], 
                 
                 Line3DBox[{8474, 8473, 8475, 8961, 8457, 8456, 9412, 8458, 
                  8652, 8960, 8263, 8262, 9387, 8326, 8634, 8939, 8269, 8268, 
                  9377, 8266, 8620, 8930, 8267, 8293, 9417, 9059, 8518, 8972, 
                  8510, 8509, 9419, 9061, 8521, 8974, 8344, 8343, 9399, 8391, 
                  8645, 8949, 8347, 8346, 9398, 8348, 8637, 8943, 8349, 8362, 
                  9415, 9057, 8658, 8967, 8492, 8491, 9414, 9056, 8493, 8494},
                   VertexColors -> None], 
                 
                 Line3DBox[{8481, 8963, 8450, 8449, 8452, 8651, 9494, 9115, 
                  8439, 8435, 8434, 8650, 9493, 9114, 9051, 8537, 8531, 8663, 
                  9507, 9128, 9062, 8542, 8543, 8425, 9404, 9048}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{8483, 8964, 8482, 8487, 8488, 8656, 9499, 9120, 
                  8418, 8416, 8415, 8649, 9498, 9119, 9055, 8560, 8561, 8668, 
                  9510, 9131, 8551, 8550, 8549, 8427, 9491, 9112, 8398, 8397, 
                  8399, 8646, 9489, 9110, 9047, 8411, 8406, 8405, 9406, 9050},
                   VertexColors -> None], 
                 
                 Line3DBox[{8486, 8965, 8479, 8478, 8480, 8484, 9497, 9118, 
                  9054, 8553, 8552, 8665, 9509, 9130, 8557, 8556, 8558, 8559, 
                  9508, 9129, 8504, 8503, 8502, 8426, 9490, 9111, 8424, 8423, 
                  8401, 8400, 9405, 9049}, VertexColors -> None], 
                 
                 Line3DBox[{8507, 8969, 8506, 8516, 8511, 8508, 9502, 9123, 
                  8334, 8333, 8332, 8320, 9481, 9102, 8302, 8301, 8304, 8628, 
                  9482, 9103, 9038, 8356, 8357, 8278, 9478, 9099, 8273, 8272, 
                  8274, 8275, 9476, 9097, 9032, 8396, 8392, 8383, 9486, 9107, 
                  8378, 8377, 8381, 8382, 9395, 9045}, VertexColors -> 
                  None]}}}, VertexColors -> CompressedData["
1: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
PSd9aW3HtX1PjCv4xQM5G/XaoN/tuHOx/e+kBTyUT9r4lpZ/TP60OEYfk8N/
//9/+5dWnrT0ae0Cw2njf9q4mjZfwOYF0zdB+x9WdFjNO21cLej4mba+iBWO
yUHQ+kBrR6z8ANYv1p6VvmF/af0kpoes8jVMD2n9CdaeVXzLan+AVVzd2dZr
2n0Y2nmkpc9q34zVuomNF+Of1bqG+VVB7+/Rzoug5Y/hmL+lXUdYxZ+09LH2
HSVPbH5ZyZlWnrRyYxWH0Mb5gl73sb/YuDpbvRCrOkPa83daPlnVrWE4q/Ms
VjhtnYOg82vsL62dYnQwe8H8ISYHjP7fc5m/5zL/G/qd7byms+0n08YtHZXv
CzoeoI1LsfnF4klWce+/9V6hoO8P0soH80t/78GxPSdl1e81IbO1tvU8qNi9
ZfsxMS4cOmxa7NW3EBIn6UfebuTBfqumORpetRB931xD1AV/55D29zswHOOH
1fuNDi9Xyvfl8sDEu9Gv9hAXpplPPdv3Ef14jdx2xWZW8yD03qans79xQXTE
hHm3TYs63Xhp+cTkg9Fhdd703///3/6lXRc62zpIG1dgfpLV+oj9pfUPtPqP
6RWmh7T0MTqYvXzboynVSHDFmduGxveqhR9ZKzfu4eJ2dHdDrrnYDx44ljic
1RtfDU0HvdyM3fDf18BwrF/1cHnrcZ94EDT8o6jtlRrQEdocVj+f/h1UjD4t
nXkfWkMdCW4kt6O0RaMGdg7b+8MmMg8OjKgXffGVB2XfPj299KAaHi5ynZql
irfH6GPj7Wz3v2jvzdHua9He16CVA7aPRHsPizYvY7UPjI0Lu39Be4+D1f0O
2vsptPf3BX1OR3vOQrvuY/wLus6Hdt+ANn/vqDoQ2niMFX1W+zC057ms9rVY
6ZWg70HQ4th4Be03WJ3D0s4jrRyw9Zr2/nVH3X+hxWn34f/ea+uc99oEXc9P
ux+F9Ut7zivo81NW57y075p2Nv5p30VhNV8ddX+c9l1iWj5p3yvoqHmnzWto
3zVi9f4Ypoe0+ZSg6xVp45w/pY6xo+q7WMVRgs47aOVPmzd1tvrbjrovQ5sX
C/r+C63+Y/pDmy931H2Tv/VCnbNeiDaf6mz3nTvq3oeg7x1jdLp1bfvXAGMt
x5CvHNbKriFfFop7erT9q4HlhUvJlwdPdaLIl/6vxd8mtP3jgq2xNflK4NRN
L/JloDitPAWNC3q8gsbn/dc/Diza0vZlQtW7SvKl/sfhTd95bR/01JMhXzVs
OLmefLkoPm1q2z+Sj8iGk68K9A/qkS+bGZ7blEM+Hizpu5h8tTCjaRr58lFc
0PwIWv60dkdLX9B2xMqf/Cl2Kmh7OZXlRT4eaD4fTL5G4ErWkq8Mxe8U3yYf
D8qKSslXD9/CvpKvhBmOyYHW/wuaz/+0uILWTjE6gvYbgh4XK7sW9DqC4Zgc
Omo96ii8s8Wff4pd09pFZxtvR8mho/COync6W/7YUfifIs+OstPOJoeOWncE
LQda+rR5h6Dz9862b8CKf9r9h46aF1r6tONihcdWPycfDy7+ukA+Lqgs6E++
IhSn3efpKHnS9suKvqD7ZbWOsKL/p+ttR9Fn1W9nwyMqn5Cv/bxpv3jbVyNw
PLUhhXzt+MKQBeTjUuOCpi9oPv+t8q9priZfOz7MYij5Gv7i/z/4tYKr5GvH
b9kEkK+qw3C39GPka8dTIpLJV06Ns7ILQe/n09LH5EZLR9B4R807Kz3sbHaK
6TPWvqP8PMZPR+mhoM+tOso/YO1Z2ZGg7etPx/+tcmOlJ6zsoqPWwT99/eps
+ci/Nd/B+BG0H6bFO1s809nyU0GPq7PFObT0O2rfo7PpSWfbDxH0PglGX9Dr
oKBxQecFrOyuo/KdjsqnWOGCjq/+rXrb2dYdVvPe2fbHOts+Bis5d7Y8qLPh
HWXXtPvkgj7/6mx+rKP8uaDPW/+eO7OVQ0fdY+qoepiOqpPpqHFheEfVqf4p
9zg6W92poOtsMT+Atcf8kqDruGjnl1X7zuav/hS8s60jf/q6zKpfbL46alyC
jtM6Kg78U+LSP8UP0Pb7p9j1n1In/KeMS9D+gRWftHFgR9l7Z/MnHRVvYOOl
9VeCvo/cUffaaPPHjuKH1v90tjy3s91j7aj7sH9Kft3Z7qH/Ke9gsMJpx9vZ
+O8o/D9tn/nfur/d2fbPWcmns83j3zjh/0080FH0O0qvOirv7mznQX/PfTpn
XNpR5zKCzpf/rXnxn1L/+afUj2F8drZ7JX/r2P8P3tnqtzsK72z1hB1Vr9jZ
7qF3VN04q/uMgq7DF7T8/9Putf1dX9jes+ts9/j+FD3pbPrZ2fTtT9GTv+//
/PO7K53N39La458+rs5mv7R4R9WJ0erJn35voqPqajpb/VVn86us3j/pbPl4
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
8x7l4JemvOYK37pzj7ft4FCSDxosnfZclm/dmXd0XE8Zkm/anRkpZ8G3Dv7W
W2jU7x/yTSxux+y98OXbjFQi/5NdpKOKiV1bPPrWsPg5vh6Nn3xj7wriZ2JT
e2xTJnG8X3GX8e+InxEXfjy4N6GvyfU8sz+lAXYbH5Tt+Q/+pPajxBAPgpcv
kVtVS/ybYrTUitXEv9nuPZnoT/pd9sTLNKK4HjZUy4WKt/XbFJFkzxc/TDXZ
/+r58mqw1QpQfcin/40tF34ldquBot2lmiV8cUhtqYF5gDgHJB4lOmrwxTOn
z6w4+fAhB41/sDgHs2tO6YY+R/jst7nf1+ufRbkg13/Jxvd883IzTTFPOBjP
FzzXe+/4xmfvl8Iix+aH1EDUzQOvDfj6NVmfa1e9rBalg41r87Iqh0188jzV
8N1Cf0U19CqXSinlk9sE12iuqgQHpql8H6jJR6dCt2DgyDAO3H4p228LH52S
U7vrHxM6ZqYTd5Xz0TmiqXfwEqGzz03j7RB+fgotwu+G4fLH5Dxgtl/sUT45
z4h1GL+V+MnX6c+Uf/DJrW6JzpvFxE9+6nFv0xQ+Oue6L2lZSfzts8f9s2YS
ezfe6n1sti4Pmgcfm3iP2Lu342jnVmK/Icd7Bj4g636ut3Cvpn+w94RLt+I8
+Pxnyw6fEogqR+MrlXOHNu4h8ZVcwLlVejvrIO/quvvNJL76aOnbZwyJ0/bE
9Ha7ROK0izuXr3YmcRoW12F2uvl2sqo1sdMgyTNf4kg8sH3f5Tc+g/F1X1G7
2TGd+IH9k30NjhE/MG6+j5MK8QNT7cuTlEh7BXUFZQ1i1ws5vW/m/kOcGflh
7fZRBPdw9e7ymfBfqT8UPhD+PcMdB3DJ/H683HPIkrX1ECCr8m1/vxKoGrHw
1S4iBw17uRJvIgfVteOOrqnD63kwPDB+sMpOQmfiaI9ltYSOvZawbSah43RM
7/1Iws9Vk+6HZhM+tUSa+9i44vI0rAh2ncTnt/fUHR47R7oc5McNiTUjepL+
/vENgwk86JupenfFkjKo/qq/SYKsCxOrxr+5FsSDXwYXj/jfwPUEW++ebRg3
dBHfelekfGh/t3B8XV7zwdLlDd866xw6tUe9TQV4j5iVLc1Hf9Ram5nfJStR
P6x1TLvwFR+dcT1eOm4ldCzi+2pL8dEpjysPPSCJr9eurWLOC/j4P7lbuPbE
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
UdvFVw5EHQMO4ZpQL7VJ9OB06lmijgG7j8QW8r34gEfJGeXQ7lKIjBu5js3h
xQQ1eYshlL1tzZoo0n6qIkd4/87kceQX9Kg6lWQH1nKt4ga6YaTO67Y5hYQX
CX/ZbgK4gUbahZMk/dYc26+Xmw2hqYcoL5qkf73Zs+Zk0L+FysmGXN/J7i//
qS2wj9O+Jm5JrlurWbn3svvrUcQlSJVDXr8WRQvHf8I69SjiAge5nmfYz6JY
JcZh9C7mR1UpSV5E/5MHR8oocr2fsK6LtO43bTpocNBwArEJb0r9CPNaxc0o
rHJ+FDVQv2yrOdKJmnJ/0RP3gAz31HAQ94D4KzyykE4nCn7xQq8H4smb2vrL
EdwjaM2ZuFr2yTa0Z6u3awdJf4h/RVGVwQSqeTju/5C0XpvO1g48sRhAd70e
XCGvL/tP6kkeg/VFxVGtllz347f855VhlgNIcC3viQhYT/Vfm5WKF0wicQ7z
84lMX5Ex28muiyQ9P0obogezetHa7SaXyPVGNINSG69m9iMmKm6xMJL+F2FH
vDaA/s4S8WYdkvxir6QKK8ifUEyUkiP5VXjGrt8G4Of1SjNG5PqQusNhm6JS
x9GSd+cLch3Rv9HZ5omQv0U2lL4i19GlVeO5JwDytjuOnCLnGxoGquwlkA/I
fj+2nlw3KfqJSGsW+C09HfE3gXaZScGvF9mtPgG/RnTzBvE3jMw7TODXit7u
yYNfHar4SPyNIptDVvDrRnfibsOvHqsHJ6/z//8NIgMX4teABir74VeD/Y65
yj7ibwplr86C3wDae0kefk1YHNcu7vvFuP7ieP4rHMcfxweHL9f+y+3vcsdx
uXyW64fL9Z/lfo9+uf6GaxeHL7e/y52PRUPv4Af56mIk/CDe6vHBrxPbX5z8
cr87/L/+/juu3eV+p3u534/+V98pxrX7v/4O+//6O+Y4/cv9zvu/+g71v/p+
Oo7/cscdp3+547hcf1huv5bLZ7l6luuHOD04f/hX8wIXD5cbV//VeoGL8/9q
PV1u3oWTX659losvd1z+1zyXqwc3LsvljxsXnJ7ljiOO53L7tdy85X+dhy93
3i03D1wu/q/yeZz8cvXgeOLGfbn56r/aLyx3P/Kv8orlru//ar1b7jq73Hz7
X9nhX7X7r8ZrufuUf7Xu/6v8ebn7o+X623Lzuv91vvev9o//yp+x349ez56c
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
9H1QDXmsPUPoKN8vWK8bhCtzj0Ge1NiuReyH5NBGOy8DXMvdR8cH8D/mzT8I
+cozg0asgOccNQyKATx4UNYB3wdQm9Tl3gH6fI+9rII/j/517GG4IsTz+Mft
w/g+wK6gJDd+wFtfKXF2YXY4/qZpoB3sE5utoY3v614yLU8tBPsYCqwpJ+JT
Im+99DmIt2CZnNK7EG9ZVN8RsV+RceXewkeIz6GFH2H5EG+FP4Ya8fg3u3Fd
dCv0TZH1NLN4/R/x+mtQPPAvCxavxOs6JXoe1hKwp0qu1JaXmD0rXN9vuAL2
VGyeyMPtvKKg/pcu4DOlz9bgPJkP1Bv8gefU3S/dOM/Z7z5aSSCv9vzODRwP
EY85EAS4rw/xN4j023RgNKN3B7Jh1FKMr6Qh/saQqN5eGD3IhPkCjHpS+dIS
4m8YnVM+A6MTBUT7w/hCiqv//79+dNKaGHWor6wXRjUpLi9H/IG/mNNh9CEp
N0kYDaQ4GQ/ZvMjkyfQn4yHDKbVDfEccDLhft3fBGEWzaT9hdFIsT6nfyfiX
yu9L5celwimdF6X2/Nc8lM6XUn9RGuf/Gv+v7LNU633y1wQxEJMkI4wBZOZn
CqOJNP4plSfDmyYbJ4nzKLQ4T8EYQocm5WG0LJk+ZPxkOKX6k113qXBK1yPZ
vPIGPsCYQKHzT2AMo02a3DDalwyn1M5ZvZkwsP09WmIMkuLVY9A5YnXIiWRN
GMMUy5PhgzMDMLC6Wpsfxhgp/qz1KYz/wWPPxsDoQ3dr78D4H/xzVhWMHhRQ
719PfKdm54cdMMbRMN0QjG5SHrLrks2XjJ8MJ7svU6onpXaglIdS/SnlIdNz
qfRfqrilVE9K45nS9fhfrTtK7UBpnC/VeiGTpxT/r+a1VOudjJ/SdUGp3Shd
75Te1/71/fG/qkMo5ae0j6C0jiXjIbPzUtVRS2W3paqflyqu/jUPpX5ZKj3/
9fol059S+aXy+1LtL1HaJy5VP0t2XUrjkNL8s1T9/lLtV/zr/Zl/vU9Fhv9X
9zVK+SnFKY2rf71vQ+m+yr+O26Vad5TmGUrrW0rrz6XqEyntr5eqviXrpyi1
AxlOKT+l112q/Zml0ocM/9f7b2T8S7Wv8q/3Gf51H0epHSjVf6n2c8jkyc4V
ITuHhOw8H7Jzoig+D4fk/QVKz2Ej+/0zpd9bpPR9f7Lf25P9vprSc7HIzgEj
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
YS/xfdmA/z+I6AWr
               "], VertexNormals -> CompressedData["
1:eJztnc3RdUcNhL+CLGz8UiwgAWIgAUKgijVrsiALwiAXIoEFXvji8fxJ6m5N
r57y6/udq5FamhmdOef+7i9/+/Nff/Xt27c//P7bt1//l7/54z/+9M+///tf
n/zhf/z+479Hn2fhyM5o+1X9Ux0HNv/8kGTPaLyf/B48fhXO/JmlK7Z4fTXN
06j4jj4f5TcWHajF16yJa5Uedj+XrbeseVwljqt+mdVX9PhN0/z//PV8fee/
03VjVLx2rz9ar0ath7P3U6j9mnkWp+jrsuwfs/M9287dOlaVj1l+RsWRrS51
89tIb9H9rFWdf21+ftZHQuU1Wg+jz1fvx9nyV93OXWb3pc03qJoPI/2z5YX7
flh/7+qHlaP72aq6YpuXd/Wwu66+vU+6u56s0nd2HHfX/5+f/65JvqDyczfu
0X8f/f/q/uquDmffm31ftro/kx0XlD2ovn3UdbL7M9nx/fx3szqQdR/n1D9R
9ba6vqPrT9X4UXpmvw9yu15l0fkqs+//fv5/Vj90zfdV+9X6AmzcXc9n5y+a
s3xXy5dqf72yT0et/07rHqtud/Wjsh7rzll9fN0/qszu87DVpS557bzT0sko
Xp9/z14ns67Do/yvnteq8TI5ebtf65JHt32/3T7Jqt+q5/HT9R56v599P6SL
zqPGxRJ3Nj2h8vTrg7d53ZUqfsjOryw/7O5XPj/3Oc7udeY2Xqz+Yc8vlnyJ
zje0PZ8c5fVsPJ86UhkvSlfZ51tQ52rYrp8dd9Z6vlp/Tv282v9Ej/fWT+jv
R59Trco7VF3N9iebnVX3I9B9pWjdZtf/0z7Abj1n35+y5RHKfpQfZjpBr7tm
zwWg6nn183/oefl0n/j6vNy1fqL8pvIeuag8OvX/6r6MLV9Qccm259Rv6PXN
qj0j/UWNN8oPWf0K1D66Kk9345e1jlq9PlvesJNlP6WSX6zcHX9WPexK6y2W
o3yujhdrHLP7eGpkjdNpfVCpJ1V2osZfPQ+u5vWs/8eqh6p1SNT3ovNrZt9p
v3l3vqvaJ7Je/3adMDoPdVsHWPxjmiaOave5qvyR/ZyvGlnvL0TNd+j18Ox+
2+1zhWaNfm/zPVrPWc/7sPldRR9qdYmdbP457WPc7p/V1mPq+3pVfXal7+dy
6n83P9D2sBOlZ9R7h9Tyd3Z/5XZfUL2uQMU3W2+f4z99Xtn8Zf2j7WHRc5RO
rcM9/c3yOnrdqBKX3TxVGRdb/po58WGxwzrBxov9fI6KTm7nu6xzZZ/XW32/
GNqfKuzSN8teJ0fd11Px5y3Z3lO96n/VuETtu6P+vYrO2exbPXeFtlNFz6uM
qlfs+s9ap+1+7+f7WNB+6U42Harbear37PrDxpkfusRbjVHzlLpu/ftKZmW+
ZV3XdRQTT9Z1/qr+fvz7d8Hft1r3qs57RI+L9Rwnuw7N2Dhn1Z/T+0BV73PY
Pf+G7ot2qzOr9qvq//R7X1mPqczXrIx6z4kKV/PCujKZGXVegk3nqHP4UXVD
xc/V/kK9xwA9j2XFPeq84e05otP4Vu+DZveb0TrJ9tfsuuj3H67+f9+v34uj
/bTmN9Q8ZWLijbajG51H5su0/rW5ex8Hba+KXabJTLY+wOp9PbTfdseDtsN0
XDv5p/o8SVVduu3rnto/s2P3vUxqfWb3Cc/8oxLf0zzM+j1Z9PjM3rTOetBx
zPVPVn2+PVfANl9k+cXrLtPUo3pf7pRd6lX2e7DZGWV/th92+zCouNz+jqma
fth0YnIz6ryy2vey6jxqHo9eD+w+V2uaFfT8ZTLr7RV9zs7lZT8H8YqfWTha
B2T/rg3LeF/T4ewcdbYeXAc086ab3Sp2vs7Xzr2wPC/M+j2n/qnWR1d9qjD7
eTH082jWE4e+0HaYbzLrvgB6XF3Ifn/K48r1D9oOdbKtn9nsMU2Thyz1Qa0u
db/fNLIP1TcwNfLR5xPMSr114evjr/ID2s/V969en6/Z5xfW+4CvkV0nHm9u
vr0yfjS7z++mNtX1g35Px+p1Pe+YzHS8etPxzfFn9HNVplmhW7QdbKxep7HG
gW292rWudh3Xa2SLI5s9u2SrP592+f6Fad7nEev10H5hq3uv0P43GWkdavuZ
JX5s56O61luV9x6o55VpRuSdaZr5eYm2wzRN8zV6XWRG6ghth4mNe/d68tp4
TTMjf5wvGL+x+Z/Nnqzxoe0wTevTNE3TNE3TNNcY9T7Trvtc0zRN0zRN0zRN
darv+0bvJfD+0+xAdH7t1o3X37fMGi+Ti+o6UTuvhf6ds6znoNl/5xSl86rf
pWL3v9mDu++1Q70Hb5Y/qPUhW37aHtM0WfJOZZ1m9tIhW7y9nnf+mniyva/P
POOP+1DH76d6RtsRPR7Xf+ukk/2m2Zmu2+bL7Kp71rxmsYPVHvthj2r7ShU/
n54/Wf0cW12K8pf6uFb73mrnvlSJ8s/nuRHHxVzRyUy30Xq+vb7vd9fYmT3e
7HNuVefSTv0z0/9pXoz+3eg6qOe+Pu1R//1fFKP8plLfRnrfzYtdf/528zqs
9XBWB1jjrqbP6viy+b/6+SA1Pbym/2iy+MFx0WLV/uizLkX1vbP36dF1vro/
mX19VBxn69jbfWi2n6PXn7e6itJ59LpuFm90HrHl4+51RvH6Gvz7KP+z/R0V
r924nNavW/vU8+7Unix/oucXFWb7/5X9clW+mDlxQN2XqPre3b50V9oPPZh9
H6r7vN+NjsvP+yPqOlH7G9Q4XuHqvjE6viZHvrJy1gezP01mRs+DaH2iz/9k
2Rk1rup6dasfFl2pkyXu6Puqpv1sverYifLD59+zziegx7n7efQ6YWSn+2Pm
CdXz2tRklk6izymh/ZRll/ebufqx/Zx+mP1dpQ6gdaJ2jvHWT2g7TNM0zTXu
rmNXP8fW/zFj9YK2o8t42NbTat97ek4VHXcWv5s9+Kl76ykn77L9Wj0fsK3T
rFvT5CX7OmrVbtN+M03TNM1X6fndNPWocm4E/V6vbv3Q7D7v6f6+m59fy1PW
cUWf4826/ux9ll3ibmLzOrvem6Zpvkp0HWd9z97ILpXrR9nDFhczNs6jv0f1
MXZ/D3T3+tX6rK6Xu+OK+l2M1/dx0e+bzarzu3ZG5ZHnBQ1m95Oq8oLt3GZV
3FjWh+ZPqdIHNnP9jZoHb3/PSE1fu+sWtvlCZb1UfZ8L7YeqPg9L3E+f/0HZ
n33fnyUubHkd5R/2/syqH27rQ5QfTvtpt/09tryO6o+p51d2nayKf9XvZUfn
9Wndqap3LHpgsaMqH6uuP9M5mtnrt9X8Veunze7LZOVX9DzE7ufXiV63oMd9
m4/sZOuDseoqu8+1259U0Vv2fGRq50PUegLtD/T3mtz072WYSszuP6D1G923
77af9bh68nZf+6rfsv2s9n3dyTJPRdn/+v1Ecy2eUXVFpa/IxtnvTa/GY9ZX
zO7fZPVl0H1gU4O3OkHryjrnZvX9IPR4WWj/1Oox+/tU4+f1bUycVePfjV36
e+p6YrOfzZ7XaP/35ivxnfW10Pap8xUdmeZNPjhPavzu/oz973GZLLR+TNM0
zUxmzyvq11fl7vtDVq936u+RPSrrHFa7TNO6NlF6QJ3jYZ8v0FTtJ1e9v0Xl
eZDd52KixsXuFzNXb6/qo8v8cvvcDdp+0/o38RytP0b/H22vdf4Ws3+PD51n
aLu6k2X/iI7rLI/Qfq7+XhZ2ec6lK6vrwO758+7n1VXXn9lExT2q3mbXbfX7
0Spk8R+LHWxUvU+kZqeJ1Ue3/lW0f6r3Za+wyk+365bbddpof8qeX5/rZJV4
sfC0X+Y+Rm4css7rntrHpnOWurS7D83et35e5/P9m94v9yQqvqvXP/1elX7p
yA+39rDmadf+XtR959M6PPr/p/aw1f/ROgddP7Pr0q5/Tq/Psi5Srz9s887p
/otNB6z6ZLMna1ys/o/WT/bvmarcJzVj9ba7fkPbb+7F9/bf787Lp/uLqPF/
LdqN6qtnn2s0tYjqM6yuJ6L7Bll9Y/Q6MLruzT7PUm/Z9MPmBzY/q3F1XRr1
3E1WvT2tw6i8ixrvqF5l53VU3Hd1xVpvq+sCKh+r6+7o7+h1iLqfb9eBLHpY
jc/sc7d9GHRdyprn0Do1c+Ja1efv3ucc1RHV8UbXMdY6ojaPs+kK7bes70OP
K8rO2foZbX92fqDtYeNIH9n7WceFK+7Rn0eNZ9a3ZPHn7nVY/K8yD7KQ3T/Z
us3+/tG/Z+sDO79iqP4em1FfbtZ/QZ2rj64TWfZW73+j62Z2fL3ezuXq+Te0
HtieR2Ajm//NmrioUa3P+Xq8zNq8sN7MSr1l6XP3c9XzY9R6hm1dpLbeYLfP
ftCmml9H+fv5HovZddjqkkqc1OqnaZ0wUK3/jubsvj9aV1nnZtHjMk3F/DH3
/O46E8OufRJ17urcedGTr8cR3Wd+3f8s8WWldabl5+zvzbLT6yvT+jFfpedH
+9nsx1f05v6M9WCaZg6jntd1fTZNfmb15V6tA6+MU4XVz19nj6Pq+XHW501G
57vZ8o7NHo+rxi/d35+pxqj3NnSJF4udPpeF9SebHlj99rp/zD2dnOon6jkX
1PuyVsd3mk/Ow9o4oe1gGbd632DXDq+vTDM/z7zONH+Oo/fGou1Sfd/y7Pqz
/GRZP5/qZ/b3Vb/M/LT7edR647ZPwpKP7PmVZe/t/pHl90/Z/B/9u6JZ+b4b
l6z7MqvXz3qurWq8LPnretjb/1F50Z1Zccx+b3zWc3Ms8a+2o+o5RPcpNPSQ
bZ/6/Khuv9mDKvc/uz3nnrUPY4kXq55mfVZ2+1X8reYPdqr687TPyTbuXTt2
3/uebR+LH1XYZX2eNd+9ytW+N9pOlTrAZs8nu+07TG6q6I2t7rHZc2q/6jmf
0XhQ/lPTm5pezVi9jtaVaF2o19Vsv2TpYVb/0XFhOT/J6h80Z+ONXmey1CuV
fGdlVhxZ85FFt6z+qc4X9DnSXT1kz4PqOnhV/6txZKk/Vfpku+/s/IzVMYt9
qH5atz5etD/Q9nTl7nrl9nfq0ePsuk4wc/OB5f4au27Z7WMbL4uu0H4wTev2
Pfuzxxv9vATrfavb8ajvN9H3MdHjj9aB+rhYdWP2oM/haPE/afcp4g==
               "]], 
             Method -> {"ShrinkWrap" -> False}, {
             Axes -> True, BoxRatios -> {1, 1, 1}, ImageSize -> {300.}, 
              Lighting -> "Neutral", Method -> {}, 
              PlotRange -> {{-1, 1}, {-1, 1}, {1, 2}}, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}}], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.879", 
    "parsetiming" -> "1.545", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa540622ffbf4ch7750c1a00004fhb5a0fh056c5a2", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "33", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa540722ffbf4ch7750c1a000064gc9fieghbg1edh&s=33", "version" -> "2.6", 
    "profile" -> "EnterDoQuery:0.,StartWrap:1.8792"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 45, 54.167085`8.486310439103262}, "Line" -> 13, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "3DContourPlot", "3D contour plot", 1, 1, "Input", 
    "ContourPlot3D[a + b + c, {a, -1, 1}, {b, -1, 1}, {c, 1, 2}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "Plot3D[a + b + c, {a, -1, 1}, {b, -1, 1},{c,1,2}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{449., {45., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
sYlDrHw3ykI/aM6BQmsdomzs4WO/PMe+2cv6itDfmOw8/aT9dxtc1McuUjBX
Nbt40W6rxWVjjHbyHQrwxPn9dqyz+y7mBfih2eubFbST70SAw3+ky/t+l+2k
Xz1yfN0idezDbPiL80We9/ld7CW+a3lSk8n2UTby5xg9/vkTO1lHscb/5pGW
tdxw3bKscn6Bjy36vOdBTzkfwa9UNZ4cmU2uz+DifYdrDRZVMM9H//+tG9rb
rk33ZMsq/WTwSm1PxFf2lH4vOHy8u5TwvWBef+Av3mUw1Xs11oxD/0+TLG3a
Z5H+PPi3OtP3j/GQ/jx8WN8clhd/n2An8YEZJW90uybfQYAP+8KITKWWTDVJ
/aysMrjvgkJy3Zv/v/Vc+IF1X2X9Uc88r8G3dWr+a4ubnKfgzdrN2lXCTc53
8Mhu2Zo7Z5J+C3hcy1MtLrrK9Q18b9MvcY1d5foAjp38m8uz1lzzvlbkf+uP
tiNftiolrOrJg7fI1fzzBav68+A/C31dusWqbjw4dttqQ58tpc3nhY//m19a
JrdfV/7LLM9x4OjzVEir2nt0ks+m0rMrzbKqlw6O/DGt+rWMMJ8v4DPA43Ym
zV2eR8CRp/OuNpH9zfT426/0OzdFusu68eCiDnbFX4/+08l2GxU/7e9kVYcc
/l7ZVg3ycpfnYvQMn1ZHMr9NNdsneOtx0WGfPAJt7OTw0K71U9z9beyzb70d
3dpkl34RuKgTPrlRtWiz34XfvqpvwP0ZlWTdaXDsPGvHTQ3uGFMEPm9zxy+D
e8m61uBXU3ffWJfUXdghOOe1sVs3rNYbksS5YMPSpZ4tKvWS72hYcOi3BNfK
W9ncLnp2/vhifuvcss4zuHjX5tbPwe1NKUL/9PfQh17fRpj9NPT/Qncq74dc
8nwBzrrhVK7l8gArPmHFYjMttqrzD944X/ch+6zqnIPDR1+o519HzXoG35X1
5rVbVnXUwRNdimb5ZPXuDPL8/WvG46w5pb8NTn8HTW7+Lr8Vf8bL60zXlyXM
9gMeG1M2uNMc+f4LuHiP9Zph6Bg7GU/wq7297mVnmS8EDn1ijjej92eYBJ9O
MR9nlLF6hwUcOXuO6L4wzOyXgu82Zn4WXUyeFxjH4AmXh32401XoAZx2tbY/
9M8NCUIP1XvuL364hfSHwdHDjWtNi/U1Snzk7aVh20res9Ez/HcNeNXuq53c
pxYV22nc6ib9Z9ZzV634TC2TPE+Bs85cmFf2e4JO4p7Vbs366Sr9Q/DblWKL
z3WV/iH40Fr/vOzvFmbTLutS5oela1TXyXUePKa/x7Ib5v0FvG2jrHteu3yz
2Tev1OtR7JWb9DPpb+ny1U/MziTjk+DwL1+ucdgZncTflRrZzSWTPEegz4v/
Xavdv7Q87zCOnROTTYs7etngjFe4fdS5NUaJ39sz7NiL8rI+P/j0NVW6OZe7
ZzMvSqV6TkrI6WezP6bUbdZqoEuwjR/ySKvR+by7jIuCT60/KqOhu4yLgov6
z91apMfaG+V6uOeB67QCsg4wuKgDfN3QqrOdjLe0eB+ZS7sk6/qCk4ezq9G4
R60NcrxoVx9doe0Me73Ade1XTf83s4wPIKeo0xvSZNsE834KPqeyzhCZScal
0U/93l93zMoUa4PT7tcV2XdlmPmI9bZRl/B3WWX9WHD6W2na7/N25vWEcWl0
13lhtF0nTY2P5a+9uc7gU7IeLDh6iC1Tc+QEg7SH+wcv7iw9RdZ5Boc+e+bv
bbab9Uy7Pct937y2uKwHCw798B1fRlezk/K37FuvZKHC92zk7D3p6Mzh7lZ1
Yi04/T1ZOE/qMzuJ5yzXveTpDrJ+LHjK0xXrU1yCbeKN5BXcLpuv0QEr/EvF
BZOSPsh6sNjJ2BEOQaMHnbfBQ3tmVNqTRdaDFfv7oK0fF3rK+rHg3NMldXBK
8bVq1zhLK9rKQ9Z3BYfeYWSulm5W9lxldJXFQ7L62/TryKJPz8pl8bfRZ9tV
06a5e8q6r+h/47iJs74VkXWqGS+Pv4b/vb6JrO/KPrIoKmrL2etdbOywmN2o
7309ZH1XcNaxeeFxM9fbGQV/h9w9LxfzkPcX4MyjpK7tdheyl/QnC8cNcMwi
75XA8ds/Bbq6zzdJvGf+Em7/esh7K7GOOdWo/9JDvo+DPjfdLVZjUV5ZdxRc
vEfs/G/sAlOa0GfBY7N+XstvVY/FgkMf1KXe/POmDNGuj5vdxoZZZJ1ScPpr
P6uUb6zRJOPGaV9z/8gi64WCi30hW9MtQ6zovydmezAzi6xHCv5vXPMJTlmC
bfor3tWdva2rSWcU8vcJ+9W6mKdV3VHi0hb6rqcH9vYzSPnzZ3kVdi6LfOcI
O1HrjjIuaTdyZZmeJdqGflX1oAovrOrhg9eukv1jH6v6+eCM+2bdgNTj9hIP
K99iyQ+ruv2iv/6//ipbINAG//K6x8oW+f1txvHBuWxbdxWwql9qwcU7Ppka
VJ5spTf3ey1+DCok65eCj752utGCgv42dpgct3NOXF5Z1xS86w/Ta4+8sm4t
+0iR2ruOvcwcZbvvVPuvS7/MP2zo0c+MXc1aV7bav861ul2keGYZxwaHvmeN
8jsu20m8X7Nfz70yybg6/Tr217Gb2mAvG3x/uZV/hVeV9YjA8Tfq7qzzPNaY
JvT/fpxnrvpVZP1Vca6x6Lmf95YDjcznO/DaPre+DM3nZ6O3M0EjSlfII+sY
g4v3MafHZPfQyfPsJLfmD67nDrSR/2e9W0tPVZd1WYnP3DtY6Lafu6wvCi7y
3nNUav7AKs6Tf+fS7PGZZV1Q4lcj7UvVGfhD5geCs86X3FHm9CK9jEMuLTGm
vFuEzE8Gp90T5f9b8TtD8hF10YMGHbliFYd8kLZ6/bwImZ9MPPZ2garRhxxl
PUxwz6LGxjmdZJ4h8eS9fxW9OcZR1r0EJ99AvS8gn4H4PHjuHNub3nOQdSnB
ybtYfHD8rVUZEh+TZ/j2qo4yj4h2m85re8zB8MtGzrYVu41IdYi2oU8psyLr
SgdZBxIcOblfQG8H06PTUpxk3UVw8V3txP6Na1jdj3dILnJ0hVVeE+NVJbPn
tA5OP2xw+HDvLO6jPQN97jrJOoTg73OcLPiXVV4r7e506Z7azkXmgYAzLjlv
dM+Rxer+ukzemVMOOsu6guKevduWtFrWeZ4WHD7cp8M/wXij4xirvCDwVg4r
D392lvUhmRc+A97oVryV9QbBPSc5dW/nJ+vfgsfuqNdv8UFZVxAcfzLftMCE
fQbJB/9w2s3PTb7qZTzZuL9PeMBr+b0DuPhO02nJa0+DjKsf92+5x/eHzCMF
bxcS3OJS5EcbOZm/xV5WTl5iJ+PetW/6OO7NJOszgzNPd81pmVjfih4+HnE/
tTFm+eH/17093Vx/yrqIjMvN9xurZ3MeLPZT9P9p2+r51bV7Njjr8Ms5l49U
1Et8YNF62cb5DRD7FDjn9JwPKt5/YDQIeY6t++/Qr4KyTh04/o/b3hC3EJNB
9KvKjBJ9yxSReYng0B8J2h58w0qefJnPdg2cK/M24T86y7gR+uF9xP4Cjpx3
K3w9Osi8v4C/fWXYXniMl816jh6GhwX1KmqS+JXUavu717pnkz/TZHvXW5f2
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
ndTDQn27LE/00g8HL+H0/doJw0cbOx/dd/6PwUZZhwH89sA2Dd8aZTwBXMR7
J98qHJgh7/0n5M6feaJJ1lsAZ75krj+9bEWjzMcQ9ej0t/3yGGWeD/xbdW+T
52xGkmhXnNOv3RhfIEPm4eirjpk336oeAvinNn0nZTbJegjgBcqfP2Bd9wB8
ZYt1+XdZ1T0AZ52JcW/3bIJe5kUgz7N/p9fvlCHzOlz69T8dbFWXQMln0P79
bLyuy5D5kEOrepVuZifjuuCinsbba3ffW9HfLZt7wWCdjCeDI+er1Tcmb9PL
vMd9DZ3aldHJeL7A+U7wX924+xmS/vOeVPctOhmPEnksLv/sO20n48bgCWvc
roZbxY0Zd+bLhYQZn6ON0k6eeCwassYYYBMH1q10KLUoTX5HD46cM4KP9Tmt
l/HD0N3x8S3T5HflyvdH2luHwTML6+V62Pnfinnj7zSziSN1X+M753ea/L4e
/MSGva+Gpsvv8ZX8Z823zNHjURkG9d5TO7i71YjodJkXNNV00995byMRBxP5
pV8any1TXMY5wYmP/f25ctejJonnXeRX7lN2GdcFX+XZt29ZnTzngn/JUeb8
Tl2Yzbi3r1sn+YpJfq8t/KsC5xe6m+T3yNCL73zb2Rdaopfzi/ENqtU56LxR
6qF8r4X1w6zqmIGv6Bi2yS5FnpvA3w7KG/7Eqs4Y+LcWbX8UTpbnL3DWc8cN
e78Ps7pfzhi5/vOzRHlOEXlNG8fP7JUov2uGz4y5gxfMtqoDht6q5E10yGwn
733Alxa833u+nbzvAMdvGbFk6sxxVnlEWSuFvnmji7LhI+p8Ppv86JRezuux
JduU/WUKtxkXUTev2a3ivQwyvzS9xriDzU3ye3Do8xad/26BSX7PDr2IMzg6
vm5qkON77K997d8Z5XfryPm+6PqzMXbyHkfkv5XqZz/IXt43UWeY86KhSR2f
Nk5GbcS1XN0zXKMEzjj67XRvscotWuBqvWjOr0fmd5p13ClVS6i4yG6tk8TZ
v6Dn3Lw+aLvrXad0LWFRp4t65+8CV+vkg/8ova2nwTFVy317iG+w0zeBs28u
39f7/kRnyR+/Ytiwlof/fJcLjt2iB+RsW7NLudHO6Zrv7wmhx50lrr53IL7X
Gfhi/hKz3hqXrbH8mKvE1fcjwNGbW+FFCbndYgWuvkNBu6XmDax2y8log8M/
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
LM/HuvWHuZr5gyNPy4LVum/zlPTiu2PLOsO4R80uneO6mc/GSa1mvvaUOPQl
1nVe3sQzSuDwT5veYXG02W7hL74LXpcp55ystnrQdW00akDWWMEHPSAPfKAv
EVKk1sWstvgVY9kWJbNGCVzNk4Q/9NMq+Zexi/IRebLQ17526Wed6NcCp7/i
PXTq/w3cEvL0j/yW8zvrbf6D/pu+mvX2z67N8/ZdPC/yatHPhcGLHt/94i1w
NZ4D/4NJIzqvNu/vDxLqllkb4yPyf+GzckGunw9/vRY4fJATfGC7IlNqmOUp
7Hf7yYkPEqdfbRdnXjj1yHmBizpXln6BO3ma2n3+Exdqleaz+bXUg/reMXre
Wfnki4G6dBEXZVy++P86ddkk313FHp7Ur9PghSlDm3nAp1edlHeauu93G3Gl
bvfUj5q672e/ubt0nt8+Qp/Ym2+zWVEdE14LXI2zgc/48SGokJkPcRv6m+Nz
AY9L5nV+fuuRN/KlS1y9P0WensuGRrua6RlH6G9sLuQ9zV6Or9ivq7yvNMC8
zj8eWa7Xw/R3mrqPH6iQp25QxkdN9YfFu6uWdvUNhu97ZvbD9y6d/dGQ+k5T
/ZPab5ss6KIP0lR/uFr5wwUmpwVoql9Evxivsm0TstSyM2pvZmaZnEUfoqnr
CfSM49v23Q9t+WMPTrW8KmSEaOr6llSv6cP4jAhNXVexH1HXc09k7aVmPqcj
Kh68kRGqqeue1sdpyB59qKbupyMbXA3+8x2a6oe/NVU5msXwU1P9FuwQ/Py+
Rf/9qW/DPQ74sEoLxgw2pmlv6z/vXs8gceyh6KRCZ+cYYzTVf+hWcveIvWZ6
NU7FPRp40aW1VmcyyfeR4e/2fWGBYib5/jL9Xbrpd/8ZOr12fsML+93GCE31
w8/W13cpbwjX1HWY8YJeizi1oIjZfuAv6pIm1o1dozNqTXeWCtthiNFUvyvt
W3BJP+NPTY0Tojf4H3c8cqWgMUHrmdRg5TCjxNX7RPAOd46O+mKU92jw3zQq
umV1M/7effxMnVHiah4FfBJmHM+3zyTf7aVfc5/X8G9jlPd34lw56928PeZz
H/oR34XcffMsQCf5i/hSh1cj+pp+a6PDujdtZidx9V1aUXfWK3fKZFOC9mHq
/CV/vu9S40joX3zf4+Sbp8Cf+FKRUYPL6CSu6g091C4am5pg7ldgfg+tvi5W
U+PDpua5ZvY1xWhqvPHMpyNvNlTxEvsX83RDkdDkkhtbCFyNb4Bv9h5z9af1
e6OWOED7jY/TZxoztM7d0pp91Evc5h1S8pd+LvxviplP4OiTvUsWaCP2HfaX
7clnz5jyyXbB85tm5P6YESPr+VnkXx0y3mWEuV01noPeRJ5V9365e1jJzzn3
RJmjm8KMJi150pZWSzIkrr7vKfbTYvn7xetSteEPKxW4ro+RdXkt66R4z9SC
x7f2OVPbvM6cKvh3qTYZPzU1noY8or7I7j7DtxgN8h1ey/qWKcegf1aa5Hud
4F4vBtdrbZbnXeGzb34ZwzU1joH9Yyfh+89UCTav85lbxe8+lRKgqX4d9NjP
IMNd92NmOZ33d6v357ss1R/7kTl4wZ/vvtRzRMc7uf2nJr3TVH+v4hLHm+uT
pTzqPRp49Nlys66Z+UfGdYk++0PitIuexX6XkrOFl/G3tuOJ3ldvF6up8V7o
0c/wvgM+PDGvVzfiHF0LmunV+LP/F48dT8zrj3p+Sbcb2OWK7rumxqMYR+i9
D/Yr6WyWp++TryfKmXH1XMM4gvuMznuyqnn9WfNi+/mrxhBNjV+tjC8zNcjl
u7eaP1Cq7IovRqdAbzX/Z9ebHf07ZQ70Vu+jc/++1H2yU5SI/8D/2M2Yi1Mc
vnur+VF1Kj6Z2t3xu7eap/RiYTHnng4yD1nkvZRLT5/gKvNdWbc3Lu63c62T
n7eaN9Ko4orveheZFwofuxY9WqzO7CVwxvHAm7zND2T3Ev2Cz9lfplMnnZ8K
/tCfbnuz8I2IAE39buXgynUVvP18xLxDD0OyjfmV/EHmOyF/648LCr2ODdBs
8qI7HOqzPfqdwNFPkypBt2J+yrwR+GRkLVi4+c8ATdV/3L2vfReHvxNyMr4r
RrntTwgP0NTvpwYu612kcliAuLdlftVr09KubXiQwJlfz79UCrgV+k7wgX7U
ROfK/z7xEe2K72dTQ34/fyrvzeEz626z3z1eyntb5nvvfe22fC95XvQLOQ09
8r17uUHe/8Inz5ENn1tGvNPU70cSRi+4PfSHvFfF79JWNu7rHvlO8Mee31Ua
t29hZICgB3f93NfhZ3qot7qf7mlX/eF/GaFi32FcupX/3HRfQpC3zf4+7Pic
vwv7eav7zvpG93200V4CR/5DcfWblksJEnEJ+L99/qXo34ZQTY3PFCyc0PS6
IUJT4y2rzuRf+l4foalxG89fGw1r0oM0NZ7Zx6P77poZAZoah1zRu93b4Rnh
mhr3yDuze8iH9FBNjT+k9PH+9c4QIvjDZ3ihupcX6SM1NU44YorriN9mf1uN
76WuzzZ9mCFSU+OBw358r/LbfL5Q41faWb9sHub9S42D5X9eYnMrfbimxlvW
6KKqtzRGampcbm33G2FXzeOn3l/3vxKvz20MEus2+OI4xwIZ+gBNvXcoNPVB
QllTpOADPvTZGIes5nONep/SaH2v8Ar6n7JeEX7U6cGJezMiBY7+L4TuupRZ
F6Wpca2iTzYd2amT+5R416Ph5Ek7TSFCTugflK1i1KUEaWqcJ2JYk4LhSQGa
GifZ3WLhwvpJQZoan2nRY9q0WLM86v3p5dpjh8+3k/ss82LUxuWb3prCNfVe
I/3s+gPNzXKr86uZ3ZEHC8z/r84L/yftqr+xi5L+tmXdbnmyack/3yer96qs
a/w1za42pLtVnTFRz7jrhQ9RJlmnkb81R35bVkgn63SJ7yXD77wYr5PvIPP7
izk5qnfWyXqqrDMzK+6I/m6U79Ly+8Z7Md2eW+H89Wj8bFc+k6wLSjsF3q4t
VM9KHn6/9t250SuTrK8o6q6l147W6WSdc/F93OTtVxuYzykiv83S7pu5/Y9e
MMm6f+L7kbv9JrnoZL1H5O+WsWjgUJOsq8z+1Wj09DHBRvlOJfS3Izp5VbGq
R0o79UZVSFlokvWfZX3i9NbtTfI9R/i/n3c0Tw4rnP4Fzo9dNd0o+8V621v/
zPeh1buN/C367v2G3VbyQ//gx47im4zy3UPh/3dvduusFU6/SvkVtjcYZd1m
fl/tfSRktEnWzaMdV21R2esmWccbfHKFTnOXm+T7d/Qj9lT5+34mWX9VfJe9
PS37ISt62k04Pa16Lau6pmIc8hR+2dUk65mDN3eMKVTUbA/gwk9Y+nT4JCs+
8B+wo+lyB5N89432B9X+ubGuUdZDAK+6wa3UPYOkp533SxsUjLWTdUXQ042+
JZ5mMcr6JKJ+82GHLD8N8t0u8T72jXmPF1vVG6Ff1S53s/8THxB1n8j7HXDo
fieTrB8l/KghNz1WmGR9J5FHurB6yX0mWS8IOaecdJi/1apf4GnP3+b4xyjf
DRF1oyv2O37e6p0vYbdbLlVqaJTvdvF38I3/UqZY1ckR3yk0yDbIzur9LPQc
UmCR/qJVf2l35eUeh3JbvVcF/zIBA4q8snqfBbxx5b3nXKzedYLPja3ua9tb
vTPFuLhlxO4cbkUPn5Spsz5o9rJuBnp+c66CFmZVNwM9P/vdM8sZc3/BoW9S
uuG4AUZZBwN8y8Cb2z5YvV+GnOHBl/ItNMo6Qsi5yXV29C4rHL2NnRfaPtKK
D/R3uhWZ+9JqvPi93YKW23dYvTct3ntZM8vf1yDtln5Vjj+Yr5TVeyLQT5um
tTdavb8D7p1s32mUvXzPhd9LX9oR6WL13jT98O+V++lqe/kuDHjVnUvdH1rx
EXGwO875XtjLceevqUWOkm3t5bswtFN2y5SKblb06L/FmSG7r5lkXUH6G/+u
1EQ/K5x5au/RLviZXtZpgX7Upm+TzuplnTr4v8w117RRL+u3wKfB/kcrok2y
7h/jGNn/U9ICk3zvg/myY9nep7tMsi4i+MS6yfXGmGRdL/g/W75qzzSTrPsH
fdVd2TZMt6ovBH3nO5MvpBvl+GKHdWfZ1wyxev9C5FFkqza6vUnWnwTf+mT1
5/xW6xLtNo3teLa2SfLBPiP2PXExWrULni1qwtYqJlnnHP3VCNrQNMZsD/AF
rzqo7tqdBrkfifzM/TcOv3KQ70og1+q5o9s9N8j9mvl903Nv1XFm+wRHT7U3
zJ5900G+ywB9lxKvgvZa8Rf3TbVuxjd2kHJCX0o/bmkdB/nuALhDy/8Kr3aQ
9XXR0zinhftrGmW9KfS9LWG402ODrM8PfuqKa3aj1bsA6GHUvuK9RzrIuv2i
XtqE35mPGGTdfvB2YT3eVHaQ7zswPu+/D5nyLkPWvQd3e+Cz3cMk60iL93LL
+Dcsopf1qaDX8myve8yq7j1/hz84+SC7edxFvXoLfeX0Utk/G2WdWOx9QN0X
FVda9Rc+6z26dG5uVacdubYVPlm4t5U8/Lv6NXOVGGJV/5+/+kONz9XXyzq6
or7RqAWtAhzk+9fiXm9C6WNHDdKPFff+3T5lCTLIerbw8d074tEcK3rs4W7e
Da18HeS7D9hDdK882ccbpX8L7r6wvstHq/rb2MPEwhurT7CqUw3u1vAfz1pG
We8aPqtNx98dNMq63NiD792wQQ5W7dKvJY8aPPjgIOtOY2/vGpQd8c4gzyPg
meusbelulPMaPr9qTMqT2UHWcwY37PGrm8dB1n9Gb6VbfHrY1kHWeQY/OK/V
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
9n82rxzE
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwl1nm4TlUUx/FdXLf3va57S3kiY/NE0oRGzZoHpUGqa4gGzZJS0TxrTnp6
hCbcJGTqCkVSGRponofHWKKiDH1W+4/1fH977bXXWWfvc9Y5LaquPKPPliml
z1gtNq+Y0lCci/XKUvqXboCtS1Pamt4XR7B19Mt4GNuDPhzri9tMb4PTa6fU
jn4LO0YcfQKOY022SOmaQkp9K1KajzPKUyqxZraYUjxSzAH00dhPzAIxs8SM
lqsO/xgcy+rSr2J7cS3og/EVtqX8o7EgV2f+4e5lnLj69Ef4orkN9FXyjqFL
xVfjVHN78k/CGtaW/gRPNnc0fQq2Zc3pdjjNXFN6IrYxbkAfiDOMD6dn4m2u
PQEHq/81c9u51kQcHzXTE7CuOteKL8M7jBfSd+Ima39NMZFSH/swT72T5Olv
bmTUj0+y7+mn8C/XGUevwYHGc+hB+Lk8//CNsraqMqWP5fmnXkot5W2khr3x
Yv6P+NfzLxP7TMprevAv5t/IP9+4ccr300fe5+ir8Xfjano19lLn43wTxffF
Cfw34GI1/G3+ZTV057uGVbEu5nrjBZFHzJdxXbzReAjdG1dF7fRaXGHuUHoD
XmbuWbofvoj7xDPJzjI+D6/Hlmwr+gjsg1eyK1g31oP1Ypexy9ml7CFxb+Oj
uAxXsKXsROMOeBI+xmbSt+Fx7GD6eLwn9pp+AC9xn9uUpDQZ16n7ev4WxoPN
fUjfjkPZcvo5PAVPZaex5uLWY1PsZv1c6+fgQ3xPxPvlzGqZ+zieDVxtL+rg
ODGb6YqS/JxUyTso7hW7szvjnrHc/FfxruEiubumvP5cZz3dWa92dj2tr8s3
EVtimWu2wp7WPyz+EtzLuBjPD/5RzPleF3+zueliHsRr2Vj6OnxezBH0rp63
IcY/0y9E/7CuRJ498UzjTvxn4DDx89T3hJxnqu0NtS1X21L+Tfxj+N+P91P8
bFxezPtRzV9elvcvektv1pCuwfFiFosdSs/CEy15G593vT+jn+AU473pBfHc
FXPPGCJ+Rzk28u+CvYwb4DQ8zZrT+TvhvaW5l96PFWX5zKN3tefbwT2ehLvx
1aZ3x51i72IOe4jb6FpTsa1xYzH7YXNsynZkTYwPSXlf9qcb8rXDA1kz+iA8
KvaPrWI3RZ/Cu7CbPfzEHv5rD8db71X9/1npYK413TliOOcU8jlGn9jX/NW4
zj4sELMeB7CGdDWOYOfSL2EX+eeKXSv/18Y1/N/jTWxbeiReIOZ9MX+KOYd+
k/6dHm1uOzE340K+Rq47XD0nq6emkPd/Ee7MP4r/J3Fzxf+IXeX5wNxf9XIP
ay1mrJh36a3oR+IZcxYDxdcU8x60iWc13l/5pxg/Lv8xxs3EHBTnyf8W/7Dy
vB9biL87+hldbe9aRY+LfaIPoJfI+2p8L2I/rJ1VyP12mfFU/q+wM/8M/uH8
Xel3CvlZnYbvyXMpviLO7aRbivm+F/KfU5pjN0ffxY4VeU28F9Gb26vtOvzS
minW/hr9s/j/ZyP1x36sEH24mOtaL8/lhVzL0tDyz6ZL5Lkv+h+9gf+KQv7m
1ON/hv+3eHfkWYlFyddEr8KW2IpdG71X8ZOtWeksHhV3LN8j2J3/08jL/1h8
N+L7FefnOg/gT3h2ZT6LVWLOq8z7/wc9oCKv/cD97uJ620YvKsv/Bc3U9pLa
7ojrsMGx1/Hdxa/xZ/Yg/Uu8L+Ia0V3xG+Pb6W9xCetLf1Y7/480lnNk9Gl6
e3oY/YW5AWJ+wKry3DPiHO9ybzvF9zrOV81TrflNzefTM+k19IWV+Zn+m34P
y+R8Ws4d3EMd99II77N+v/j+xHvGVso/Uv4n6Y7R97GqIp9T9PlBxk34B+JF
lfndWCf/rWKW0PPFLJfjhfiGxVlG/43vLn5nfE+8m9ihIj/H8X/SszKv3SRP
J3oSvYLuH30kvonsP5vraGk=
          "]], Polygon3DBox[CompressedData["
1:eJw9mQfcllMfx8+T+3F5rtvTnb237GRk763sQlJRoSQlJJvwyt6bCFlp0k5G
VoVssrfXSiEr8/1+n//p/Xw6Ped3n3Nd17nO+Y/f/3et1eOk9v2apZTq+K/C
31RN6Wv+/Jf2T5nSXY0pfcXAjeCnwUsz/i/9DepTeo6xq2ljGV+B385h/Fva
a/SvKVI6tsZfxh9lfBV+O4+xW8GvgtuBbwJfx7wZPovfZjSkdDvjb9Dfh9+u
Y/xn2sf5fr2434TmKX3iteDjwcuznj/BLVnPM1xbBf8K/o22ZDXG6+pS+gPc
nP4E7tc9X9+b62/mmlk873B+u5exY8Fvg2eyli4tUjqhFn1/G8f4LYzPpt+Z
+ffl/Ujc/x/+LEN/WdoZ9EfRlsvY8fVY37Nc+z3XzOGn12nz6V/JOt6i/zbt
UvoF8+fTf4FWT/855lxIfyXusTH4TNbzMPPWze/rbxvRni1j7nmMD2C92zM+
m/E7+e1Qrl8B/FhjrMG1LMb9VuS62xjfjfGXeKfnGVuN35ZkrJG2Kv3Tud+D
PG8NrpnO+Jb8tiJj53HNVK7dCtyGtjlti9xW89q6GDuTOfxLm3KPnbnXHYDb
aa0Z24x2Dr89ytgW3P9F7n8S+EXWvzS4F7jCnOfdW/BkcH/G+zL+F+udAj4Z
/BJ4ecaPBy/F/B+ZX+P5a1XjWfuDV6mLZ85kTmvmNgevAb4fPJ97DWfOa2Wc
mWfpmXl2p3H/+1jfqlzzJHMPBZ8AvpUpL5ZhM9rOD7QG5g9tDJ/RV56htc/z
b2Z8Rhn2+bPr4X5PMO/uIq5dyfPiPQ5j/kn8NswzYf7i1Xg33/Eo7PHwPL4X
4zcy3gF8Ivgb3uGexniGz7qTNov+Loxvwfiy4LPBp9TimStyz2nMHwC+F7xy
Xs/Z4JN51ubgF8Bngccwvhl4Fngd1tOCvVmGti79U2uxbtffm/GraKNYy2I8
73Se14fxW7m+yvh4xk4Ez2L+kuCe4A18P+61Am19+n0Zv535zRmfyPiD3KML
9zqCNox+s2rYhjbStUXY/U2Mfc0z726Mv+KrjWH0nzDGpIhhi2KZ+D+0j+m/
kPfLM/Jsny/jbMWe3fVl7LV77tm4p3eBb8nnuUN92Nb24Ce530XMe5H+TNq1
9K+gfUD/fdpl9F9iDVtxzams/1zudz+/LXR9tNtcA+/Um7G1wZdoW+D9i/BR
fXV2GbbherSFJ8GXgAfRppfhk/rm+6xlCM+aWYYt+I6+61e0SfQnOIf+O7R7
6A91v8rwLWPP31z/DP3P+W1Wihj9Bf3PtGv6T9E+MTbTnqR/LuvpwnreBI8A
j6XNof8hbVoe78z4ZPAAcFfwQeAu/O3jftOOpj+Y9gb9Kdor/YnMPzPFNV77
OO0C+h+yvjt5v0/BT6d4hs/qxjX96PeldS8iZvfyvIqI5f4Vn+We0P+F8Sfo
n5/zwR/kl3U4n4fAPdj7P8GtwKPBx4D/ArcBn8LeHAv+G7wheBTjx7UIG9fW
zVHmqn9o24InMN6T8Zcbw2ZO4/rzed43PH8yc693HLyQ+eszPgLcnfkdaFvS
X1qbZe5V9D+k/7j5lv7PzC+Zf1LOV7+ClwUPLSJe/A7+gb0aAO4G/g28NuP9
mX80+BdwC/CQIvzpdZ6xgPnTGe8Mns/48+BDGO8Ingd+qhI2qW3qw67Hdenb
2pC2dHrO176X7zdVn6Q/qAjb+Yh2A/0xzD/GWJbzuTH8WfCFRcR2Y4r50Txp
rLmLv9+Dv6XdUUSOeJn+xUXkjrmsb2IlfEhf+q558BP30L38HjwNvLf+DP6h
eeTzw8FHgBeAfwL3ye//E/gD8DGMHwn+sXnwk07gTuBXs72bQ8wl2v9o8I/g
B8AfgCem4ERyI8/Iszo+BdfwGT5Lf3HvjQ2rE0/WpG1TH8/02XIA87tn4Fkc
DL4r51HjjzalbW0CXhm8Xc7/xoPz5RJ1kbvXo+1qrKhEfF8ZvDhjGzF/RmPE
9F8Y/ylFrHdPmvYG/EAZ9zdWG7NbVcMfjTdygg2rEcML+tW6iO1yk6XrIiYb
q+UUcgtzsLnYPXQvj2Z8ZBk2q+3OS5H7/uK3L+i/SZtL/w/a5/TfM+fSX0h7
if5ntN/LyDX2zS/mGe1K+3K/3Xef38DzK3XBdfQxfa1Z5gv6vL7/O/PXrobP
6Dtj5FDV8HF9vcj5Sp/Wt5erCz6jD+lL36TIVXKjteviTOVIxhBjiXvsXuuD
+uJf4BbViCnGFjmUXMoYZay63pxOf01+W0B/05yPXbNr/zsF9zmLPeDnJs4l
95J32R/NeY9viJxsbuaSdEYZMWUCYxMbwj8uABfaiz5IfzytZwrOLHe+mLZu
ivw0uIx7eK+d5CT4X3cePpL7TW4I/7qa8W0Y35x2eRnN/h7M36MWHF+ub441
15rzJnH9pOy/14DXYmx9Ywz9HbluPfot8zOv5Let8/32rIU9a19y2FWqUZNY
m2hfI8rg7HJ346l8aFM5ur6R+af+sRT4MMbvKeNMPdtdUnBX58t95EAtq3Ee
ck05Z5l5sGetH5vr9ZlXeJ9pDeFL+uxM8NSG8GVroHZcu6/5iP4oc5j+ZM6k
f4Mxgf4WKfiePvKmvKYhfOdI6yzGetA6y0sZP0hfs2ZrjL/iA40flajBrMW6
0obLjZgzuRJnenG2DevAZtlGrm+MeKpNaBvGdeP73bSB5swiuNC92lsRnEZu
o8/r+91qUddY31jvHNcY/Eie1LUWcdv4/Yr5zZhP24/+3rR+RfDRsUWcUctc
LzxSRIwz/ljv9CiCExh/jqoFh3gM/DXPOxrcFrxTjh9nmBfpt6X1ob8rbaPU
VPamVkXkPfPfI+DTishD5qPnfP8icra5W5/Wt53j3E60w4rgROa3QZkPyXnk
PnKkjxjrX8RZtqGdJWeoBU+UL8qvrJnNk1NzvpAPywvlh9bj/cCbg5cC/1lG
znMPXwX/Zi6tBed8BzyvjPrtgSJqZOvfM8BHuX+ebzXOwLOYDf6S+d1rwVPf
z/G1Z87hcj6533n0b6DfPwVnsj4YWUQO0d/kUP7eP8eLRZzrU/CvuR7wnF/J
8bpHLc5kiDG9DM6gjY1PUfvLKeQWcjS5mvXYsCJqKOt7fcL97J/5cEf+bmLu
ou1G/xA5BX+vBT/F3CO0zyJytPzUmLELeMMUsaQT+JQiOLHc2POTZ8m35Jee
qWc7PQX3PbIWPFW+Kp+eUgZPldseTNuX1r6IGtxafB/wQUXUpNam+9XCbrQf
65v9wZuBW2T/PAC8nXEffAv4QPC25pscz9qB9ysipxuvOtbCh6xRrFX2Bu8F
Xi3H87bgduCdwUPL2DP37r4UtYU1jz59W4payPpSP2mb49OiGuv4vLe712Kf
18n5wJrIeOA9vJc1v35VzfloV3Ab8EqL4ltj8DFzRFOuYGz1FOt13bsxf2v+
Lq+9lXE2txuLaX2LiKvGV8+8Y+aT5ipz1tgyajbjyN45v1jjeZ3XWw+Zs7YH
c5umXGZO2h28Zc5X+sppKdbruo27xt9twXsWUcdYm1jDWMs8aozLsdjzV68Z
XoRmpj40MNd8X4L/LqP+vqeInG7+8KyXSXG+nvMO+laK9blO87T52j1yr8yB
dTlemxvN8eb6JcGti7Btc+cGtJ2LiB08ssm+tDP3dtUU+oA6gXnX/GtMNDZO
4Hwa6oPjy/XVkNSSjIlydTUEtQQ1K7Wrx8HN6oOzy93VaNRq5GhyNTUctRxj
vtz9QJ6xO/09aAcUUfNb+8vx5HrjwEvUR41nrff/nFaELx0D7pDCx/bNtr1j
inhv3Dc+yC3kGOZS7dXawJxmbvO85Q5yiCuyPbin8otrs/9YK2ij2qr+J1+1
BlCr3DNfL6eRn1yV+Y32LHeZqoZVHznP3Kd/H1GEBqoWqv+e0BAapFqkNqVt
aX/aoffz/DxHnyWvkl9pE9qG/iXHU3NRe1Hvsdax5lGbdU/kGnIO98p4I5+3
5lHL1B+3KkKjVasdS6uvD41ArUBNSG1ITVXtagz430poAmoDapBqkWqsaq3q
i3MqoYGqn6kpqi16Rj7/uaw/arRqp9YoapXWFNYWM7I+J4dbOeu15pKTU3BR
NUi1SDVqg4o1lNxen9P3rCk2rg+OL9eX06ktytnkbtaU5nQ1RbVF9UTzuvm9
PutZ1prvgpeohl7WAdwxhb6nnfkuYn+Xg6uNyQHlgtZUamdySLmkGoVajDWS
tZIxwdggX5uS84X9U2iTct4wpvQGP1JGTTmP60emqDXvy3xtY/ArZeg/alxq
W0Nz+7wSmpBjw8DfVaImsDYYQWdhJWpSa9OR4D8rUaOrRaghqiWqGakduaaJ
Oae51uGNUR93S8FVHwT/UgmNTq3OHGuuVWNzXdPzb0/ktfr+vqPv5nkNyftz
DvMfK0NjVWu15rP2eyjffxz47TJqamtta+6mWhtcVx+a+vf5fu9Voua19rUG
0X81OWsTNd+yLmxEW/GMPWt9VF+Vo8hV1ETURszBcmV9Vt+1prO2m0tbrBp8
3NrCGuOiMmpWa9f2tCFl1FfWGtYc95dRD1hLu18PlcFh/Fahxiy3KbN+rSZr
bji4CO5uvW/d7z28l/6rdjEs30+f1rflANYuxhRjizarvqzmqy0bA42Fxi+1
jIfz+62S8+uI/D7GuANzPefeAdPAMvitWpvxWD5oDrdWMYYYS87O72sMMhZd
WoatarPWGu6Re2V8Upvxnt7beKx2c4d6TyU0OrU7OavfbvwGIZfVR19IoVPq
u+YMc4d7rm4g55f7a9PatmfkWamJqY1Zw1nLqWGpZf1bxrcu44l82DPz7NS8
1L7kSHIlc5q5Tc3p2xQ2YJ3/T75ezVqu3jLr42ro1i49i9CirYesi+TocnU1
O7W7cUVoPdYT1hV+M/HbiZqh2uGPZWgd5kP5/t35fI0v6hM/laGN6C/yCTm8
XN6cPSF/D1EbUPNT+1PzUPtQY1RrVBNSG1LDVMv0e5LfmtQ41Trl6Oop6ipy
91ZZr/ebjbWYGo9ajxqpWqn1u9qA9eRlZdRkakN+k7JWs0awNh+Ta4eVqvEt
ar38PXH1anybaZ31KOtlbd8a1tp2E35foi7iuz48N7//JUXUej/k/bq8iFrG
mtNvbf0aohb9LmPjhfVRLduX+Ut9xxpsRorvktZmfsO5MkVMHZq/fzRpY/Wh
FfsNbWCKnGfuWyZ/P/IbndyvMfu3+VN9x+9Lo1Josmqzg/N+yUnkJvsU8S3B
+kCOY4wwVhgDjYXTyoiV72f92z1eN/uXueFn/j6aIl+YN/ym9XDum0tGlxG7
jeFqnW+U8e1rftYrrWdObIgcYa5Qk1SbHJHzj/WTeqXXmwveKiM2uz5zgTH8
3BQx2FjsmXg2xmhjddM34SK+6S4oo2byW4TP9NnWm34H9nuw+WhOfr7P9Nm9
8vXqqWrN7+br5SvWjz0aQ0tpl6Je8gw9SzmkXFKN2W+/1gjWCr0z/iRFffmy
OTdFzjR3ajPajpxH7vMZf69IkV98xy65vjcmGhu1OW1PDiWXkgPKBeWPas/v
8Pf0FPxImzm2iG9R5kxrKms04605S+45KMdXz8yzM2/KDYyRxkrz66AUGrVa
9af8vUz7dz2VqO/9juP3HPnnF/wdnIIfaNPuoXspH7DetcZz//ymaO33P3F8
NY0=
          "]], Polygon3DBox[CompressedData["
1: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
          "]], 
         Polygon3DBox[CompressedData["
1:eJwV0E9I02EYwPEn2fyTRCeJURY7SOKhgzpi7RAk0UmEqIteclkElR1c2Gps
kliYmB2ETpV2EAQjpWuswkRqdursumnXio5Bnx2+7Pd+3mfv793S+TsXx5si
4oiatXIo4lci4o3ne5rU94MR33g2GZE6EPGQ5VsiyocjavaWrF9pWbf5JT7R
FpExf1onfGfB3nV7Nef0sWOsUxusZP4LP8XbWYvW+H2+zXt4klWcMafj7RFb
vJsneJtaleIv+K77T5l7rEd6747rGnbmiK6xq3rLNs13OeefdZMzVu0Xvfcr
/+Scs7yDr/MHvMqPmv/N/zZ+My/wHWe9tn6ulxrnl/kz3m19Ummd4ef5H163
/qhNPeVjvM7Lniuq8lLjznzI52f32dIgz+kCmzPf77lXGZ1jA+bv+v9z7vnB
fLbxbr/hnb1R3bK+qYKKusJu6KfZPc2zGY2xH9bTnp9oVovaZ/8BK7NGZg==

          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, 
     {RGBColor[0.368417, 0.506779, 0.709798], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
dxL+H0D5YJg=
          "]], Polygon3DBox[CompressedData["
1:eJw13HW8rUX1BvATnHv3OfvEFZBOBekQEJTu7g4JaZBGurs7FDFASiREkBJR
QRSVbulSujvl93zvmt8f72fP2jNvzzuz1vM8a2beevd1d+vr6em5dqCnZ5L8
Ptvp6dmkv6dnr3E9PcsM9fRcMdzTc3zKy6V8+oSenpNjL5X6v6fdhNj/ze++
sU9Mm+XT5prUn5ryCimfkfpzY6+Z+n+m3ddiHz7S07Nl6hdO/Ymxf536TVP/
TOqnjn1d7B/E3i9tfjDa03Nm7GVi/yD2urGvjL117EfTftq0vyr2/rFfiT1d
7LNirxp7x7RfL+1/E3vP2MfF3iL2c2m3a+xjYi+bazg79avE/mv+H8v+V8c+
IPbJqd8y7a+NvVns+1M/fep3iT0h9h9iD8XePvZksddO+1XT/sbYh8c+I/Y2
sd9Lu6NjnxN75ZzvoNz/minPn/Ix2f+AtJ8n9Rvlv9XTft7Y1+eF/CL79aX+
w/yuk/pvZHs35d9kezb186T9PDnGVbFfiD1f7Hlj75b9p0nbx/L/DNn/h7Gn
iH1T7MHYB8beOG2/nbbHxl4y9sPZfznXl/MfHHu+tL8l7bupvyn2YbFfjz1z
7PVjf5X2Q/lvq5QPybZJ9l0gxzsu9XvG/mbqZtaHUv5Wtl+n/UFps3mO/7vY
m6futNhbxd419nSx14u9Wuyfxf5h2m+U802W4+0Xe47U3xC7E/vQPL8N0nbx
nO+02L9I/a5p/7/03w2y/5Gp3yX130v9Kfpb6hfsr3tyb+dkWy3lndJmw7Q/
Iu23S/k7aX9C2u+T+tlTP1u2fVP+ZbbdU//d1J+c+l/F3lJd/tva88r+66S8
WOpPnVD37N7fzPXONKGO4VjXxR4X+5C0Xz/tV0z7M2Nvk/qB1C+d/1bJ8XaI
/bXYj6T95KnfOfZU/fUOvcudsvWlfHHqB1K/R+wZYl8be3zsC9r3tHeOt1GO
t3vsmfqrjbaXu5+UX0j7afSvbk/P9/P8Vol911hPz3mp/1HsLWJP6v3nGCv3
pm/n+X6V8gr5/U7sBbMtn/Ifx/f0LJryiik/MZi2Od6qsVeL/Wju9a+pXzr2
yrGfHKzjON5a2dZIeeNsP0p5n2wbsbP/Nimvk/K/s//NOed2sdeP/Xjsm3K8
+WMvy87x1kn7jWKvGfux1P859d+OvVzspwbrulzfEtlWSfk/ab9c7m+ZbP9N
+cX8t4n+lu35lG/Kf/9L21dTninnviN2f+pejj1j7LdibxB7w2zvp/xetuVT
vjv1M6T+3dgrO3bs6WP/I78Lx54/299Sfin1h+T4/0x5stG6L/e3fbb1Uj48
2+0pv5HtioE636LZ99mUp0r7d7p1va57mthPx967Pbsp9Gf3nPr7Yg+kj92Q
5zF76pfyPFO3YN7vLamf3Bic9pPl94rYN2abNOX52vgzwTed+jliX93sqdM/
vh3797FPybFej/2N/H9H7P2yfZJzdFN/aMrT5P9pUz9b7MtijxhzcrzZY18V
e//0r1dTv3DsP8WeOvWLpH7R2HfGnsk3F3ue2L+KPaVvNPbvPdfYM2S7LuXf
eS72z3ZNys9063l77hPS/qnY3zZeZnuiW8/d8z84219TPiz3sUDq7jT/DVX7
nVK3Rewx1xN7nthLx34g/eu7seeIvWTs+2OvkPtYK/s/Gns4+y+V+ln1t9gP
pf7x2LvF3iz2SI63ROy5Yy8T+8HULxz7W7EXj31f7FdiL5XjLZ7t1W71l5V8
n9leS/n1bIen/UNpP3mOd0vsgdRd7PvM/tfH/jL1F8X+X+zrYn8R+1exh/K8
b4vdTftLYvdk//NjP53682J/nvZX5vf12B9k+23KP0n9fSn/JOXPUn9Zfj+O
PZpjXJry0dlujj0W+9eeZ9rf1PrucM53tX7p/WW7KuULU//f1J+f8heOF/u1
2D+L3Un7I2PfFvsXsQdj7xb73Nj75T2dE/vV9OezYm+T+hfz3y2jNX4YR57O
8bZP+z1j7xH7v7E3ir1F7ONjvx1709h7xN7VWBD7zRzvJ7F/me3dlC9O/Ssp
X5D6L1N/dOzLYl+ub+f868ZeJfZxvq/Ye8Q+P/b+uZZzY/enP9wd+2Tny39b
pf7I2Jsbj3K813OO82KfE/uj1J+a+o2Nh7E/Sf1j+d3f/fbWN+x9r95XfezN
lP+d/XdM3Q7ZHh9f/X2hvvrmX0758eyzfsoLtj79bP77TspPpvz1PKtH8rtO
7LVbnz1ysPrWAymPS//dMu0PyLH3zf8n5n7uz/+rpX7V1kZ/njflNbK90a1+
qD8elu3hlGfJ93ph6rr5XqfK/vunzW99bzneZbE/zDVfEfvHafth/jvdd6A/
Zzst5fWMbymfmvI7eR6nx34g9hmx3419Vrfa2298jndw7N/HHs5zvyT2Wzn+
RbHPSv37Of6+qb889kjqL039ObEfjX1g6n4dezT/PxL7zLT/IP+dnPotY58Q
+9Oc77TY98Q+Rb+PfVDsq2IflLaXZ//zc79H5H4/99zzfEdjHxT7U+O7/mC+
jf1R7K/FvjX7j/ctG5/G6pc91Fdzzt9S30n59ZRnNvfm+jaN/UIbX57Qb3P+
T7P9O+VVU79k6lfItlrKK/FvU7dLtqMH67v3/fe0OWyt1G+T8geuJ8fbJOf7
QepPTNsHx2rMMfasrh/HXrpT735Nc2bKv/RefCvtm30w7WdJ3a36T65379gX
91Y80Rv72NgXxL4hdl/sHfP7q9iT9tV//0j9hJSvNz7mfL9xXbFnbP9dY45N
+xuNz/z/2G/F/kPs0bR/OPbkfTVWdVL/eeytY5+Q+3kg9b1DNQZ9Pf8tlOu/
OeVvpjxbtj+mfGja39hbY9dQ9r8tv9OmbrH8d4A+4Pm4/+x7b473h9h9sV8x
P8Q+Ie/39tjTpr+vmf1Pib1s/KttYq8d+7jYf0/9Ydl/NP7UYbG/nfo/xR5m
p099P20XynUeH/vI1C+c+oWyHaVvDVfZf0en/JNsO5sr0/6ktD8t9kqp2z7/
reN5x97X/Bh7jdE6xkLtfCNpf1LspfnuqV8r9Tfkfv6eez229bctYh9hfMvz
+2fu79LYz8V+uvkXP4/9bOynYk85Ws/B83gq//10oP5X/2JvjTm/7FZ/faKN
P8YMY8dyuZ47xmpMM7aZR/8+Vj4V3+qYnP9fsb/bqbFs3WzLpvzn1L+a413Y
/LMbY/em7qXmn63YqbHoUPdkfsj/s6Z+ztZHF+7U3H9QtqMGa8w0dvKbbsv5
VhyueEpc1Z/ntdJwxVvirq9S/+v8Pse/y3Z5yhuJd1Men+e5Us6/Wezxeb6X
pe5/ab9B7GP6qo22W2YbTP2Vqe/N8SeLfUrqlsj+S2X/0/L/i7FXjj33UH3/
xuo3s12R8oHpL93+8uH4cmtm+9i3mfZLZ/91Y3/W7GVibxr73Ngn5/6+zPV8
PfYJsb/Ks5h3tM5/cuxe8WTsr8U+utV/nX8X+2exB1M/ZeyZYv+i2fOP1vFO
j71zru2Z1E8V+4zYk6R+itjT5/cAvm+2b4nJU/9FyoumvET274jfY88ce4a0
nyb2ie165tM/Y2+R+/13jj+j/pvfx1P/kHtK+bhs96d8b7bjUz4y2z/5f9mO
6tT8x7/j5/2l9Sfz5d+bv/dz80T6wsx9NcYs0ilffZFs30t50WxLGA9snfLB
zJfmzdvb+Gh+frDNn4vH/l7s73qnnfI5+Z6HpP2tab9kp/y5e5t/fnnq3+4t
37U7WvXm/n357GK83P/ezbeeu/n788U+NMf7c463Wurfjn1a7A9iL9+pWOYZ
fS7lWfMcd0p5h2zfTHlIzN7exYxj1d+e4h9kO709v3+lPH/qv8WfTfv7HCvH
f7e9/1/G/lnafRR7jfxuYW7JdlanYiqx1dopP5T6dfK7rO8z209T/km2d1J+
P9v5nYo3jk/5pBz/k7R/dqR8az72tjnW0b553yvfItdziRg4/eGp/D9F+sMX
gxUDeIZf71S8Nuz+Ur5+rMa3z1M3Y+zrxiq++yr2TLF/H/vzwfJ5zSFz5L/P
BmsOMifNHvvObs1Vyjem/f/amGLOm9eYlfpxKc+a8g2p/3SwfG8++Az578vB
mnO+kTZzu99ss/fVHDRXyj1D5VOPxF7AGDNYMc50sb8d+zvZ5uorH3rBTsUQ
Ygm+n/7079a/xDh/G62YR+xzeOvv93Srb7vWm8cqphHbPDm++o9vgJ9ojPVt
7J72v+Bf5r/n8y5eSLsleyuGFuu/Pb7mb/P4f3OO+TsVj7lm1w4vOirv5+yG
f/l+j4h9VsNL4ITwwgOznTSucDH42DFtn8fEQ301v/se7oo9WV/53/yJ21q8
M0m221O+NtvDzXcU74iHJmILrrdbeOFeOfYpDW96tFuxind9y1jhewen/vSG
N3rfH7b4g7/yiHgt7f8iHol9VexPUv9nflvsB7r1Pr3Xm4xfnYqPvFPv9j7x
Yur/5HtP+7tjzxT7ptj9o/VOvVs+Cl9lnk7NV/qYvqaP6Cv6kL70ULf6g37x
h7G6/89yvuljX2t+6pZ/NnXs343VGCOOMKYYW3pzvztm/41T/vdY4Wzwtl2y
bQhzSvuP036P2Jt2arwQX89pLEv7KVP/2UD5uNvDTL3vVn7K/JL6L8SB+W9b
/TX1R6a8XcpPpn6K1H+Z+t3aNcCZ4E37ZNu8U3GeeG87fu5g9Qex/WbG/ez/
Vezt+QOxHxsrfPHy2HvG/k/saXP84XGFGeyR/3bJ9tO+6qP66r4jhWfs0/AH
8cpFsfeL/UrsuWJf0vZ9OfbkbT7aqc1vP8rvb/oKM9m7U/jIxSnvbuxr89dx
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
H6240HhoXBQb3k1T0WJH8eLwcMWT4sqDJhS/In7doMWb/+oWV/CDFp+Oa8/v
o4aXwc92b89P/Gg+M3+s1+LfL7vFh+AMcAd3jRZWtl6LL380UvGuuPfgCYVr
wbfuyX+TDRXfv1lfcQS4ArwJ/uSu1E86VOPZVrHfjD3XaJ3vmtz/brHnHC09
wtKp/xecOvYnsbfsK00GbcYH2S5N+51gSKOlA6AHgDG+M1Dtf5r6bWFSo6U7
oD+AWb4/ULoOx3or5dGh8kv5pxe3MQtnibuE9/Q2/2331D2WutPHSjOAm8ZR
0xIsl/pFUv5Dyoenftlu6S3oLo6I/fBI6ULoQ5YRK+T/hVJeINtfUl4MfpHy
7SkfmfZPD5ZWhGbk7/lvxdQvx79P+aix0ozg3nHwtCQ0JivFXry38CjHcbzZ
2/XdnW2dlDfMdlfKT9ILpf0j44vPXD/H/37qHox93FjV/TD2zvYZKP74zJRf
aff/zGBpSzZqx7Of/Tfvrfh4l5HiSw70TPL8f9AtfQqdysnuL79Hi3+yPTW+
4mfzr3n4lNSvFXul2PeZl8cK84R93hH7tNiPjJRuhX7lxtF6fnP2ln6AHoEG
AAd7VMOjYdB4WpwdbHqvkeJbcLZ3jJaGRB/CDeJfaFZoV2DV+JbpWx86vvE/
L3YLv4XjPhq7O1RcC87lm53SoNCi4FrwN293i7+hkbnTfN2t9+G9HDNWHCbe
GaeB2zAGGAs+Gl98nT6sL78xvvjHvUfq2/KN/SN1H3cLb4Y73zNW34RvA3dP
v+Qb8i3B6vF1z3eLH8WTPhx7jtF6z973F936Bn2LH48v/tM36lvFpcKvR4aK
i8XJztIpPhc+N08bj7caqHfrHf9goOIl/D4Mi3aBvoMe5ObW31eIvUJv9fGJ
fV2b3nrH3rXvybfiG/r/b4ntG6K9Mqeb229p3x+91eri8/a96CNLtG/N98jn
4Ht8L9ufxlfMLfbGeX5GPzBS93Cc7wlf2OJf+NEF2X+Xbukj6CTO9jzzO0vs
ebP9J+WXs52a8mnZXkr5v/p9b2k0aDXgDez/tv78muP0libM9yzeZPv/jLHC
nI1F+ze9B4wZ1nxB84F27tb5nPfMsdKAbJ36U9r56HXoa15sx1sj9vKxl822
Zrf0IPj9h9r3v3m3vl3fMO6TbTwwLhg7fLPGMpo33zLsnZ4Hx/79lJ8dX8/u
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

          "]], Polygon3DBox[CompressedData["
1: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
9Yn6xrgRsv5EsVuIXj+4syHrJ7SX/wPsSFm3
          "]], 
         Polygon3DBox[CompressedData["
1:eJwV1W1Ml1Uch/GDzAARyGYK+cAQnBANFFhQU0FzPLTSyq2W2gtdmRooRpna
houQcOHDJjG1Vk5zzqz5hvVgKVY409rMJQVomrDKTS1diq4i+9wvrp1zrvM7
33Puc/9vyFi04onlQ0IIVbgD2SkhFA4L4Z34EN4zkRYbwqvDQ1hrfMj4CxxA
quJx6gaTQtg5NITemBDOYoi5zxJDOJgcQndcCD2Yb34BqtWOkp9mXUtCCG1q
W6Ms+el8Jj/fPmmRwzC+35oV1h6QXav93brtaovUfWm8Bh+bO6KNsf6K+gb9
Tq5ee0X9TvXjMcF8vXVHZa9BvPx6TPaM+ShEh/mkOz2b+gz1NcavqO1EidpU
fgxfy+/hdiOLH8GP5Ofx93ITEcuP4dP5hXw6NwKJfBo/lt/ofO3c+8jhVyPX
OSYhG59Yl+A8A56r1fP86Lm6kMzvk5GPB+VskfOU+gY5STLu5lP5N/lmrina
mw/eyx45CdH9Ig6Hva9N+E7ucXyLofJ3ydjGNxkv0rYhhf+A368t9xuoQIJ9
58mp5A573xXR78G+n+uXWHtIe9H5V/HtxnXai+Z3yPmXf9v4At+P83jXPi9g
s/6maG/z/eqXu4dp/GRuofactX18DX/Mc5Xbv8m4P8rDn2rWcyecrUH7OiY5
b5Z7KTGXLScXZWrPWLdUTp07muh5MpCJdmvi+N+0tcY1eAkb5MyS06i+2HjA
HrdQoP8al+zZ/pOZZ10G/5d9PrTnL878nP3ajLfjkrvZqvZndUusXYylWCe/
NHqvfJ5+Pvrk9GMz1y1jrn6P9hgK9Hu1w2X9Y98cNSnRt2iPdfY96n6KuQdw
XN3X6OYT1N9SP5K/rPYrNPDx/E0+lb8enRN7+WbjbGfJwUn5p/AG1yn//uiO
rflB9mm86FmrrJlt7aOYg0o8zD2JZ/QXYLbac9ZVu+dE+/6tny3rLtm7zDeq
vWB8RL8Dl/lG+890P49FWdzjmIsT7rNRRq/68erGYUf0vaufpr7A3HTtGfPP
uueV5sZ6X4V8Gb+a/4h72txe/rrxWv1V0beFNjmV6u7jk9XdtOcAPvUMg859
jV+vrhFNaMYNrsU5y9S1YmP021Rb53lLzX1vfApV8iownStynhn2WRl959xi
3JZRYDxafxRy0WFdUDeT/0n/JMr5oujvFTcDXdHfDczhHkEZNyX6FvQzkR39
DTB/25mm2iPPGbMwNfqNcM87Z593WW28j9+PG+55mzN+471XyGpUd978VdSp
jTH3K3dV3W71f2jbuFL5U4xnak+r61GzRP4s42L+IW0Xf5Zfxm8w3sq3oFn2
Nf5lPlbWJf1BuQfNhej/FTca97iPZcZbPNdbmOA9/g8UNd3U
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[
          0.19699838300000003`, 0.252204821, 0.33320940200000004`]}, {
         "Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{2, 0, 2}]}}]}, 
     {RGBColor[0.560181, 0.691569, 0.194885], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwt1nmwzlUcBvBfLpdreb1lQspuuEIiWe69hESyX5GdlLEkkhrNlFQTsqWs
2a/lGvuaRg1KI4bkD/ueNTSWJjMios+Znz+eeZ7znOf7Pec97+933rd836HZ
Q/JEUbQVUqBzWhTtI3oELhxFK+hLiSiamDeKJsEEWJ+MoizzVYtE0aP5o+hj
XhJ34U2lu+KhBaOoPG8NncHLgi9hodp0XpraRXQ1+rj+OXReerc126pdnRpF
U4w/VfMZfAIbwgZxCmSoH4wb4LP8c/CIcRNoDKNgtZ719CgrM9Z4DIyGVfxX
+X9Yt5211llrqnF+c6mQD3JlqvNOyHxgPBJGwAAYCEOgv9piPuMyubHWuKVP
rnwzugh/KT1A5j6/ocx1e7wGV6Eb/zC/DH+GtUrgw/Lv8P/lNzAuZY2KUAxe
4x/kz+T/rf4m3IJWxsPNt8R3CkTRN7ym9IvQl/8yHmc/Jexnuf55jJfJtMBt
9Fyp59d0QfO9w+fHu82fgfswWu0+ma/UzrHPhOwx31FJ/vVwbvwkb5tsQfwn
r4Y+V3GmzA7+Yfl+1kronSuTzv/P/Dy1T9MP6Pn0mzJ76MdlWuvRBlrBSzLN
cCVcBe7KzJXfgY/p/wuuzL+D5/Cr2GdrvfrTb+A06y7Rszd9U2YhfUHdRTgP
7/GP8cvyG6rtZTxN7fu4mtoN/HfpKvQ6uqm1Mu3nKfw6/4raZ9Liugt0Vbon
fY3OoWvKpahdqGe2/sPDM0fvNH/K+rtwNm8znibfnT5El6a7qp1vrT44C2bI
71fbgv6Q3xzXlTvJfwyXMX6WXxpf4l2GGzDG+C89Z6gtE+bDeUIPax3gP6n2
Z3xYdjvuLd/SfA38tkxZ+18lM4h+gl5BlzBfEoqH94Ffit+NXwzW6VMAZybj
swjPySZeOdn08I7pe9o6Y/ml6Bup8Znf9gxPkUsJ55yMzzecW1d8QqYcfwNe
ILMYL4XV9FrcTt8lMBM288qH7whq69NJ/Uh9Cqmfa+6uderwKxgf4d/3jJ7U
YwxdK9wP8h/RBcP9wh+fiPfTSP48fUX+eDhffAb202dxlkxtmdMy9egq4X2h
G9HP02cS8ZnUok/Rx9V8r/9wuiL/Fev2o1+g+9Cz6OZ0s/DM0k3oDPoc3Ziu
T58N72D4vvWZnIif4Tr83+miOCe8yz7vD+a30t/hujKVzR2V6UD3prvoUYPu
YN1h/NrObhx0D+8hfyB/WXhn6fb0ULpt+I7UXg6fV24ydIPCvF3WKpIW/1Z0
zBvfgenJ+H5/6+G70DHcQ9atmozv4sH8eeFZUDs3Nc7nkzmQiDOp9EG6Pl2e
fuD8Cqg/IzuOf8r4V7UnccuwT5mL/PZ0P/oK/bn8XvlV9Bb8m/w23NP8dPvs
hTeFfeImshl0zfCOyX9L9w/3HN3Ffk+pm228xXrT9dmBh/HvhfuPv994Mf8E
nhg+Z7hP1G43nsf/CY/nV+Cv5j/wPU0Iv3Nq7+HbUNiejsrtpI/gQsZpkIBl
1lnDX46XwHI6Fz9nn53tY5SeE/SvnD++c/aqX58an/PGZLzXhkWdGX9Navy9
7KFX0YMe3oHV1W60ny/0KU6v5R+S+dFahxLxfZbOXx/e+2T825+p5z2fZZLM
P3hDMv5ty+Jn23cnWAwbw2+mzKJwh4bnQWZEIn4+w/mG+2FmeP9kZuMVyfh3
t4E+veynUviPIbPA3CKZHLwyGf/uZsjMtsYsyIH/AS0WKI0=
          "]], 
         Polygon3DBox[CompressedData["
1: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
6g==
          "]], Polygon3DBox[CompressedData["
1:eJwtlltQVlUUx3eew4Fz9MOvVKAaYMhSwEujNqIIFT4lIgiClaFmo4NZI5k1
vdSYk6moU5qXQJG4xCjI/VI56YzOZGmazWgqlxQNxbCLvZSTCvRbrfOw5vvW
7/zX3mfvvfZaJ+6VwpzVw4wx67EQLHmkMSs9Y1JdYxbYxmQGjJkaNCYC/wfH
mDPYBlhLuDFvoYuFD1jGbINNQufif45fhZ0bYUwK472BbiY8nfEWo9tD7FJY
BWwibCPsNVgm7BNYG7GniT2G3Q8z5g5WBDuO/zq6LHQ70X0JOwNbBZsH2wFr
hn0P2wVbAkuADWOOR5hjJ2wxrBw2BRYFm8I778Y/xboOY13EjoXdZc5PGWs3
dgS2idgXiN2L9mFiQ4hdC8uB7YKdtDR2JustgB2EbUaXge4SfAR+ADuBrgP/
FNbCfwvNfng5c9ZhefwfE2rMbUff2cUi0URgiTyrQDMeG+D9Kojf7+9LG6yR
508QOw7bSlw9rAY2Gj8C2wy7hjYI87AjxF7Fb0e3Ej8RTUKonmUXa7vG8weY
t5RnlWhSWdsa1jYLfz48HV0iPBT/ENpa7CzjTYONhnXLnmD9sF+xUbAw7Guf
FTFHD+uMZqwYLIzxumE3eX4bK0NbzVhbYIuYNwb/FtxDdwE2HP8e+1ACu8B4
32BD+Aa+0z+3RnRvEtsE+8DWPWhmzOX4Y1nrAPPHwzai6+K/i2Y4NkjsZHQP
orvEWN/659aNjYQNMk+Zn+Oz2JdC5miAFxOby3h9jLeN/1ttPVM52+2wl9BF
4/cR+2FA8+qKnDW6cfDp6Fr5rcGvxSbwjm/L2Oge538ZbCnPs9FFEz+d/w9h
HYwXgz8P24ImHu1a4nLQPYNVovmbef7BNgU0Z+ROFeNneJpTK5ijFH+Xpfkv
9+Bd2Hewy5beE7kvCcSnuFojBnlWFq57LXu+Dz/d01i5D3IvTsNyPY0dgt2B
nYflw2bA3iH+OP5FS/db9l32Wu7KMfgCT9l76E7gd1paj6QunYP9y7vOxl/C
ulMCmluSY+1oF3qaj5fRTeP5H47WgFmw87Av0NU7WnviYT/BDsOaHK0zCUGt
Oc34X8EdV9lN2EL+58vZ+nlfD3uMfd/LPMvgmUGtaw3EtqMJcXWOG5KTaMLR
rmCOObC52PM8j4JFYkUBtTPEHSX+VU81B4mtxq+xVC+sKVzv/CbGXODqmVfA
LFgG7GnYbFghrIbYBkvvrNxdyV/J4zZ4tqc1XNYiazoAm++proDYKvzPLK09
ki8dsEcZ/7KjtVFyV3LrCpqTsJc9zb394XrPstAmM28abI3sPeyopT1D5i2F
3YPNQTcD9mxQ67jUwiTYU5Jzfv7l4FfZeo/lPudJX8GPC9W72BTUWik184aj
5ye9Quqs1NteR89F+sweWBTsR/yzjt7LXjlLxuvHX+bp/kk9ll4yxDvn+nda
6qLUx1/QXXO0NvUQG4vuuqM9SN75Y1gfvgMPxYIBzTXJp32u1kGph/vQFst9
xq9ztJfJnYmDlbhao6RWZRGfbev9k359yD9zedfJ6Mbz7Ek0sVgy/z+ytRdI
T5AaKLUwFUvyWR2xq4ldhN9oaY+vga2C1bqah5KPc7ENxI0K1T5X6+ef1Jpm
dNtt7T3VsOWwMa7mg+TFOlg571tpaX+Qe3kRdh2/19IzkLOQ/iPfFD1Ypqv9
Sfbh/96Ohbu6T7IPP8ue21pTZJ9uwdbjv29rP5S+mMN4mfj3He1frbA0WBps
na29T+aQ/b+Kxra1Bsj55KN7Dv+uo98xLeha0B+EHcAm+vW5BO3vaCbZWmsl
72UPZS9r4Xme1iv5BvkTfyq6Ka7WoU75HkA3aOnZy9okj6TX/YZN8Puv5KX0
jX4s0t+rTsYLY6xuxnyROZKCmufybfQXFu9/M8iZyNnswAr8fZHcl2+tVsz2
v0Hi/b2Sb78U/279BzSBX9E=
          "]], Polygon3DBox[CompressedData["
1:eJwV0EtLlVEUh/GVetTCUgoh0yTDC0hlQYFFVCIIZofKxAK76CF0YCRFCEXj
BhFZUUJKdFUH0Swomkj0AfKCVIMsk8iRZKRRDvLn4GGt9ez/u/Y+pyTV1Xg+
LSKKkYnsrIizGRHtaEMHsrjuNRHDAqPpEeMYw9eciIv8K/6t+R2GMcF/5MtX
RpQi3448pK2OeG4utK8Id7mNaueqiDJndeZt6iPfLtpZoV/Ijrhp5y304D5f
L/9FZqddT5FhRzqq5HvNYzIfsCj/F0Vcj/wPbt78D1u4gbyIDeooP4I5/jcK
uHH5hPoQM84mkbB/0JzrrnZvOKrv9OY6dUq+Wn1t50t9qcxp+c/6Hfx+nJTd
hQJ+mt/HHcAprhqF/DM+x7dd5n5v6cVe/hNfIbsVZc7KsY7/zh/hDuMq16ge
9IYTzs7ok/pm/QNnx9Ukd1l/CRfQjUPLv9GeNjWFJ1wl8uVbzO+9YQR3uGJv
O+e3J50dczaEtdys/2c9V4srck0I/j9fyd2zf06/m/+l/sQ1vo//o6/lq7B9
+Q5+hb033Hkbg3gs0+Deb/J7nL3AJvs347p8jfmN3BBa7UjwKfklsbJZew==

          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.1830429875, 0.21424763749999998`, 0.0962851875]}, {
         "Directional", 
          RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0j1I1HEAxvGfb1xcceAQ1OJxg2FYuIQQRYM4uCgYTS2laEGUUoLiSy5S
nN2Jr0MNRlRauhR22FAkFuhgL4QoungqNqlTgqufw+Hh+3yf+/35v3CJxtbr
LXkhhGHJl0KpiIRwCj+QGL6TPX0Cf0dDmMT3sm/7w8v1JF7ENjm0r/JP+grO
4IFtGv/yKVzGDlyzt+OZkyEUeJCzeAIvFIUQxTiPYQmmnNt2/jF+cX0PfsWn
uGNP4w/+Xcb0ftmyJ3ETn2GfbOjN3vGJPiD/+F0+qMfdq9K9MzyhX7Z983sN
v6LXyhK/wev1Rb0K63g1nnbtPr7ku1jMx/URvVvWnb/F7+n3pUF/gK3SIrd5
J856h8/ySG+Sm/aP/I6ewYc4Kr32DT6nZ3E+t+c2/M+zuW+PGWy3v8o9P3+O
C/gCO+2v8Sd/g7/wLXbZL2GKV2Iaz+M1exkO8VI8J1cjx/+fIzPOT4Y=
       "]]}, 
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0ktIVHEYhvFvKu0yqRCIQdHFAl2EoGURhFE0hYmGo0TLFIJwoQhaIQSh
UmOrVtN1EYFtolWRdL+swkAiCG8MWBS2MAhCwUXR79Di5Xmf9z+cOXPmbO/s
yXanIuK5ZIoi9pC3qyMa8CsewGP2V/p+fdMK58nn1kSU6w/1CqzjJXifl+Iu
XokveBXW8s34iG/BGX5mZcTF4oizWOBdOMRfOh/gT3ADH8NyfIrPJO1zAyUR
jbaO9RF/bH/ltL7O2XF7p37ddkNO6WFvsJ/UU/qyvVVfxBO4hPvsw/peHMR6
fO0+duMlvhG7sALH7NXYz7dhD27Fx/Yd2Mt3Yqss2nJ4WX7rVzDvXgbxFz+P
I7wP53l3ch98wT3l+Qes4kP6e/2TVPMcn9C/SQ2/xmf1ghzlD/jP5HfKZ8/9
EG/Rm+QjP8jP+U8vyCQ/zLPO2mWat+EULifvgtxNR3zB27bveI/P4h2cSc7t
P3CUz+MbXOsao/Y0vuOrkncCm523SKOewQwewWZsx3HvWxs28SzewgksSp4H
XuXjeBMnscye16f0acnJnGuMYIfvH8YCr0/9f8//ARQ/Ydc=
       "]]}, 
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0s9L03Ecx/F3rVrCjBQ7Wqxwh5QCYTETI2xahzo0whR/IGqZP5qnfmv/
QjgV8RCxKEvw5qFjBd06BQMvKkJePApBiJce4eHF8/V67vP9ju93Sw9NFYpH
ImJWlk5EvElEDFRFLByLOJuMKGGPPYf19jyu2uf0P87uyaJdce2+fiAf7Cqf
Tzh7V3+NNfYLvGM/wxl5Lrftp3i9OuIJduIrLPDTeMsex51TEXkuozdILV+D
6/x5/rR+RhJ8HW7zWT6n90uWv4JbfDOf1fukmW/EDf4yf1F/L718GXf5B/xb
vYt7h8vykPuIK7KmN3m+T3q3HNW78L5cck0n7ns/Gb1Db8J7+FKqnc3b1/Q0
tuCes63YbrfjBbyBf/k8dtgV7/l3KuIXfuV/4qb9DSv4Hb/wP7DV+ceua8Mp
TPnOSbxqD2MOR/Ak/wiLMiZJe/T/b+D5hvC4PYg37c/uW3b/ZUzYpcTh/+cf
PnhDNA==
       "]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, 
     {GrayLevel[0.2], 
      Line3DBox[{1199, 1198, 2484, 1197, 3469, 1195, 1196, 2488, 3821, 1212, 
       3475, 1213, 1236, 2494, 3825, 1235, 3482, 1218, 1219, 3490, 2496, 1257,
        3489, 1258, 1274, 3498, 2498, 1273, 3499, 1275, 3500, 1278, 2503, 
       1288, 3507, 1289, 3509, 1292, 2505, 1291, 3508, 1290, 3828, 2504, 1238,
        3483, 1237, 1241}], 
      Line3DBox[{1223, 1222, 3823, 2490, 1224, 3526, 1228, 3478, 1225, 2491, 
       3477, 1226, 1309, 3519, 1308, 2510, 3520, 1310, 1312, 3521, 1311, 2511,
        3522, 1313, 1272, 3497, 1266, 3827, 2497, 1267, 1270, 3495, 1269, 
       3496, 1271}], 
      Line3DBox[{1240, 1239, 3524, 1318, 3525, 1320, 1319, 3833, 2514, 1328, 
       3529, 1326, 1325, 3835, 2516, 1330, 3531, 1331, 1336, 3838, 2519, 3534,
        1339, 1215, 1214}], Line3DBox[{1249, 1248}], 
      Line3DBox[{1250, 1242, 3484, 1243, 3485, 1245, 1244, 3826, 2495, 3488, 
       1256, 1254, 1253}], 
      Line3DBox[{1252, 1251, 3487, 3486, 1255, 1247, 1246}], 
      Line3DBox[{1260, 1259, 3491, 1210, 1207, 2487, 3820, 1206, 3474, 1211, 
       1205, 2486, 3819, 1200, 3470, 1201, 1234, 3481, 2493, 1232, 3480, 1233,
        1286, 3505, 2501, 1285, 3504, 1283, 1280, 3501, 2500, 1279, 3503, 
       1284, 3514, 1277, 2499, 1276, 3513, 1299, 3512, 1298, 2507, 3829, 1296,
        1297}], 
      Line3DBox[{1268, 1262, 3493, 1263, 3494, 1265, 1264, 3832, 2513, 1316, 
       3523, 1317, 1314, 3831, 2512, 1306, 3518, 1307, 1315, 3834, 2515, 1329,
        3530, 1217, 1216, 3822, 2489, 3476, 1220, 1221, 1227}], 
      Line3DBox[{1301, 1300, 3830, 2508, 1302, 3515, 1303, 3516, 1304, 2509, 
       1305, 3517, 1282, 3502, 1281, 2502, 3506, 1287, 1293, 3510, 1294, 2506,
        3511, 1295, 1203, 3471, 1202, 2485, 3472, 1204, 1230, 3479, 1229, 
       3824, 2492, 1231, 1209, 3473, 1208, 3492, 1261}], 
      Line3DBox[{1324, 1323, 3528, 1327, 3527, 1322, 1321, 3837, 2518, 1338, 
       3533, 1337, 1332, 3836, 2517, 3532, 1333, 1335, 1334}], 
      Line3DBox[{1349, 1348, 3540, 2521, 1346, 3538, 1345, 3537, 1344, 2523, 
       1352, 3577, 1417, 3567, 1416, 2545, 3846, 1419, 1418, 3568, 1422, 2544,
        3845, 1415, 1414, 3617, 1515, 2573, 3856, 1514, 1513, 3616, 1441, 
       3581, 1440}], 
      Line3DBox[{1377, 1376, 3550, 2530, 1375, 3578, 1432, 3575, 1421, 2543, 
       1420, 3576, 1359, 3543, 1358, 2526, 3840, 1360, 1356, 3542, 1355, 2525,
        3839, 1354, 1357, 3583, 1444, 3584, 1445}], 
      Line3DBox[{1435, 3580, 1433, 3579, 1434, 1512, 3855, 2571, 1510, 3615, 
       1511, 1442, 3850, 2553, 1443, 3582, 1423, 1424, 3847, 2546, 1425, 3569,
        1413, 3566, 1379, 2531, 1378, 3551, 1342, 3536, 1343, 2520, 1340, 
       3535, 1341, 3539, 1347, 2524, 3541, 1353, 1350, 2522, 1351}], 
      Line3DBox[{1446, 1447, 2560, 1471, 3591, 3592, 1455, 1452, 2555, 3852, 
       1451, 1408, 2539, 3843, 1407, 3573, 1427, 2547, 1428, 3574, 1430, 3571,
        1429, 2550, 1388, 3554, 1387, 3624, 1522, 2576, 3623, 1523, 1509, 
       3613, 1508, 2570, 3612, 1372, 1371, 3597, 1474, 2562, 3596, 1475, 1481,
        3603, 1486, 2565, 1487, 1495}], 
      Line3DBox[{1453, 1454, 2561, 1472, 3593, 3594, 1448, 1412, 2542, 3844, 
       1409, 2540, 1410, 3565, 1411, 3570, 1426, 2548, 1398, 3560, 1397, 3572,
        1431, 2549, 1391, 3555, 1390, 3626, 1524, 2577, 3625, 1366, 1365, 
       3547, 1369, 2528, 3546, 1370, 1374, 3599, 1476, 2563, 3598, 1477, 1480,
        3600, 1478, 2564, 1479, 1497}], 
      Line3DBox[{1459, 1460, 2559, 1470, 3589, 3590, 1469, 1467, 2558, 3854, 
       1466, 3595, 1456, 1457, 2556, 3853, 1461, 1450, 2554, 3851, 1449, 3585,
        1458, 1386, 2534, 3842, 1385, 3618, 1516, 2574, 1518, 3619, 1517, 
       3627, 1525, 2579, 1485, 3602, 1484, 3614, 1504, 2568, 3609, 1505, 1507,
        3610, 1506, 2572, 1494, 1493}], 
      Line3DBox[{1468, 1465, 2557, 1464, 3587, 3588, 1463, 1437, 2551, 3848, 
       1436, 1439, 2552, 3849, 1438, 3586, 1462, 1384, 2533, 3841, 1383, 3553,
        1382, 2532, 1381, 3552, 1380, 3620, 1519, 2578, 1483, 3601, 1482, 
       3621, 1521, 2575, 3622, 1520, 1503, 3608, 1502, 2569, 3611, 1492, 1491,
        3604, 1490, 2566, 1489, 1488}], 
      Line3DBox[{1496, 1498, 3605, 1499, 1500, 3607, 2567, 1501, 3606, 1367, 
       1368, 3549, 2529, 1373, 3548, 1363, 1364, 3545, 2527, 1361, 3544, 1362,
        1389, 3556, 2535, 1392, 3557, 1393, 3558, 1394, 2536, 1395, 3559, 
       1396, 3563, 1405, 2541, 1406, 3564, 1404, 3562, 1399, 2537, 3561, 1400,
        2538, 1401, 1473}], 
      Line3DBox[{1554, 1555, 2589, 1560, 3636, 3637, 1559, 1548, 2587, 3864, 
       1547, 3633, 1549, 1650, 2625, 3892, 1651, 3671, 1648, 1533, 2582, 3859,
        1529, 1530, 2583, 3860, 1534, 3669, 1645, 1642, 2615, 3884, 1641, 
       3670, 1646, 1647, 2616, 3885, 1635, 3664, 1634, 1579, 2597, 3872, 1578,
        3642, 1584, 2598, 1577, 1576}], 
      Line3DBox[{1557, 1556, 3638, 1558, 3635, 1553, 2588, 3865, 1552, 3634, 
       1551, 1550, 2624, 3891, 1665, 3676, 1666, 1653, 2618, 3887, 1652, 1532,
        2581, 3858, 1531, 3668, 1643, 1644, 2617, 3886, 1632, 3663, 1630, 
       1631, 2614, 3883, 1640, 3667, 1636, 1637, 2613, 3882, 1638, 3665, 1402,
        1403, 2596, 1575}], 
      Line3DBox[{1661, 1658, 2621, 1657, 3672, 3673, 1656, 1527, 2580, 3857, 
       1526, 3628, 1528, 1570, 2595, 3871, 1574, 1565, 2591, 3867, 1562, 3639,
        1561, 1564, 2590, 3866, 1563, 3662, 1629, 1586, 2599, 3873, 1585, 
       3643, 1587, 2600, 1588, 3644, 1589, 3652, 1605, 2605, 1581, 3641, 1580,
        3653, 1608, 2604, 1607, 1606}], 
      Line3DBox[{1667, 1664, 2623, 1663, 3674, 3675, 1662, 1660, 2622, 3890, 
       1659, 3677, 1649, 1572, 2593, 3869, 1571, 1573, 2594, 3870, 1569, 3640,
        1568, 1567, 2592, 3868, 1566, 3661, 1627, 1628, 2612, 3881, 1633, 
       3666, 1639, 1591, 2601, 3874, 1590, 3650, 1602, 2603, 1604, 3651, 1603,
        3656, 1611, 2606, 1583, 1582}], 
      Line3DBox[{1668, 2626, 1669, 1670, 3678, 1671, 3893, 2627, 1672, 1677, 
       3680, 1679, 3896, 2631, 1682, 1683, 3682, 1654, 3888, 2619, 1617, 1612,
        3657, 1600, 3875, 2602, 1541, 1540, 3862, 2585, 1542, 1539, 3630, 
       1535, 3861, 2584, 1536, 3646, 1596, 1594, 3645, 1595, 3654, 1609}], 
      Line3DBox[{1673, 2628, 1674, 1675, 3679, 1676, 3894, 2629, 1678, 1680, 
       3681, 1655, 3889, 2620, 1621, 1615, 3658, 1616, 3877, 2608, 1614, 1613,
        3876, 2607, 1599, 1546, 3632, 1545, 3863, 2586, 1544, 1538, 3629, 
       1537, 3631, 1543, 3655, 1610}], 
      Line3DBox[{1686, 2632, 1685, 1684, 3683, 1681, 3895, 2630, 1620, 1618, 
       3659, 1619, 3878, 2609, 1624, 1622, 3660, 1623, 3879, 2610, 1625, 1626,
        3880, 2611, 1592, 1593, 3648, 1601, 3649, 1597, 3647, 1598}], 
      Line3DBox[{1689, 2633, 1690, 1687, 3684, 1688, 2636, 3687, 1699, 1714, 
       3694, 1716, 2641, 3697, 1718, 1722, 3700, 1723, 3702, 1727}], 
      Line3DBox[{1697, 2635, 1698, 1715, 3693, 1691, 2634, 3685, 1692, 1693, 
       3686, 1694, 3698, 1719}], 
      Line3DBox[{1748, 2647, 1744, 1745, 3714, 1749, 2651, 3728, 1742, 1743, 
       3715, 1750, 2650, 3722, 1761, 1762, 3723, 1707, 2637, 3690, 1708, 1752,
        3716, 1753, 2676, 3762, 1833, 1834, 3763, 1831, 2674, 3759, 1814, 
       1812, 3898, 2664, 1790, 3742, 1791, 1792, 3743, 1784, 3739, 1785}], 
      Line3DBox[{1777, 3733, 1771, 3730, 1770, 1772, 3737, 2656, 1736, 3706, 
       1734, 1735, 3708, 2644, 1739, 3710, 1732, 1733, 3709, 2645, 1706, 3689,
        1700, 1701, 3752, 2665, 1725, 3701, 1724, 1726, 2667, 1821}], 
      Line3DBox[{1783, 3738, 1731, 3704, 1730, 1729, 3703, 2643, 1728, 3705, 
       1695, 1696, 3711, 2646, 1717, 3696, 1704, 1705, 3695, 2640, 1703, 3688,
        1702, 1711, 2668, 1822}], 
      Line3DBox[{1794, 1793, 3744, 1787, 3740, 1786, 2672, 3900, 1827, 1789, 
       3741, 1788, 2673, 3901, 1829, 1830, 3760, 2675, 1832, 3761, 1813, 1775,
        3732, 2654, 1764, 3724, 1763, 1710, 3691, 2638, 1709, 3725, 1765, 
       1713, 3692, 2639, 1712, 3726, 1766, 3727, 1767, 2652, 1747, 3713, 1746,
        1751, 2659, 1801}], 
      Line3DBox[{1797, 2658, 1798, 1802, 3747, 1803, 3748, 1804}], 
      Line3DBox[{1800, 1799}], 
      Line3DBox[{1809, 1808, 2662, 1807, 3751, 1806, 2661, 1756, 3718, 1754, 
       3717, 1755, 2649, 1760, 3721, 1759, 3720, 1757, 2648, 3719, 1758, 1768,
        3729, 1769, 2657, 3745, 1795, 1796, 3746, 1773, 2653, 3731, 1774, 
       1810, 3897, 2663, 1811, 3757, 1826, 1824, 3899, 2671, 1825, 3758, 1828,
        3764, 1835, 2677, 1836}], 
      Line3DBox[{1823, 2669, 1820, 1819, 3755, 1817, 2666, 3753, 1815, 1816, 
       3754, 1818, 2670, 3756, 1740, 1741, 3712, 1720, 2642, 3699, 1721, 1737,
        3707, 1738, 2660, 3749, 1782, 1781, 3736, 1779, 2655, 3734, 1776, 
       1778, 3735, 1780, 3750, 1805}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{1839, 2484, 1838, 3902, 1837, 1856, 2487, 4180, 2409, 3906, 
       1857, 1879, 2492, 4184, 1878, 3915, 1877, 1909, 2497, 4187, 2411, 3928,
        1907, 1908, 4192, 2513, 1962, 3961, 1961, 1963, 4193, 2514, 1967, 
       3962, 1964, 1965, 4197, 2518, 2420, 3966, 1890, 1891, 4186, 2495, 3921,
        1896, 1892, 1893}], 
      Line3DBox[{1852, 1853, 3909, 1850, 1851, 2488, 4181, 1862, 3910, 1861, 
       1847, 2486, 4179, 1843, 3903, 1842, 1846, 3905, 2485, 1845, 3904, 1844,
        1886, 3960, 2511, 1959, 3959, 1958, 2416, 4191, 2512, 1954, 3956, 
       1953, 1966, 4195, 2516, 1970, 3964, 1969, 2418, 4196, 2517, 3965, 2419,
        1894, 1895}], 
      Line3DBox[{1854, 1855, 3908, 1859, 3907, 1858, 1860, 2494, 4185, 1881, 
       3918, 1848, 1849, 3917, 2493, 1880, 3916, 1840, 1841, 3950, 2506, 1946,
        3949, 1945, 1957, 3958, 2510, 1956, 3957, 1955, 1960, 4194, 2515, 
       2417, 3963, 1968, 1973, 4198, 2519, 3967, 2421, 1971, 1972}], 
      Line3DBox[{1864, 1863, 1871, 3911, 2489, 4182, 1868, 1867, 3914, 2410, 
       2491, 3913, 1866, 1865, 3935, 1927, 2502, 3939, 1931, 1929, 3937, 1930,
        2501, 3938, 1912, 1899, 3923, 1900, 2496, 3927, 1905, 1902, 3925, 
       1903, 3926, 1904, 1914}], 
      Line3DBox[{1870, 1869, 1951, 4190, 2508, 3953, 1922, 1921, 3952, 2413, 
       2499, 3933, 1923, 1936, 3941, 1937, 2503, 3942, 1938, 1934, 3940, 1935,
        3943, 1911, 1910}], 
      Line3DBox[{1876, 1872, 1873, 4183, 2490, 3912, 1874, 1875, 3954, 1952, 
       2509, 3955, 1932, 1928, 3936, 2414, 2500, 3934, 1926, 1915, 3930, 2412,
        2498, 3929, 1906, 1901, 3924, 1898, 3922, 1897, 1913}], 
      Line3DBox[{1887, 1884, 1885, 3919, 3920, 1883, 1882}], 
      Line3DBox[{1889, 1888}], 
      Line3DBox[{1939, 1920, 3932, 1917, 3931, 1916, 1933, 3948, 2505, 1944, 
       3947, 1924, 1925, 3951, 2507, 4189, 1948, 1947, 1950}], 
      Line3DBox[{1949, 1942, 1943, 3946, 2504, 4188, 2415, 1940, 3944, 1941, 
       3945, 1919, 1918}], 
      Line3DBox[{1982, 1981, 2538, 2043, 4209, 4210, 2042, 2542, 2044, 3995, 
       2045, 2539, 2046, 3996, 2047, 3998, 2032, 2533, 2031, 3997, 2036, 3991,
        2035, 2534, 4207, 2034, 2197, 4082, 2196, 2599, 4226, 2193, 2194, 
       4085, 2201, 2601, 4227, 2199, 2186, 4080, 2185, 2597, 4225, 2189, 2182,
        4079, 2181, 2596, 2180, 2198}], 
      Line3DBox[{1985, 1984, 3969, 1983, 2524, 4202, 1989, 3982, 2017, 2020, 
       2541, 4000, 2050, 4005, 2060, 2548, 2062, 4009, 2427, 4006, 2061, 2550,
        2027, 3987, 2028, 4044, 2124, 2578, 4052, 2122, 2123, 4051, 2128, 
       2579, 4054, 2129, 2202, 4095, 2218, 2605, 4100, 2216, 2217, 4099, 2221,
        2606, 2183, 2184}], 
      Line3DBox[{1994, 3972, 1993, 3971, 1992, 1990, 2525, 4203, 1991, 4022, 
       2085, 2084, 2573, 4218, 2081, 4020, 2080, 2083, 2571, 4217, 2066, 4011,
        2065, 2064, 2567, 4035, 2432, 4032, 2431, 2564, 2104, 2114}], 
      Line3DBox[{2013, 2012, 3980, 1976, 2521, 4200, 1977, 3970, 1986, 1974, 
       2520, 4199, 1975, 3986, 2023, 2022, 2536, 3994, 2040, 4007, 2428, 2549,
        2037, 3992, 2038, 4049, 2441, 2576, 4048, 2106, 2107, 4046, 2126, 
       2575, 4047, 2108, 2109, 4042, 2437, 2568, 4037, 2116, 2190, 4097, 2220,
        2604, 2191, 2192}], 
      Line3DBox[{2016, 2015, 3981, 2014, 2530, 4205, 2019, 3985, 2026, 1987, 
       2523, 4201, 1988, 3983, 2021, 2025, 2531, 4206, 2024, 3984, 2007, 2006,
        2535, 3993, 2039, 4050, 2442, 2577, 2127, 4053, 2440, 4041, 2439, 
       2570, 4040, 2119, 2436, 4036, 2115, 2569, 4039, 2118, 2438, 4038, 2117,
        2572, 2120, 2219}], 
      Line3DBox[{2018, 1980, 2522, 1979, 3968, 1978, 2537, 4208, 2041, 4001, 
       2425, 2540, 2048, 3999, 2049, 4008, 2426, 2547, 2030, 3990, 2424, 3989,
        2423, 2532, 3988, 2029, 2033, 4043, 2121, 2574, 4045, 2125, 2195, 
       4084, 2447, 2600, 4083, 2200, 2203, 4094, 2215, 2603, 4096, 2187, 2188,
        4081, 2446, 2598, 2178, 2179}], 
      Line3DBox[{2053, 4002, 1997, 3973, 1996, 1995, 2526, 4204, 2000, 3974, 
       1999, 1998, 2544, 4212, 2057, 4019, 2079, 2078, 2553, 4215, 2082, 4021,
        2086, 2010, 2529, 3979, 2011, 4031, 2430, 2563, 4030, 2103, 2105, 
       4033, 2433, 2565, 2110, 2111}], 
      Line3DBox[{2092, 2557, 2091, 2095, 4024, 4025, 2094, 2558, 2093, 4066, 
       2140, 4057, 2139, 2595, 2173, 4076, 2174, 2594, 4224, 2132, 2133, 4060,
        2150, 2583, 4220, 2134, 2135, 4115, 2254, 2617, 4237, 2253, 2264, 
       4127, 2287, 2631, 4243, 2255, 2256, 4125, 2282, 2629, 4241, 2281, 2283,
        4129, 2292, 2632, 2290, 2291}], 
      Line3DBox[{2097, 2559, 2096, 2156, 4064, 4065, 2138, 2580, 2137, 4063, 
       2155, 4067, 2157, 2593, 2130, 4055, 2131, 4056, 2136, 2582, 2149, 4059,
        2148, 2581, 4219, 2147, 2222, 4117, 2258, 2619, 4238, 2257, 2261, 
       4116, 2260, 2620, 4239, 2259, 2263, 4126, 2286, 2630, 4242, 2284, 2285,
        4128, 2289, 2293}], 
      Line3DBox[{2098, 2560, 2074, 2075, 4015, 4016, 2072, 2551, 2071, 4014, 
       2070, 4013, 2069, 2556, 2090, 4058, 2145, 2591, 4222, 2143, 2144, 4078,
        2176, 2592, 4223, 2141, 2142, 4114, 2252, 2615, 4235, 2251, 2246, 
       4112, 2245, 2614, 4234, 2250, 2262, 4123, 2276, 2627, 4240, 2275, 2280,
        4124, 2278, 2628, 2277, 2288}], 
      Line3DBox[{2100, 2561, 2099, 2101, 4026, 4027, 2089, 2555, 2067, 4012, 
       2068, 2552, 2073, 4017, 2076, 4023, 2088, 2554, 4216, 2087, 2146, 4077,
        2172, 2590, 4221, 2171, 2175, 4110, 2241, 2612, 4232, 2240, 2249, 
       4113, 2248, 2616, 4236, 2247, 2243, 4111, 2242, 2613, 4233, 2244, 2274,
        4122, 2273, 2626, 2272, 2279}], 
      Line3DBox[{2113, 2112, 2566, 2434, 4034, 2435, 2102, 4028, 2562, 2429, 
       4029, 2009, 2008, 3977, 2528, 2422, 3978, 2005, 3976, 2527, 2004, 2077,
        4018, 2059, 4214, 2546, 2058, 2055, 4004, 2056, 4213, 2545, 2001, 
       2002, 3975, 2003, 4211, 2543, 2051, 2052, 4003, 2054, 4010, 2063}], 
      Line3DBox[{2170, 2589, 2163, 2164, 4074, 4075, 2445, 2588, 2169, 4098, 
       2206, 4088, 2443, 2584, 2151, 4061, 2153, 4062, 2154, 2586, 2158, 4087,
        2205, 4086, 2204, 2611, 2237, 4108, 2238, 4109, 2239}], 
      Line3DBox[{2228, 4103, 2226, 4102, 2227, 2233, 4230, 2609, 2229, 4104, 
       2230, 2225, 4229, 2608, 2223, 4101, 2212, 2209, 4228, 2602, 2210, 4091,
        2211, 2618, 2448, 4120, 2270, 4121, 2271, 2625, 2161, 4068, 2162, 
       4072, 2167, 2622, 2267, 4119, 4118, 2268, 2265, 2621, 2266}], 
      Line3DBox[{2231, 4105, 2232, 4107, 2235, 2236, 4231, 2610, 2234, 4106, 
       2224, 2607, 2207, 4089, 2208, 4090, 2152, 2585, 2444, 4093, 2214, 4092,
        2213, 2624, 2168, 4073, 2165, 4069, 2159, 2587, 2160, 4071, 4070, 
       2166, 2177, 2623, 2269}], 
      Line3DBox[{2307, 2296, 2633, 2294, 4130, 2295, 2300, 2640, 4138, 2311, 
       4139, 2312, 2323, 2645, 4146, 2326, 4245, 2452, 2642, 2318, 4251, 2456,
        4250, 2335, 2676, 2388, 4268, 2389, 4278, 2481, 2675, 4178, 2387, 
       2471, 4266, 2663, 2472, 4174, 2401, 2402, 4175, 2403, 4176, 2405}], 
      Line3DBox[{2338, 4148, 2339, 4153, 2349, 2343, 4151, 2649, 2336, 4252, 
       2457, 2337, 4152, 2652, 2331, 4247, 2454, 2332, 2647, 2455}], 
      Line3DBox[{2351, 4154, 2352, 4163, 2367, 2353, 4155, 2653, 2464, 4264, 
       2467, 2356, 4157, 2654, 2345, 4255, 2461, 4256, 2308, 2637, 2449, 4254,
        2460, 4258, 2347, 2670, 2394, 4270, 2391, 4171, 2665, 2390, 2396, 
       4172, 2395, 2668, 2397, 2398}], 
      Line3DBox[{2354, 4156, 2355, 4164, 2368, 2366, 4162, 2657, 2350, 4262, 
       2463, 2309, 4136, 2638, 2450, 4259, 2346, 4257, 2344, 2650, 2334, 4249,
        2328, 4246, 2327, 2666, 2474, 4271, 2475, 2667, 2392, 2393}], 
      Line3DBox[{2357, 4158, 2341, 4149, 2340, 2342, 4150, 2648, 2458, 4253, 
       2459, 2310, 4137, 2639, 2451, 4260, 2462, 4261, 2348, 2651, 2333, 4248,
        2330, 2329, 2669, 2476}], 
      Line3DBox[{2372, 4166, 2373, 4168, 2383, 2384, 4169, 2661, 2469, 4265, 
       2470, 2374, 2659, 2468}], 
      Line3DBox[{2375, 2306, 2635, 2305, 4134, 2304, 2303, 2636, 4135, 2301, 
       4133, 2302, 2319, 2646, 4147, 2324, 4144, 2317, 2316, 2644, 4145, 2453,
        4244, 2325, 2660, 2382, 4277, 2408, 4279, 2480, 2674, 2407, 4276, 
       2479, 4275, 2673, 2363, 4161, 2362, 2477, 4272, 2671, 2478, 4177, 2399,
        4173, 2400, 2406}], 
      Line3DBox[{2376, 2371, 2658, 2369, 4165, 2370, 2297, 2634, 4131, 2298, 
       4132, 2299, 2315, 2641, 4141, 2313, 4140, 2314, 2320, 2643, 4142, 2321,
        4143, 2322, 2358, 2656, 4159, 2466, 4263, 2465, 2655, 2359, 4269, 
       2473, 4267, 2664, 2365, 2364, 4273, 2404, 4274, 2672, 2361, 4160, 2360,
        4280, 2482, 2677, 2483}], Line3DBox[{2381, 2380}], 
      Line3DBox[{2385, 2662, 2379, 2377, 4167, 2378, 4170, 2386}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{2696, 3473, 2693, 2694, 3906, 3474, 2689, 2690, 3910, 3475, 
       2702, 2698, 3907, 2699}], 
      Line3DBox[{2700, 3908, 2701, 2703, 3821, 4181, 3425, 2678, 3820, 4180, 
       2695, 2697, 3492, 2767}], 
      Line3DBox[{2704, 3909, 2680, 2679, 3469, 3902, 2681, 2682, 3491, 2766}],
       Line3DBox[{2736, 2735, 3944, 3765, 3508, 3947, 2808, 2809, 3513, 3952, 
       2821, 2823, 3516, 3954, 2825, 2722, 3478, 3914, 2721, 2854, 3530, 3963,
        2853, 2862, 3531, 3964, 2861, 2860, 3533, 3966, 2857, 2749, 3485, 
       2748}], Line3DBox[{2740, 2741, 3945, 2805, 3948, 3430, 3509, 2789, 
       3933, 3429, 3514, 2824, 3955, 3433, 3517, 2719, 3913, 3477, 2720, 2850,
        4194, 3834, 2851, 2852, 4195, 3835, 2856, 2855, 4197, 3837, 2867, 
       2746, 3484, 2747}], 
      Line3DBox[{2743, 2745, 3920, 2738, 3428, 4188, 3828, 2807, 3951, 3431, 
       3512, 2820, 3953, 3432, 3515, 2717, 3912, 3427, 3526, 2713, 4182, 3822,
        2715, 2864, 4198, 3838, 2869, 2866, 4196, 3836, 2859, 2757, 4186, 
       3826, 2753, 2751, 3487, 2755}], 
      Line3DBox[{2754, 3486, 2750, 2752, 3921, 3488, 2756, 2858, 3965, 3532, 
       2865, 2868, 3967, 3534, 2863, 2714, 3911, 3476, 2712, 2718, 4183, 3823,
        2716, 2822, 4190, 3830, 2819, 2818, 4189, 3829, 2806, 3946, 2739, 
       3483, 2737, 3919, 2744, 2742}], 
      Line3DBox[{2758, 3922, 2759, 2761, 3927, 3490, 3426, 2711, 3917, 3481, 
       2730, 2687, 3905, 3472, 2688, 2734, 3827, 4187, 2770, 2768, 3493, 
       2769}], Line3DBox[{2763, 3924, 2762, 2760, 3489, 3923, 2710, 2709, 
       3480, 3916, 2729, 2686, 3471, 3904, 2685, 2733, 3497, 3928, 2775, 2772,
        3494, 2771}], 
      Line3DBox[{2764, 3925, 2706, 2705, 3482, 3918, 2731, 2684, 3470, 3903, 
       2683, 2724, 3479, 3915, 2723, 2727, 3495, 2773}], 
      Line3DBox[{2765, 3926, 2708, 2707, 3825, 4185, 2732, 2691, 3819, 4179, 
       2692, 2725, 3824, 4184, 2726, 2728, 3496, 2774}], 
      Line3DBox[{2782, 3931, 2781, 2785, 3507, 3941, 2788, 2787, 3503, 3936, 
       2799, 2797, 3502, 3935, 2796, 2812, 3519, 3957, 2828, 2827, 3518, 3956,
        2826, 2848, 3529, 3962, 2843, 2842, 3527, 2846}], 
      Line3DBox[{2783, 3932, 2784, 2786, 3942, 2793, 3500, 2792, 3934, 3501, 
       2795, 2798, 3939, 3506, 2802, 2813, 3958, 3520, 2829, 2832, 4191, 3831,
        2833, 2849, 4193, 3833, 2845, 2844, 3528, 2847}], 
      Line3DBox[{2803, 3940, 2794, 2780, 3499, 3930, 2779, 2791, 3504, 3937, 
       2800, 2810, 3510, 3949, 2814, 2816, 3521, 3959, 2830, 2838, 3523, 3961,
        2835, 2834, 3525, 2841}], 
      Line3DBox[{2804, 3943, 2790, 2776, 3929, 3498, 2777, 2778, 3938, 3505, 
       2801, 2811, 3950, 3511, 2815, 2817, 3960, 3522, 2831, 2839, 4192, 3832,
        2837, 2836, 3524, 2840}], 
      Line3DBox[{2885, 2886, 3971, 2888, 3542, 2895, 3974, 2899, 3568, 2961, 
       4004, 2960, 3569, 2919, 3984, 2918, 3557, 2936, 4007, 3572, 2933, 2934,
        4006, 3571, 2925, 2926, 3989, 3553, 2927, 3991, 2931, 3585, 3019, 
       4077, 3126, 3639, 3125, 4078, 3130, 3640, 3087, 4060, 3086, 3859, 3788,
        4059, 3085, 3887, 3792, 4091, 3096, 3862, 3097, 4090, 3106, 3863, 
       3107, 4087, 3154, 3649, 3152, 3153}], 
      Line3DBox[{2889, 2890, 3768, 3839, 4203, 2887, 2898, 3845, 4212, 2962, 
       2963, 3847, 4214, 2907, 2906, 3556, 3993, 3555, 2935, 3775, 3992, 3554,
        2932, 3773, 3987, 3552, 2924, 3988, 3774, 3842, 4207, 2930, 3017, 
       3866, 4221, 3127, 3129, 3868, 4223, 3131, 3088, 3860, 4220, 3444, 3081,
        3858, 4219, 3084, 3161, 3875, 4228, 3445, 3095, 4089, 3105, 3632, 
       3104, 4086, 3449, 3648, 3150, 3151}], 
      Line3DBox[{2891, 2892, 3973, 2897, 3543, 2900, 3975, 2903, 3567, 2917, 
       3983, 2916, 3551, 2922, 3986, 2921, 3559, 2940, 4005, 3570, 2964, 2965,
        4008, 3573, 2949, 3998, 2950, 3586, 3015, 4023, 3016, 3853, 3018, 
       4058, 3082, 3871, 3790, 4076, 3128, 3869, 3787, 4055, 3071, 3892, 3240,
        4121, 3239, 3891, 3793, 4092, 3089, 3861, 3090, 4061, 3098, 3631, 
       3099, 3160}], 
      Line3DBox[{2893, 2894, 3972, 2896, 2901, 3840, 4204, 2902, 3440, 3846, 
       4213, 2953, 3566, 3438, 4206, 2923, 3558, 2937, 3994, 3560, 2938, 2939,
        4009, 3574, 2951, 2928, 3990, 3841, 2929, 3997, 2948, 3851, 4216, 
       3779, 3083, 3867, 4222, 3079, 3080, 3870, 4224, 3072, 3073, 4056, 3074,
        3671, 3232, 4120, 3459, 3676, 3162, 4093, 3094, 3630, 3093, 4062, 
       3092, 3629, 3091, 3647, 3158}], 
      Line3DBox[{2954, 2955, 4003, 2959, 3575, 2920, 3985, 2874, 3537, 2875, 
       3970, 2870, 3535, 2871, 3982, 2915, 3564, 2952, 4001, 3844, 3776, 3995,
        2943, 3852, 3778, 4012, 2983, 3848, 2986, 4014, 2988, 3854, 3022, 
       4066, 3075, 3857, 3076, 4063, 3100, 3890, 3789, 4072, 3108, 3864, 3109,
        4069, 3113, 3865, 3118, 4098, 3155, 3645, 3156, 3168}], 
      Line3DBox[{2966, 2914, 3981, 3772, 3550, 2913, 3980, 2881, 3540, 2882, 
       3969, 3767, 3541, 2883, 3968, 3766, 3561, 4209, 2941, 3593, 3029, 4026,
        3027, 3591, 2989, 4015, 2991, 3587, 3020, 4024, 3025, 3589, 3023, 
       4064, 3101, 3672, 3235, 4118, 3237, 3674, 3114, 4070, 3116, 3636, 3120,
        4074, 3447, 3638, 3123, 3450}], 
      Line3DBox[{2969, 2967, 4010, 2968, 3578, 3437, 4205, 2877, 3538, 2878, 
       4200, 2879, 3539, 2880, 4202, 2884, 3562, 3439, 4208, 4210, 2942, 3594,
        3030, 4027, 3028, 3592, 2990, 4016, 2992, 3588, 3021, 4025, 3026, 
       3590, 3024, 4065, 3102, 3673, 3236, 4119, 3238, 3675, 3115, 4071, 3117,
        3637, 3121, 4075, 3635, 3122, 3124, 3654, 3169}], 
      Line3DBox[{2970, 2957, 4002, 2958, 3576, 3441, 4211, 2956, 3577, 3434, 
       4201, 2872, 3536, 2873, 4199, 2876, 3563, 2947, 4000, 3565, 2944, 2945,
        3999, 3843, 3777, 3996, 2946, 3849, 2987, 4017, 2984, 4013, 2985, 
       3595, 3031, 4057, 3077, 3628, 3078, 4067, 3103, 3677, 3110, 4068, 3111,
        3633, 3112, 4073, 3446, 3634, 3119, 4088, 3646, 3157, 3159, 3655, 
       3170}], Line3DBox[{2972, 2971, 3579, 2979, 4011, 2982, 3606, 3037, 
       4031, 3599, 3036, 3034, 4029, 3597, 3033, 3052, 4036, 3608, 3054, 3059,
        4042, 3614, 3058, 3143, 4095, 3652, 3166, 3163, 4094, 3650, 3136, 
       4080, 3137, 3664, 3213, 4111, 3220, 3667, 3219, 4123, 3244, 3680, 3249,
        4125, 3250, 3681, 3251, 4126, 3182, 3659, 3181, 4102, 3190, 3189}], 
      Line3DBox[{2976, 2975, 3605, 3039, 4032, 3600, 3038, 3047, 4033, 3603, 
       3046, 3050, 4034, 3604, 3051, 3053, 4038, 3610, 3056, 3167, 4097, 3653,
        3141, 3142, 4099, 3656, 3134, 3135, 4081, 3642, 3132, 4079, 3133, 
       3665, 3215, 4122, 3241, 3678, 3242, 4124, 3245, 3679, 3246, 4129, 3256,
        3683, 3255, 4128, 3186, 3185}], 
      Line3DBox[{2978, 2977, 3580, 2974, 2973, 3607, 4035, 3035, 3598, 4030, 
       3781, 3032, 3596, 4028, 3780, 3442, 3611, 4039, 3783, 3055, 3609, 4037,
        3782, 3641, 3140, 4100, 3164, 3651, 3165, 4096, 3138, 3872, 4225, 
       3139, 3216, 3882, 4233, 3457, 3214, 3893, 4240, 3243, 3247, 3894, 4241,
        3248, 3252, 3895, 4242, 3453, 3187, 4103, 3184, 3183}], 
      Line3DBox[{2981, 2980, 3581, 3001, 3002, 3855, 4217, 3011, 3771, 3549, 
       3979, 2908, 3546, 3977, 3770, 3436, 3612, 4040, 3784, 3443, 3622, 4047,
        3042, 3602, 3043, 4054, 3786, 3644, 3448, 4083, 3791, 3874, 4227, 
       3149, 3217, 3885, 4236, 3231, 3223, 3883, 4234, 3456, 3210, 3896, 4243,
        3253, 3233, 3889, 4239, 3454, 3188, 3878, 4230, 3194, 3192, 4105, 
       3179, 3178}], 
      Line3DBox[{3004, 3003, 3583, 3014, 4022, 3013, 3617, 2998, 4019, 2997, 
       3582, 2994, 4018, 2904, 3544, 2905, 4050, 3626, 3069, 3067, 4049, 3624,
        3048, 3049, 4044, 3620, 3064, 3061, 4043, 3618, 3060, 4082, 3145, 
       3662, 3209, 4110, 3207, 3661, 3206, 4114, 3225, 3669, 3230, 4115, 3228,
        3668, 3227, 4117, 3172, 3657, 3171, 4101, 3177, 3876, 3180, 4106, 
       3195, 3880, 3199, 4108, 3201, 3204}], 
      Line3DBox[{3008, 3007, 3616, 3000, 4020, 2999, 3615, 3012, 4021, 2912, 
       3548, 2911, 3978, 3547, 2909, 2910, 4041, 3613, 3057, 3065, 4046, 3621,
        3044, 3045, 4051, 3627, 3070, 3147, 4084, 3643, 3146, 4085, 3148, 
       3666, 3218, 4113, 3222, 3670, 3221, 4112, 3212, 3663, 3211, 4127, 3254,
        3682, 3234, 4116, 3175, 3658, 3174, 4104, 3191, 3660, 3193, 4107, 
       3196, 3200}], 
      Line3DBox[{3010, 3009, 3584, 3006, 3005, 3856, 4218, 2996, 2995, 3850, 
       4215, 2993, 3769, 3545, 3976, 3435, 3625, 3068, 4053, 3066, 3623, 4048,
        3040, 3601, 3041, 4052, 3062, 3619, 3063, 4045, 3785, 3873, 4226, 
       3144, 3208, 3881, 4232, 3455, 3205, 3884, 4235, 3224, 3229, 3886, 4237,
        3458, 3226, 3888, 4238, 3452, 3176, 3877, 4229, 3451, 3173, 3879, 
       4231, 3197, 3198, 4109, 3203, 3202}], 
      Line3DBox[{3284, 3283, 3700, 3281, 4140, 3280, 3705, 3302, 4144, 3306, 
       3710, 3308, 4245, 3712, 3309, 3321, 4254, 3723, 3339, 3341, 4259, 3725,
        3342, 3335, 4253, 3720, 3334, 3345, 4153, 3346}], 
      Line3DBox[{3293, 3292, 3702, 3296, 3297, 3703, 4142, 3288, 3287, 3708, 
       4145, 3290, 3699, 3289, 4251, 3274, 3690, 3273, 4256, 3275, 3691, 4136,
        3795, 3333, 3719, 4150, 3800, 3330, 4148, 3799}], 
      Line3DBox[{3299, 3298, 3704, 3300, 4143, 3301, 3706, 3303, 4244, 3707, 
       3307, 3319, 4250, 3716, 3320, 3322, 4255, 3724, 3340, 3348, 4262, 3729,
        3343, 3332, 4149, 3331}], 
      Line3DBox[{3361, 3735, 3360, 3407, 4267, 3898, 3406, 3410, 4275, 3901, 
       3402, 3403, 4266, 3897, 3404, 3379, 4163, 3378}], 
      Line3DBox[{3363, 3350, 3730, 3351, 4263, 3736, 3362, 3401, 4279, 3763, 
       3408, 3409, 4278, 3761, 3411, 3377, 4264, 3746, 3376, 3380, 4164, 
       3381}], Line3DBox[{3366, 3739, 3365, 3367, 3740, 4160, 3809, 3422, 
       3758, 4177, 3416, 3415, 4176, 3817}], 
      Line3DBox[{3372, 3743, 3371, 3420, 4274, 3900, 3421, 3413, 4272, 3899, 
       3412, 3418, 4175, 3419}], 
      Line3DBox[{3374, 3744, 3373, 3423, 4280, 3764, 3424, 3417, 4173, 3414}],
       Line3DBox[{3384, 3383, 3747, 3382, 4165, 3277, 3693, 3269, 4134, 3257, 
       3684, 3258, 4130, 3259, 3688, 3270, 4172, 3294, 3701, 3295, 4271, 3755,
        3312, 3313, 4248, 3714, 3318, 3317, 4247, 3713, 3316, 3328, 4265, 
       3751, 3390, 4167, 3391, 3392}], 
      Line3DBox[{3386, 3385, 3748, 3388, 3794, 3685, 4131, 3260, 3268, 3687, 
       4135, 3265, 3264, 3695, 4138, 3278, 3815, 3752, 4171, 3465, 3753, 3798,
        4246, 3461, 3728, 3803, 4261, 3727, 3344, 4152, 3327, 3718, 3326, 
       4169, 3813, 4170, 3399, 3398}], 
      Line3DBox[{3387, 3286, 3698, 3285, 3797, 3697, 4141, 3282, 3291, 3711, 
       4147, 3305, 3304, 3709, 4146, 3460, 3756, 3802, 4258, 3338, 3722, 3337,
        4257, 3276, 3692, 4137, 3796, 3721, 3336, 4151, 3801, 3347, 4166, 
       3812}], Line3DBox[{3389, 3261, 3686, 3262, 4132, 3263, 3694, 3267, 
       4133, 3266, 3696, 3279, 4139, 3271, 3689, 3272, 4270, 3754, 3310, 3311,
        4249, 3715, 3314, 3315, 4260, 3726, 3323, 3324, 4252, 3717, 3325, 
       3329, 4168, 3400}], 
      Line3DBox[{3394, 3356, 3733, 3462, 3734, 3359, 4269, 3464, 3759, 3818, 
       4276, 3467, 3760, 4178, 3405, 3352, 3731, 4155, 3805, 3353, 4156, 
       3806}], Line3DBox[{3396, 3750, 3395, 3370, 3742, 3369, 4273, 3368, 
       3741, 4161, 3810, 3466, 3757, 4174, 3816, 3349, 4154, 3804}], 
      Line3DBox[{3397, 3364, 3738, 3358, 3357, 3737, 4159, 3463, 3749, 3393, 
       4277, 3468, 3762, 3814, 4268, 3354, 3732, 4157, 3807, 3375, 3745, 4162,
        3811, 3355, 4158, 3808}]}}},
   VertexNormals->CompressedData["
1:eJztncutXEUQhkeQgNcG23IMxEAChIDktddkQRZOgR25OBJYcDcjWnP6dD3+
qvpWn2Rdn66uV7+qez7//vW3Lz88Ho+/3j0eP/7Ln3/589dvf3z/W40//ccP
IvKoEb3M4F07P8fP83dW8XXa3qn8q+9M4Vv/P960s5ofVmnPyu/uxt00VtGD
unxT7ZbdfrQcV9tZ5ZtsPXWlSjxA6OHX2XJAGMlpeVx9/Hq1nppuby/9qK33
GY9i4yLbf1Z5yTtf7frhrhxqdlKjtX5284bVfrgK1eV/ky86v+/u06rrMSqO
qupl5V+q8wov+3mdJ6pxt7+7527R+j/1Wys/P5W/W55Vi2+V71Rp1ypvWMfF
6vtT4wXOoNf6a/Wd6LqZV/GbJadVHrPet1EZF7L8/9QOUf4De/Ku33jNh6L7
5T2/W7Xj1X/18z4I78TpVHms80ZW/7zafW/cjpr91Wg9vnTTd7f+QOzekcyT
tbg6f86WCz/swa76PT0/8t7/eY5rr/N3FXY5v6sqdzar6E3tXmNVeuVX7AX/
j13GF1VW0ee0c3M4y78h9PBz/L831fbTrN5hU+kP1PCfauRcvjav3l/IlhP2
sAd+BeEcEu8QQghhP2a991WF6EGr/+835cl65wrCTnEHz2g1zuIP9/Tm/Z1u
RB8zmGVnq/e1pr9rp/oOudW9kqzxsXqdUhU5u8oPa9kdf9uj1bjT7XdGVP3o
rn5V7odGz+eqjf9R+vH6/iv5VfUexef4q6aP6Pf1ovVzdZ3iLd/p90//X1f7
ZseNl96y9j+v1i13t/PueHd3/vasz+rzbG87VO9PVWbFf/d8021erXJu4f2e
k7o+vPTavd9V5e5O6gFgJ3b350+b/+6t3656hjWoUv+R9X3isTZV959V+gm1
SL1KD07Zd5hK7gto6jMrftEbhBDCiswaR6aNX9X2FWANToujKsQutahqJ6/6
StX+ruLI+97Qqm7zqp6mxbtKnXc1f4ZwMqPzJOf4s/WsJsfd+cTpPKT6+2BZ
dURW7wtdZfb93Oh6KrV8cTe+sr6/+3cqelaTx9ouV38XTHXc7M7Te5redurm
P1byWfdTVV/Wct7176txsjsOVfFbNVInWpNT9VftPYSofKSuBwg9/Nz6HaHd
9ZjKO4Td80DXfq3617W/Xfulwuh1HYQQPtNq3kU+gjvEX7Q4rY4RQtiPp3ks
uw4HQliX0+ZR1c/L1O31LN/p+YVXHY71+anaeU2W/6j7Zzar60dNfqt7BNly
e8fj1XWCqr6yOaUOMPq+Q7QerdfLp783dLW+xEtPu9+1yqvV4ydafmt/8KoL
6Z4frfwi677cVLtAXz/0nm/jtzX8RLV+tQrV160Qe3Ukdpyl59P7Hd77JFPn
UXfXuVH7qFf9xHv+o/b+hrpfZdE7L3x80Q52mUXVfR41eSCs6Pfd4ujqfE+9
3+ryedklm15+k31vOmoerrIer8aqecq6v+r5Z/c76vluOk/r2dT2lbzjJrrO
sIqeutFqPLKuA1r5h3q9rnccXe3vabvdzxFU5OjCq/OjbDvezXdXz/VWcVdl
XQx7U9UPVeToIif9hh7295rnq1JtfQGxi2LcRdnBuh3rOqvs+RXx0DO+qjM7
Lqby9BwbO/UgdkTPykRv9+j9rgJ2ybUL1CT1cnAy8WcIoRqr5KUqcq746t5y
1X5BOIFW+ad6HoPX7Bp9vntaT/pKfjV/XdWNr+6tEHdQgVb3EXbfvcn6PUfi
Df14xk/1+qzupC6ipp5P39vvwt37laffz6oL9cqr6usIuMe77zyc+o3133vL
o95ONLv2y0tP3fTl/V59lXrpKnKq8HT+OU2/Wf1V03PV3yt8pc8q8u/aBUJI
fEFNqvuVtVxV9j/V5JneD6hJ698jzmLUe4aqcXtav3C3vaj8r+aXKvKwbwYr
+i2EyvQ+x91t543ev+s37V0+OItd5kvRct+9BxG9LvD+3ZYov6myzzbt/pdX
HWlUHqui56y8F30PJLp/sBbV878VT9c11EFp09ounxb+E70PDiHUZ9b6FEKY
T+7b9WDU72Cq7a96xYNq/Yb3eO1dLxQ93zjdB5yeD6f3vxqr72OjH009qOlN
5b7ePxrfZac=
    "]],
  AutomaticImageSize->True,
  Axes->True,
  BoxRatios->{1, 1, 1},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{382.7253851876737, 405.2229511489209},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]]},
  PlotRange->{{-1, 1}, {-1, 1}, {1, 2}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.348429682302607, -0.9383105156923371, 2.958261443487791},
  ViewVertical->{-0.1547488718103822, 0.4380237847652805, 
   0.8855438727998254}]], "Output",
 CellChangeTimes->{3.6686943546559963`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot3D", "[", 
  RowBox[{
   RowBox[{"a", " ", "+", " ", "b", " ", "+", " ", "c"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"a", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"b", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"c", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
+vXqXaM9i61ClPpHnUPy8vh9gKheu17NdNQTruk73rKrNdfBKPMfugiKo2vr
5TZ1uVmsDvjwuzv0Gy24DidwnCd1Ed5lvDWM65WtrUfXO38D7b/9j5xhuv3x
n/a1z+X6tcDBp3ftjr+vGuFTV1bL7m30XhJwyDlzr12Xmkby4F5wyqNLfdfc
CMLbLbpo1dOS6xkCp3zVsx/vP8xjPHfygnNrLLiOJdrV7RzUubjR+0TAwUdj
/ypwvBG+uHf7rv8YvVsEHHIun7Iz5cSf+u3/aTdY98rrxDLPXK5bDBz9Pd1R
e+5xbiLNK8wfr78vZXXS8rz90rBK/oM2nMcHPvUu2m35YsbvGQGnd6OGPpyb
3/D3wPVDd0/tqeH3hir+B9fpjj87H3kil+s3Awcf2zHXJr3PYfnR36tP1od0
y2U+2ROStzYy43eIgIM+odzSY2k5cbqi/8WVRgciIrKN3v0BDjn+mb3leLNM
xocEjos4YsbvAQGn/EeX4L55mTE6s//82xL0fmHUSDMzfs8IOOI/D35t8+Zd
NssTtPVF/ft5/J4RcNBfDayclJOVSHz8V811iTLjd3wIV/s7ZPGkOgnZicQH
+9ugw5bW+qw4lmdzoWt3NfwuD3D069KVN/N8shhfHDi3WSPj93FUHPxrdnGu
VjQ7Rlfiv+OlxB9q7q83emcHOPS87+WqJVEZMbqw/85nZffRfWUWGr13Axz0
oVUDhizNiCP8zdWClSbl8n4MHPL7vvv3n5KZrDff9PVzmuRyHX/Ik3agos+x
3BgTHP3Kr4s842ikf9DNa9NmX92UCNJzoXUeK6ON3lMBn50nb1qszuN3joBD
ziJj7tTbnxmnK/nffYP6a7VwRtPqGYmEXw22TPUwen8H6/RjVb97+9jeRzjs
DIG+gc2KG+YR9nngr+7+W/iWeSzhzW5fGtAyhetUAMd3qkP/Z/cWWDDeUNuq
Z7VcHk98F8DfssSq5BHm8YSPGezUpEyuzkTO2CaXq2Xbc/1q4NgHpvfI8b1o
2LeA76qy8E0DO657DBz723D/MQ8aGv4OcgL/sqWKztOwDwFfNzR552QHricM
OfEdWbWkV9uDmljCm6+471/2a2md1A/oB9QcPE5jHk30aLfgr5LbvpgxPntj
u5paG66zDT7mSf7uic9r6+Q5YV+dPQ5Rzly/F/R/9xgy9Y4t11sGDr291caW
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
5MQ8Af6os09yTcN9ONY+cu4fP5O0L4Ee7X5ZFpzU1XBeB071MO60+jXZcO7f
3nrevCYpHJ+F/oIe/SqSeyVxk+HeNXnI09ypvzkeB+cQq93dG/+JX0G74HNs
78nHXa7yPJHjC7yWpsXLodoQ0g/4+P7e0nqdBZ9P0O76jT939DLcY92n9fj0
OpPjntAu6MF/us/sXfUsY3XHYqrtvZLFcUnQM9YX8MSfZ7xTDOO17HiRgNDs
GJO8Rqxrqmdzc0BamBXzAW5XtWL7Qobz3ou8mgccjeL1wEfpazl4R3aUSV4s
vXOnzkOvbs1/PNZEk36Ae8w/2a6jRbyu4aVzcR7xjFNesMqH6my5P0k8oonV
LZnrFnc7MdgkTxH08C8V+Njr1xJNvO7MIL+7Nz7oTPIvuw+/0KhHephJniLk
xDlhYNjDAhY/DONwo+Wvnk8Yx/kK6xHnjSOFZ95e9YvPe8DXz29avKBBDmnv
XXr/xcMihnHd8fn988+bmQ/lC6v9onyOpZlhnnE6wsl+1a/SJPeUYDoX0bku
86POzLCP/B41N2hILOPws0B+qpOn3TGrajTzB/2a1oqizYwgeuC73V9ELzDo
EfSQ/+6Vyn+1ywxTVo4t8fv8Te6vfP+UvhcDbae/M9xPKp1+9nr5LMble6Pk
j9syb2qOQW/Snn9iVJXSkdmMg8+MZKXcjuw4RdrDN9S4UOaGYZ2AP+ZzSv8h
W0LMI3XffnaNPxHL+570IwAfuvJifIImUvfpav2Hcx5wfBn2GfAH/q5MwtaT
5rwusE6XVndsdc4iktYp+TV8bx/S63VKxLXAqxa/eT8E/51VfsaX+cL7j7wP
Up1R5yCboVHByuxvaz/rf0cRjvnW9+S8O++TYxTpj3PqNzpwX3KUIv2b4A/8
za/Slq/v6xTpJ3I5enPOYsdYZcWboIbHzBmX7/hQHmej109u5UTR+RB6G3Et
7K8FHUor6aXmhcx2YBzngYTZnw6kezIfzDfpd2vgXfiVt3OsIv198r0YzOcX
tgtmHMiNovfisW8EforM+Gt6TaXFlA1J5x0Yl+db7FdNMu7F7cgM1oU0fdrl
oh3jVAfmZh8r8xyutwc+J82v1Xlhz/X5cC6CPMAvN3vjWy+R/QjY93xiXmZa
jdLpbg9tcL9MThzX4VP5Sz/g/lm+lUY7xSrSz4i4COlnXOaZXrmtU7wi/Yz0
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
5N9/IXPmBA2/xwm8T7OlWwdowpUXTR71aJzDOMZX2v83fh756qdBXymNW9xO
yuJ6ANgHpJ+iwrn8fi8tYhUTP4Wgp3PIzF3+ZwxySz8I5rn0a5ws9uGFq2Ec
e6X8tWSoUb6O9DPiPD/zcFLoM3N+h53uvxXWhUUb9CLjbaAvGW8DXMbtyHfh
cQ+Ku7T/kbmBXsbVgI+ME4sJa1MlXmO4/4r4HOhBxuFoXIMqORq9ewrc5Uun
ZysNcst4LTmfgS+bvWh2Rw2/Pw55JjR3nltVE6vIuDXIYxI/Jt4xR397WG+f
Z2vol4xnk++AA38/cdjzdmaxioxnk+/ao920o2+Cx5hxu1Rvz+vy9VKG+SHj
kfD3Mh5JygO7Zb23j083+1PvQcQjgU7GI91qkPiighm/A459dUb/A0s0tob9
XJyv5L1V5lHJcylweZ6U9NgPY1ZkvCthE6/IcybaledhafeW+WHyHEjzT/hB
gEu7FnB5bgRuco4V72WTHeze+LeeNrGKPG9T3Utxbkd/pV9GvnMt6wTI+AHg
0o9z6/vehX2t4hXpJ4I80i8j9w3IX/PqLOeSsToTfxDalfEJwKVfvn2PsWFb
LGMVE7+8eFca8lwJ0FW9qOX3qSkf9Hq9KuFapqd6J17tq2/Uxpv4odAv6X+H
nDLeADj2Z+ih6LqMRn2/NlVGRfdo0VLD+pFxKZiHP6ynvssKaWCSJ0p+InV/
kHZgmS8Le++7k6eurDTCZbyc9LOcbzhm2BwN4/IdZOn38bn38XBlIxz3CHon
WviVZL4p7MzhH/JtuZfLONptmM+rzWRztj/gHmpiP1HviS+uLJqzPs/0/bGM
HQ2ye2vYPwL6tkO3ZH3Wst8H98RZFS5O/PPerXxXbWiq/eUvZkb+HZWP9ANC
zoNnb4ZcyjR9/23f7lsxX43q4FLd+LL3ZqSOKUb2QOJTfVaxohb8LjT4jDux
a19eq2JyP9cVWNI5/LA515cCnqv3quSr5XpUwOP37eoTZcb1+SCPtDNDP5qA
4ItZ1hzfjnnVrNrir9nWbM8EvbSXkj93de8vVbO5ThLaXeJ02Cw0NoLkxHny
8aInf+38yvGoVAcy/dOvRw84HpXyT3eMzfueyHUo6R2cUFuzQfERHFepzrfm
NSOuJcRxPBjwW5Vq5pql8TtakNPkPIk8rIUHfkYGc7wE5K87YU9I+k6OTwCe
07PwyydrOA4B8t//a33oHn+OE8C+d+2vem5rWg3k+aaei3ZdmH/Qtynb4cl+
K+Y59jeZF4l93mS9qO3K9QX+Ml8D61zmRwB3fPMj/5JHgwmHPCZ5W2q7Pwt0
HeY0vz/JCf10Syx+6HMjttsDL5/oe27NFR/CMU8qtZ7b5H7MIJqfVJdV5H3Q
fr7ryr9Di7MfAfxN8u9UOeV+Bf57fj8vdyo3hs4PkGdf1dRbAUbvYwDXO0zd
1CGX3/tCu/kWZAx7ksPvUWD+zLuss3qcx+/9Ut2eosVX78+JYhzzcPjR6HV5
/M4G6GNdNt3qk8fvZgCX8VEYdxmXBfzUmsfm23NjFNnfYiV+t7icE6PIdl88
+lBqfk6UIuVv+KL53K7ZEYq08/e/kJRdMDdCkfZYp8S1OSsyuf4Q+LTU7L81
N4/rloF+xF8XI//UD5J2/lL31u3fasbfL9zLXk+as+BPHR8Zz7Cy5MhBFc2M
6gmpeMbnyHKvcuMUOb4re1yJvpjHdV8gz/B/bIb/yuH6VZBf5kdgvcj4Z5q3
cl9V52ebIy3K/amXIf25Mo4R42iy76l8ZLwi5rmMS5R1lbG+ql9Z1DT5K8dF
gb7k2SIBdc05Tx78LWccWOhizvUI8Pu7FWpPuh7L+ybWu+VoH6elGs4zxPpt
UWy8zQgN5xMCt7Wre+i5Ud4g+LRqPPpiNQ3nJeJn4w+tHJ5oOC4Ef1dqX3C+
oxr2E+P3vvUbx0zUsB8aP1M6lJ+116huAn5WTU4ol5TE8fTgZ/nS5uBvM84X
Bf+dq2rectOwfxf0n9YU6viPUb4o6BPiLq+9avReCfRa/6x26j4z9gdjPx88
cuo0f6N3WCj+qtWETmOM6CneO37m5Ltm7K8Cvn575JbTuewXhzxPX9iWam7k
T4I8+/v8uBtp5Jeiepl2mZ3bGckDOa+4ZSc5G/FBu+d2DKvsZPS+NtWJtHMe
GK7hOhSUN1o/ImOaJX8PoO99lyf0bWbOeY/Q6+XXifVvGr3rTfkRzsPrRWk4
DxP0S+dl+hQz57oPoP+kT86uY8n5kNDP6b7nj2st+bwFfEu3DQlT7fm8RXXx
h9uU31anAf2f3p3e3rT7OjuOb8BPr3nL/l6vZf7AC1lOC3mW1ZD+j9/Pu7dt
5vDR9TjfVR3PXTtmNdyt4foj0OeP9m/rWJpz/ifofVst6p9ppDd6jyI65vJx
Wz43gL5J/Br/nkZ6gz57VrD0m270PjX4Hakxxe29BZ97wD8icKBrKS2f44G3
6O71YLQRPdqpXGN9iQc2fK7Czy5Zd2I7aThOgubR9BKz08z5XAV5lkw49WW9
huO6QF9q48ItpTQ8ryjO0G73kE5ang/gN/PLw1N6rVEcmPp7Sx+nbblmvP+A
/6z7de+esOBzDNr5XnLb9vdmLD/wy/f36xsa7Vfg/0JTRNdXw3FF+P3XPLv+
W7QcL0j6dqy6sn1Btu+QPvJX9fpkx/YX4Ntuu+VVsWM/E/g8b2iWPd6O/VLo
xwi3Y4eqGb0XjHnS4V39I3ZG7wKDfqvvngXPjd4FprywQ27+v7XcL/A5vaLU
3z207A8Gn0d3Nw2YpuV4RLpHNPbzuarlOE7ov/cTt5l9frOdAvjVOWY1A5P4
+wr9t3p0tGuPr2wfoTwXN/3HyUlsp8C49Nwb+qlmklG9TZU+78XRx/7BbN+h
d2AMm7lHDPt7yE4Y+/3MZVv2C0I/5rs9O+y0CzfZb+PvHt14/Re3Cz5XXU72
LHWpLce3qfp0/e6f8r4wx8NBn0fnvOiVOKw96Y3qnP3oubm7Pcf/gd7qkV/U
XSOc4mF6bv7qb89xgaAfPWvsVid7jlOkuvufhh27ur0d0dN7nnf9KtQsZBTP
p/Ife+BYLQ8Hjh9CP3o0P7jm0R0+h6Cd4iM6V/C4aZTfpf706LDs+DIvb45f
VPEiAZ7PhlvyPKT8wf6hJ7Nteb2Afl7dqgtPGc1DiiPaO7+3v9F7rJDX6kRR
TU8/L8LpXFS3Wr90d45rpHeH5rzW5zd61xLztuSRZT262rameQI5a7RKy1v0
og3JCXkGTPM8GpfQmnCqh90n9Ndwo/gttG8ZW/BZuAPPN8i70yHeb4QRjp8v
/V7PPerAcVHAP+8JW3OzCOuB5m/tm3WTjeYJ+XlfRb7I07JdCb/3/u5XYqMl
+++BD59z/KmHJcct4efWOXFpPkb04Hf+4qDUOZZ8LqJ8pZ+hybssOR4X9E36
ax4XM4oHxd8NL5da7KIl77f4fcGR3sfvaTleCvyHZlxYtErL5z2K38grNaaS
Fd+38Xfn7h4ba2XF91vQ5/Uu2PqpJeOgt/905ulRS46nwe9r79UfjdXy+RDz
KOh2g5dRlqxn/N1230mP/7Hkcx3W48n+ecVWRPN+iHm4dvPUpJR03vcxn5cX
y0nv/4DXHebzuwNHFhyM4nkAvPLyw9UrPGJ6rOOF3+e39Ta6X0GeqwPHtFpj
ZP8l+1vjTes0SYxDzps/xjzdls73XqyLxJ/fq341ogf+vlLk4yCjfmG9VLrW
/kCAEQ7+v9sMOqyk83cLfBz9Qw8OTuf9guojNdo8qr0Vf6fQfl67x8EtLTl+
heK7Bo4tGm7JcVfoR70nZi1cjPiAPtqx1/PSRvMEvy+yfkXLRKN5S3XkGvZa
XDyW4wCAe5zU1C/wktc/5ROldR+S+JhxOq/l73lpgpF/Avig4XmbLz/leQz9
7PPsZeb9nL9DoJ/S8cK89kb54Wj3ZkTJPi5GOOi3l/P9GW/N9RTo/DVG5zzQ
mvPS8fPI5b0F5mSzvw14rfAeDf+1Zv8ffnZwfVT/ijXXcUD7wzso9d5Zc10J
9MNv8fk6OUbvggE/+/FIvkCjd8So3uf+ek5+RvzJz3I3fOCE4nzuhV7Pnztx
ok9aR5Kb6JcNs/j9rhO1h/E527t6lYNFOd6X7GbFPM3L1ehAcoA+Mya19w3X
jnQepXeSD4R16OPEdmSM50mfon1X6TsTjnmUWGfhBo+SfD8Cn7iPJewW6nUm
5/NVOwJ3njfyB2Meju5+s2QRo/enyD97M//qltmc/4y/qx6a5/fC6J0prL8h
pfN2nLXi/GfQu63ZeDvOCKf7xJSl1vbZ3C7wh9mVv5czemcK/Gs+tL2Vz5rz
ooHnTiwQM8qa85bRbnSD3bFtrNl/j34Vd+qZGf6Tz2Hgo3jkdvzwic8T+Lvv
hwocPWr0fhN+Xqhb5cSIn3wOA94lQEkr9ovPc+Aff7LrnQ33eD3ip0Ni99ib
n7ld9ONL6+8DQqzZ3w99KG8e+Vul8/2E7v1LZlVLMBpf8Omb39OvklEdFsiz
6Mm3/h4/eR8B3qLGe80do3cVMZ/bW8zX17SONrFrze03ZfsrK85/wzz/d9O3
ralWnG9G5/eh16dXdeL3hrDuklv49VrtxH4dOg+WPFxU06AzyYl2bSoMOHLX
id8PQrv7HnUrXCCS91PQT/E/fC7dCAd90MtMH81t/p5h3T1dsr7KFUf2G0Ee
y/SMTpnFuZ4g6F+c7PztYwl+Hwrr0W9i5LN2CzrRuIDPAt+Lawdbcb4H+Ow8
VHVNgBXnuVEdbrebF4KMcPBv8M770jYjPsBH1W2+XrHi+y/dzxwD7iwvxn4F
jIt9/t7DNY58jwZ9YMNq7muM8g1AP+F286Le+dgOgHa1Ab3epxjVpQL91vyH
q081ev8F41L42LIvy43mG8ZleNPkG12N3smCPGeDB25xt+Z6K+RPHx96cH9J
HheqZ5j4YlaMUbvgP/ZRzv2+TvzuDPl/Z/17oaYj9wvj8s8P/7OTHdkPSnEd
c2pkdC/B/k66Hzw8nvfFke9TFK+4a9yo6/nYDgO9Heh5yzzQMdzkXLrrwow3
jS04Ho782okJYf0tOI4K9MH5xp+PMOf4IdB/bxt1VmPBcXs0vpGXJw7Vchwk
9NOjU6d/dxjh0HOBRf9UumnL75JQvpjzkqpzbfmdEdDPrN//o50tvzOC/los
6HOmrAXHjeHvxg0IyN1kwfGjaKfts6Kr39vwO9Hg86Ly0NfzLDi+DfI0+rZF
080oPg/0yQsdCjZ35feX6fu7713qOWt+D4LePUj66TnGht+RgTxL/k3PvmTB
8az0boxP7XVbbJgP8EaWq8v+suB4R/A5Os+qVQUbfo8A9OuTLrW3K6Cn/9N5
4Eibd51s+T0I/N2DJkNOl8/P7yOQ3ejxus8fp7UmOvz0y3m7stX6VkRH9qFq
5RoePcHvNdC+MWjH1Lp2/C4D+j3oSL4vPwpwu7Q/B0VdD9VynCv01zb+zIxE
W+4v6BsXeLNllpbjR4H7jns2uaSW5y34LDnYclJzI3rMr251+k7NMYrPwL51
vfmqiGijeA6sy1Pza/W3MMJBb7nnx/YGWp4/4C/jRej+8Xbotj5G7wsAT/Af
rzunZf8Z+L9sm6FfZ0QPeS7nW3hrgpb9WNiHPHw69yqTy+dqGoftQ15ez+Lv
PtlX3nZc+cAo3pG+C3VajvQ153MF9HTf78i7g0bnBxqfPeGrDppzvCDwqbPr
Pq9uFL8IPU13DB5c1ShuFXjAbIt37kbxr5hXY2LdH9zI4Tge/By5c3L1md/4
+4SfCZPKtq+i5fVO772UdTSbYsHx6HRve+xePthoP8HvX3qc9LbRchw82WfW
7atwwoLj4PFzRIcJP4YbxbMCv5Lr0fGrUbvAv/eqUWmF0f5D9Wnv3O50xyhe
GfiWcqHulYzmFfSgzPwr4HEojyt+v9F+XSfzVzqd/41dhW9lJNJ7tbKOyP6q
Fj89U/m7al02Lco/M5He8ZT1Qm5X32ZRMpW/z3+PunxrS24c8Sf7gponMqpB
vROaND4nTk1JWNginesEy/oxYyqGPliYynhm3zadzQ3y491zWadkceVx74ek
8ve/zouQOoVyOE6I7HqqPNXqWC1uncZ4ZsqQxh8t4un9O5wPLnwePE5v+Hu8
a0B1N/c9ipyTE0PyoF/Ic3FUnvWKTuPzL/JczrcdZXY/nf1548JfuwcZ1W+m
/U/l8/Ovhi2t0hnf//F97qBsjlsCn+mTVvX31kTSO7A4DyEe9dKhrjd/f2H/
DPLCDs1Z9eTnZ74fjC4zzNY1l98Zp7rgKv3HC98L/akDDvzfy95bNxi9Y47z
E+iLXHVXgn7x/fJ9jYmh/XL4vW/gkHPE4w7r/X+z/wrj1b7ezq1l0/je0G7n
ncwww/hC/8B/Bt4f0imb34Wnehhq3OnkVOclC1PZr7V5WnoL7wx+px56QNxs
fORJB4sU9ptllCh98Xoiv1MPPubp1h37lm6kYL3Qu8tqfOmilUGbrXPYb292
bFDcloqKgvVC91g1/vam/4o3f+p60/vKKp/2S1dP8M7h9xP8jr1vFb+5hQI9
UD1yNY606qZenn/qj1N91tvVelgYvsOgl/xHLi8fUDmH4xTK/cyabFXI9N0G
M0vbAg7bWpu+S6DKv3jugLPLs03x/fOT747KZv8q4ksz63o3GZnLcQA1Ir7s
TXQwfVdhUk+7j5cM5wvID3x33C/fRkbvJ0B+6CHfBl01h1zGMa+6/lNxXNEC
fH+j/MTFy77ucDONH8R7KPS+5s1e5ru18bQ/SD47F/TTRbox/eHCZ8I8//j/
1feMZNyiWbc1X+q59SS85jzbQDMDjn1Jxi1WKzih6NkqjGPfcNV/rX28HN8z
sf/cCuqku7u2C+F1s0eVCrCIJf7Aezac3WykeTTJCRz8Q5ZXKJvzg+1ngQ83
FHlnFk/rjuwgqp4XzkwKbpjAdrvtXcxa3jTMD7yvJOm9pt45PPv/tXXl4VB+
X5wZY1DI0qJol5IWadE6pY0ilepLCy3atGlBaFEqLdpTSZsipVVUooxQqRSt
KGUZ2fd1FsOP3+Pc8z7v7a/3ec7cOe9973vfe88953M+pxz9dp3LwnYqtrYH
/SA/4Wf7YIqsknyPLPtLmOC0cqi0FP0W0H+1kwtmtfGwg5307JxfXpBiGekP
yKG9/wCeqCQL/Z0kzzFqlnVKHPpdQB407116eTb6afhr9p1S5BSR9Zn9vviO
CSvfRAupdW+XbHJFYSb6X0H/ouuHr+ypQj/rz9RABR+FIjI+hLdJ6Za5sLVf
MD5sPK981amFT0tpvLBr2i5J/g8G/veJvfq+1nUH+s/G8yZHRJyMuYf+M1j/
P9s7ivtIRFT/NeYMGb9CjP48aB+56G3+VAn6/y5ujrs9sbmQ2BXs92gyZbVL
QiP6/x6Mfeza3Noe1mF4Lmg/a2rT7uuN6P+D/lTNPm/kK0Z/pJvZvaMObf7M
dj0kjtL+XvzMP8RnN6B/Efp/fsHwz6sl6AeNuZP2po9cRPYpaA/3/WLVohMq
LqX07Jwf+NJPUkm1PxPyNGlcFfrLdX5cK+ivkE/eO/Frt/eziD/OM/4x+vUn
+O/yPNWUTZ4L3gvsv+4rxMFKUsRZaDecK9aQZZPxh/eynxP8xF6aTuTQ/q/T
fYfjkmzyvKTOVrv+Ccvee1lKEY8V/e71uw5ixvrX/ryDf3wOWNhI8/2Dnuup
Xs8n1iJuhf/6v9W/m9PJOJC6769jEyeV03z8sL+3rJWNUZWh/Hj1UdGUqlTS
f3guaK/vcmZ2oRRxUmBXJGwzqX8nQ/zciBdhz0LSaT7+RxcPT/8pSyfjD+8F
nitg1ckneRLEv8B9x20c5PRaWkjJHTbHb2vjT4d1I3BT/ugIkZC8F5AX6M5o
DP8tJM9FeO/a+5+zI1HltgxxVYUGi7nTa1OJHnb7ZvfF+odkiKuy3/jcMF2c
TvTDeMJzOTitODFAijiv6W/2uz8rFpJxIHyo7fr1PauHOcsQDzV51qB+lg2p
pD3hHWnPN3lnJfg7SR33nQfPVdW3NIkE7P0IzuXhhr7TPfqinTz+wciEoNZz
Kqz/BIfVnscRJI2bu4MRR8ns1OlDc+t5mm1vQz7LqVTpkq36uM5DHqLFyN8u
Lzvg/gXyPeYdzrTxLJO8uvbnUpqzqaOsI+5HFys6T38gEwnY+xTcd65TsFM8
wy8Jz3vpxFnvvVr0c+l6mio2M+JJJC9mB/fnlE64noy/L59sKMf6hiSu2N5/
r6J9n+JF04l8g/3QJyZSrF/Jfl8+IaPXbtZDf6hm1y4RN2VYhxH6Cc/ViZux
KLx4Ntrhs/sW50mxbikbX7/86OoFiVp4Hpk/45ussvX9ss8poN9/VeqhXQy/
7fo/20dNk1cK2OcgsFeVjux86cvAN4C84FDunVAe8iIQ/sZjmp9XMOLK56Kl
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
lQ==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
0t+F/wNztp5t
          "]], Polygon3DBox[CompressedData["
1:eJw1mAnYllMax095vx7f+3q/D6UIJcU1wwxmrmsujEFECVmzNKiEylIxMlQi
sgxlbYySkkq7dluiULKEbFmTPdm3Ikvm9+s+ruu9r/f+P+c8z3Oe+9zL/z6t
evQ7rm/DlNKtDVIq8X9RJaWn+H8aGVQJUf9fkVLresbqUmpVk9IT4F/AJ/C/
D+OfcPNW5ZTOZf6D4Lu53orxU/lvB/6M8a0Zf4b7t+X+BVzfyPjZzL+P8THg
ncHja1M6GHwP8zegX8r8fcEnMt6M8VHMb8ham/OMZ6spnQmewvgVjL/N+PHg
geAKc8ajH4dcBt4cPAH9ZuaNB09EbkG/m2tlxo4FH4B+FnIv+g2MvcvzjuJ/
F9eDXFnEdcffZX078D2HMv948DHI7eh3IiWe15L1La8G3gyckDvQJyI16L/5
TPRrkIrrQ85DmcXz79B+yGy+vwfXdk3xjX6rc5x7BPN2Yn3ngBeksLm27408
kMKm2nYEsh59G9bzFOu5Afyy38/9bbj/X+Al4DV8zyLGuyNvo7fg2z5n/AzG
p6X4Zm2jnV3LO8ypY0435r+FvhP6l8wfyvh0xmciV6GP457v0b9FxqKfjFyC
/hr3PMS9/2ROW22PnIJ+K/IEeg3rbcUz+zN/GbgEXogvnA9eCv6S+5/k/jHg
AnvukO3dmP8NjP+IbI1+C+PfoJfRF9WFzbRdC671Yew98I1F2EBbjEYaNYh7
vFd/+xX9Z2SyscA7xvHu/YwJ8GCe2Yv7d9W3q7Em1+43uFb33L3fnmuPM3dH
/hs0CJ9wzSMZ38iUptmf9SF9aQbveIz5/wavAH8FXsz4UPCHrsdx8DDwWl/h
O8H7gTuBG4KXgPcF7w/+nPlLfT5rfRT8EbhJOXxAXxjJta7MvRp9HvqnjDdm
fCz4NfcP3BR8G3N+yrbVn7TB0eDppbBNM67/ksJmftMFjM9H/4LxBXxPV553
GHgzxnYsx/4b32tzPO3P/I5JB8BePG8auB5bncqlQ9APRy5Er3JtKvo61j+n
NvbMvdMmrtU1a6u1jB9cRIwZa2vAk4uwoeOfgKeC3wJf5l6D59VGTjA3mOPM
da7BtZizzF36tL7tGs1t5jjX/iPji4rYM/fuB/DCImLe2F8Pvg/8BeN3gX8G
PwT+wRgHfwS+q4iYNraNKfOA+cBY+wJ8L+PvG1+ViFHzmPnM2HXPta021he+
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
HRlwUw==
          "]], Polygon3DBox[CompressedData["
1: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
IeD99z8tW27H
          "]], Polygon3DBox[CompressedData["
1:eJwt1Flsj1kYx/Fj39VWa6haGltC3NgiiAsiscYQxGAuEIlaYm/V1pAZxDIZ
O5FwYYlUpmpnLIl07FQwo7S172ZSa0r4nHDxzXnO9/zOc877f982+ZcpQ1JL
hxA6ozzaVQmhmrEsGqBvhRASE0KYyB80P4GHFhMqh3CX78735rpiL/+5Ugg3
+JV8lr37zcuWCyFZ/g2fzu/gdyLPnk3G5nwbvpZ5TdRFIlpzLRDvV+rH/XrI
15afxB8xz8J959bV/xG/ju/GjfYQ55HCv+VTeGWoCGXopU8dvpWJK4aq+F2f
YpMrfI69ueaz+AkYj8HxTP4WP0w9FIv54cZR+u3gP9o/TN2FH2k8IP8XP9E8
HWkYJD8P59V/IzeeLdvMuR15Q0jCZvve63eN6FLl+zvqZNyv5wf+Ot/NvC/f
B7vlS/g8PpU/yZ2Kv53fv62H/8T35E1DdWTLf5W/yU/ns7k/8ZKvJV/Ez+Qv
cRfxmq/DP+Cn8me503jC1+Dv8XM8xxpuFVZiLWZzy+XPqM8hXqCx/Av5XM+S
aF5Cf8Fn/CGbgevqf1CsfwP5p/LT+BX6FapP2luTL1Dfllkke8l4FZlxr3GM
/Hz5DGyJ3xt+5qaYn7F+FqncVKRyc63dUOfgELZzyfr/yheaP4r3tKeRc5/z
mfwDLh/v+ST+FX/R3ZI8V0Ufboa15dga74Kf1P1QwXoz+f/kL8g3LPf9Qy+D
UtgguxTH6Jso0b+h/DP5RXwRV4BPfD3+MT+OX+DOg9DO2jaMjc4LX8ht977X
yd+Jv40zZ1hbHd8ZXnG19bmvzzz5/ly++phcvrWxxsnyx/U8jKNYJtNUZhZ/
xfw5SnuONvp85NP0GShzR33U/vX6tJdN5/5Vb0SL+P1jLrfM2mP1GyTo01Kf
YntH8mnWm6hHqNta72AcH/8e1JfjHr0S5R/KLJYtML+HXdZSMIDLRBFXiH3c
HizhFuhzV/0i/o9wbnN9/tcnK/59yObhN2tLMVN+ifwt9TW8s1Zf/on8N131
upU=
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, 
     {RGBColor[0.368417, 0.506779, 0.709798], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
          "]], 
         Polygon3DBox[CompressedData["
1:eJw1nHe8U8XWhpMcDoRkJzmK5YLt2gCxK6Bi7wWwYC+gWFFpiigo2BBBiohe
UVHsvdeLYm9YAAHpgjQrdkXxiu17Htd8f8wvszKzZ5fMnlnrfd+VjU/t06V3
IZfLNanP5Rrx2THL5Vbkc7m7sD+v5nLbYP+bDpOxl2N/1SSXO5z2PbB3L+Vy
5xRzuUuwT8C+HPsDPjelfyvKNOrnVXK5o2jfl/pc6j/xeRRtR1NWUj+E8ZfT
fj/1Lxj/G8Y/EntP7D0Ybwb25ti7Y++KPaWcy3XB3ht7HuMdzPHHMdbP2CWO
74R9Yhp7BfYW2Btg1zXN5W6v5XILGa8Dx7elvT3jFfn+1Lpc7sLGudxU7Bs5
ZiPsZdzXaPpvyfEbc3yefhOwc3w/iOOXcvxI+g/kuLPofy5lMPXutJ9J+6G0
j6L9LOx9OP4T7MHYsxjvHPoOom97zvUo99OC/i1pn8b9zOf6dsTeGrst/SfS
3g57W+zptH9H+4nYR2JfSvsPtN+K/SvnuYnrO4PPXTnfQtovof0k7FNoPxD7
Quw89tnYh2OPxp7E8Xti74A9k/E/Zfw9sHfE3o3297nek7jextz/bYw/gWs+
Gbse+1bs/el3LP2PpuxD/QXG24369tRnMN4OHL8t1/My/TvRfwHj70T7drS3
Y/ymfH864w3geUzD3oz+jej/LO1fcq73sE+gvQn97uD4Jxl/A47fgvZZjL8W
7d9iv4u9jP5vM34z7J2wd2a8Q2k/hfF+xc5o35n7/5n2B7BPp/0U7KuwT07P
4yPGvxD7eL7vyPmO43N7jl+Sfs97sJ/Dvprr/RD7ROwr6H9Smg/bcr42tM/E
/sPfi/Fuov0+7AXVuC/vr0B5ymdE/zO4vwr3dzfnO4Hx2tI2j7b+jDeVz6+d
D3w3m/rh9D+N+mrqFca7nc9FtC9O71APjnmGz798hxjrXuo/Ul9CGU/9v5Qm
HL8P9lXUa1m0lTn/XZz/Hb7bkPbv8/HOX+w7S/1F2vej/Va++xj7B8o91O+m
fEL907Rm9KPcTP2LdM8fUrZivG0osxyPa+pO/Tfq13Ktvfm8kb5fUu6kfofr
DvXPKBO8dp7f3dQv9llxv0M4foDPj+d/HccPxj4X+y/ax6T3qwfPsx9lPvXv
Of4Wjr/A94fjN87i/n0On2FP93nSt8r93cP9DeD7CfS/g3IR9Z8Zfw/ae3G+
txh/Hv0vwB6BvRPH30n7/Yx3OfZ02hsxTjfaL8b+ALsN/b9hrPcZazXP8mmu
Z13sXXw22NOYr5ti74rdgf7vYK+D3QF7F+wrOMeu2O2wp1C/kM/bfdaUgdTP
pM+jfP6OvRvXciHlZK5nFd9dQ9tRnL8X9iiuZ2eO70f7Cdi/0D4iHfuH7xPf
zaDeiv4V6pP8Xem/NfZm2NM9B9fbk+OPdH5gX8nx52Ifhr0C+wrsden/C+M9
hP0Rx3/HZxfaO1G+oP4Y5U/aV1IepN6c/n9Tf5z6KsY/AHthmlufcvy0cqwv
rjPzaS9yvhHYp2EfzPlm8rxaY7fB3gH7VY4/hOf/B/1ucb3m9zge+3zu/33a
z+T7vbiWz9N6fEQx9iv3rQuwV2A3p//x9H8F++hizF/ncT/sL7DXr4s+9l2P
89XTfgH14zhfgfOdSNsFHD+F/q9hd6b9q/S8buaeWtP+Jf3H1mKd+We9oX2Q
6zl2O9pbUT7k2LWxn6D9Y9ovon17zrdjIfafHGPthN0BexH23zyfv3geA+j/
ddqP/8A+z/cT+zLsPxnvcMY+LD2jHpSDOf7L9Pttx3g7YO9Mae+5sliPdvE7
f1vGO4zx9kr7zytNo83zD8BuwngjaZ+PPRD7Nq7xUM71O9/fzP2+Sv+BtJ/o
WkD7LbS3p/172v9D+/pZrAU7YR+P/R2fO9O+U+ozn9KYekvK59QXUDLqZcpH
xZhPru9rcE2bU7+6GmvT1rQdy3hdi3Fvy9P+2IE+uxXi+Rbouwv2nqk9jz2I
Z/oi9fPp+6+GXG5oNXyXvoxzDOMdyefm2O/Rpw992mJ/x/mmYPfF3qEY67fr
+HnYC7Fr7p+UmTyLPs4njn+L9iGeg/Ovpn9vvj+a8f/iswt9N0g+ySWV2Deu
om/zhpgjzpXuzLeXfZ85fj3sb+l7A8d/w+ea2Guk75ZQ/kV9NP3n0f987DLn
f4Exh2Ivxl67LvrY90dKU+rFNGd7FcN/04+7mv5XVWPv2dLvOd8iPteh71qU
j51rlI3o/zb9e5fiU1ufyj27tddL/U3qSxnrW+bXSYz3UfJXunH8U9hXpvk/
h/WgL/a5+gc8i4/LMZ+cV4dx/pPpvzvjLU7zcVY5/DH9skNpP5XPa7HPSPPz
NNd3+i9L87FT2pP+Q5+Mts/LMZ+d1+04/rxi7I/uk8Pp+yntQ2mvc9+mveRz
x+5Fe0fax3NPD2P/wvc30v4s/bfGPst9rhJz2Lk8ht9jjtfL/TenvRXtO5Zi
Xjg/NkjPyHfQ98337nDGe4/+69O/NW3b0//0Yry/c9J6MrASa+sw6i0aYv86
X3/X9yWLOehcPJbzv0Sf1Yy3HeP14JhD9P/K8Xv4u7SpxZrg++N71Bn7Hu5v
sPOFcR7H/oF+p9O/I8fvyfHPcfxWzg/sD7iWFvS7iP5jOd8S2vvz/fh8+LDu
0YvL4V/rZ+/AeL8yXm/so2jbL61P23H+ue4jjLewHOud69729P8Auxv299hb
Ys/HPh97IufdDvvfHF/i+P7ug9h/0q8/7ccx3gGM/zN2V+wDsPfF/p/jYm+F
vX8p1hjXmuu4/rnYc8uxvrrObst4s7F7YnfRT3J+cr5107vwAO0/0u8M2jvT
vhfH/47dB7sndmd9N45v43x1/+P4v2m/HLsv9qG0f0P7OOwK4+3CeHNo3wL7
VNoPc7/hfJ0439GUye6trlN18Z1r8Er6n0P/w+i/Tyn88m3T89TfnEf7NrR3
wz4w7Tf6v/bRl3+P8x9P+385bivO/xP9T8U+mP570/9sznEB9jFpv5mu7+z7
aDxIuYP2x/kcwvOboT/NmAWubQbjDWO8F1zjaT+C9hdov8n1EHsq7Zfrf/L9
ZOxLKbdRv4n5tznHf8ZxY2i/m/4TjFfpfzX2ONo3of0T33v3Hz6/ci/j2Ad8
P+n/p9dG/8toH4z9rNdJew37Xfr/D7sz9nP0v5X2nNer3097F767hHu9h3tu
xnc/8XyGU29kHOb+QPsQ2h/nu7Vc07Gvxp6IvW4x5qXz89g0/85i/OGuj5xv
vWo8J5+X75jXdDvlTWyD9pHGIIyxkPrh1CeW4r68v28oHajvVgsfwvVzJuON
dZ+lbUfa7i/Fp/Y4f1/qT7nnc64FXNfDHLsUe4C+NPZDxl/YW2LPw74fezhz
dC+v0bUGexntA2kfx3dl7MXGf9iz6P9YLd5733997v7UFzq/qM+m/VHaX8Le
37UJ+xHsqxl/J/o9wvgXGp9w/b9yrfvx3RN8dz39f3L/5fuLaZ9ufIfdkfZn
aC/zeYPzxxiE+hj3ez4fcu2h/0T6z6GtHd89zHejaT8b+3XOfynt02j/DfsA
nw3t/3H9xH6D9kG036xPhD0Fe7DrD/3/xj6E/k+XYlzH/5TSlvqv5YiPqu5T
9D+iFD79bfosxYgXjYfK1DvQvor3q1c+YmZj5y8pnfKxJro2fkbZPR+YgdjB
BZWI743zd+T4vtiH6g+6TmB/zufB+Yjx/4n1Of9+nP+YfGAvU8vh3+nnbVOL
NbwT7SfkY20/yD3GvR+7Pu157n3641OrMYedy/3ysba29vlS/5DSknpXMRb7
Ym9aDB9MX0ufS+ziJH8DY73U/zfX1XzsSe5NH1P2ysea6dr5EaV9PmIAYwHX
6KN9l/Kxdi+n7JCPNVz7fJ7HadSf4/fauhZr1kH0Pzkfa5lr8iHY3fOxVrvn
iI3smZ73UaWIm42fF/t78LzGUG/KtbYXL6C9q2sf3zXmu09oH0L9Bc63M+2H
lyJGFhOoFWNNP0VfOh9rvWu6a/v57pf699jPNw1/Ypr4G+Ndl4/vbDue48e6
v/NdgeMGMh/v41nezFzLxBNoP8/Yg/bNaN+EMoX6tPT89VHOoX1sPnwXY6oz
sUflI9aaXYnY1Bj1crExvpvk+p/Wr2PoP5z2g7A/0Rfhu9eov0HZQJ+b9mG0
v4y9ob4n5Tnq71M2pt6C8gL1yan9RN8x+r+bjteHMTa6KB++jbiL+IuYVL/G
EXcbfz9IuZL6Jtx/A/UqZVPqBxQDa8koB1J/qWm0vcKYvfyt9Y+xm7lmFOMY
2+23Lv5SC/cJ95u6eKaf0H459TupN/B8W/N5peuB56PeknIx9SsoragfXIxY
5GXO17MUMYm236/D+G2KgaeIq5xM+3qudbQ/RGlOfRzt93h97nW0t+T4dbwX
jnld3yeLvecKjv+G32dD1ynan9ZnpH4h7Y/QfintX9N+HvbafH+z7zHX3w/7
X9i3YJ+B3R/73nTur+i/mXGFz4uyBfVOXM9a1NelHEr9Gvq/le71J7FB7EHp
WfyA3cL9UryJvvu7F2WBDW2LfRD2mthLfT+xD8ReIwvsZ1/sA7B3cf/Ffpjr
P4Nr3LUYeMWjCfvYy3iQ8Z/DPht7D+y6QmBgYmG7u1/Q/0nss0qBY4lniT2I
/21TDLxJ3Km7/iX2POybsU8Vf+F67swHFvQd9zOB+xrs/lCIOTCE9hfTft2c
9vX57Gu8Qxnv/MxibRer+Z72/Y2naHse+1x9g2pgbe34fh/ud79i4HXidufQ
3r4Y+Jo422murYzXx9iWsX/k2K7ut9jDXVs5fhjfjcYehd2tFv7EKOzG9F+z
GvvrAeLV2G2xJ2Lvnuxfq4FziXftRunpu0X7g5x/EOf/H+0vYF+Szr8D9n3i
tfSdw3MdJ/6RxfvvOrCn/hP2sbSfR/+/0vF7Y8+l/3jaX8Y+MJ3rt2rgNOI1
YsyXOi8pg6hfknyKi+j/mO8X9XqOH8rn89j/pVxFfSP3fePZ1Ge2+FddtDXW
X8bujT0Mu4l4NHb/uvClxMcuxn4i/XYV2uf6vGm/JuF9w/196yKG8rux7rd1
wQHMpO80+Yh07QWOX459WV34qlXsm1wffB7pGn4ux9rtGr6SsS6j/yTOfxlt
dfQv63PnY89/m74Z9jv5WDN/L8deMS4d717gPuR+5Jrv2j+mGP7PP36Q/jnH
N6V+PfWTGf8S7CfTWvEt9zdJPyYfe5h72aW0T0xrayP6N8pivXfdb2D9Gubv
ndaGFhw/AvvdQqzNf1fjmfhs5EnaVYNnkW8R876oceD+4v9itpc0DtxM/OyE
NGc+4PjuqW/e+E0/jfEfTc+ou8/X95377Ev7VPH+5FvmxE/KsV+5b+2FfV8x
5ovzZmYpYv5/sKh8YAFiDGJBYkJiD69TVlDflf4P0vYG9rfY34vZFGPNce3J
Y++NPYrzT6F+E+Vc6i+5vhRiDMcST2tXCHzsL37vX8qBb7xCWz/fB+z2tO3E
uPU836X6ILTvT1lGfVE5+DZ9VH1V43rjezHUg4pxTV7b3lzvo7TdRZ86nsdR
2Fvw/G/Iwp+d69rN+e5N7fOwh2PP4nMR7V1S/OX9nIX9J+doyfGTaf8B+0fK
+02jWN+X/o/R/wPsGdjbp3jkxizw+vGU242tmsbetVt94N3il/JVxmDGYvpU
+lZ7U5Y0iT3O/h7XVLyL71rlI0Y1Vn2qHPygPGHLWmAgckNyRGIjYsJyay2S
fyimIhYhJiHWIke0M/Za+eCO5Ny2wW6b/Gk5QrF3MXi5Q38Xfx9/E3+buZR/
5SMGNxafLe6QDwzH8SdzfUfkAy+dw+89vRy+pj7nAux3sI/LB8Yi1vIGpWM+
fPQ3y3G8fKiYhtiGfrz+vD67vvu75eADjcmNzT3GY/XzW9dizXDtMG5oVYvz
HZOOl499Hntn7PUoT8iVZMGnGOMY68zh936ItsH0n1SKuNf4t1OKh5vRZwHt
D/F9L8Y/MAtu6GnsPthXZsFVPIXdG/vhYry/vsd36IM4h7E3SfvnVdivYrdJ
64m2vsdLvrNZxF1eW75x8D83M94zno9yC/UHi+H/6AfdTvu11eByjK16cv4R
1fAVb8U+qxZz0rl5A/aIWozhWEdz/Iscf1sW8ZwYhVjF3cXYX9xnJvh+VGPv
ude1gONHV2PvuR/7HOwNOWY+492OfSb2yGqsXROwe2APysJXewD7XP117Auw
c/qX1eBvjPV7Uo7OIi713f+7PviuU/luKPYQymlZxKHGo/un+HhsFvGwMbKx
8rgs4mcxFbGV94uBv4nDPUn/G6qBd0wxNqvF+/u7/ibjbUzb1GLwY/Jkz6bn
85f+LO2bV2P8P7AP0hdPeLr4qtdkrLzIGCcfHPw/XHwWeK1zSmzF611ZiPm1
Gcf3xb4de03sdbD76E9hN2CvXY35I15ytfFjFrjPhNRff9nn2cNzU3pR70kZ
Y3xA+1rVwH3+TNcrXiDOtDrdr/G7uMJP6f6M/30/VqXnu2k1MGTXctd0sWU5
bbl6OXvj9RnliCWNKT/ifatmwddulfxbOQG5gZYcfxTfbUX7Jq6/1A+pBe8g
/1Dju87F4Nf0Z3dP/rQ+qr7q3ORDd6CsyoePrK+sT6tvuyz53DtSvsoHJyE3
4Xk8nxyYXJgcl1zXltjHYA+uRH+PO7gWMYyxjDGTsZMaAbl+OX/xBNd01/aN
88FtGmMZaxkzGDvo8+r7yhEaEzRk4d+2T/HA/3ME3yafeIMs/PNtUnygT6xv
/FGKEYyZjJ3kDOUg8vR/Mx8+qL7oKaXgyNWYyAHpQ+tLq3GRY5JHkU8xRjRW
lAORCykWgtOT45DrUFMiZry5MXE+OFS5VPUyxh/GIfJV3eg/gv7Pp/h2oyzi
EeMS+UE5CbkyOTu5Cjk09wb3CLUd6mHkY+Rl5KvkR+Qb5B3km+RH5V/+4WFq
wQfpezzNGIt8d8vBXcilf1yNGMdYR75V7YN8gNqAJ3xmtA+oxHxx3uxbCw5U
LrQ1Yx5bDE5KDkKORs5LPZDxmHGZ/JSYsdixmLzaBfUY8l9tUzzj/BcfFuMU
i59XDnxYzF7sXn9G30sfbFklcBLxklMS3i0OJh4mJyM3I+4h/iFmIXaxguOv
z4cPLDa+tBxYh/7vCsb7rBx8sdireKy4m/ibGIxYzN+0v4r9FiWXhU+tby0u
sQf9vy4HnyNWIx7XUAz+XcxO7E6eoVvaz8WS3EPdS99Xt1QLzETsZGryT/ze
9vWTfzKF8m/qG6Y+71LWzocGQC3AZMqa+dC06J+Iux+f1hOxKnEs8SwxOrE6
3znfvY30F6j/yfW8lA8fWF94STn0KnJaclvOF/Esca0q/tW32NfkA9sTn/yi
HFiQmNBnPM/l5dDLyNHI1Yhzi3eLCYoN+vzlK4whlqXziYUZTyzn+AXl4Fvk
7OTu9IfUJ8mhyKXMLAc/IieuFsf+Yj9iQEvT+S9N8+OTSvh/PruWlMfLMced
682Zj4cVwz86IT2fxfRfh++ezAcmLzZv/DU6HxyeXJ73Kz8o576yHBoMtRrr
pt/D+TY2zb8vKoF9Dk3PR+zsQ9p75ENftagStnyYHOSsdH9n5UMftrAS74NY
qZjpkkrgV671rvn/q8Q+4X7hGuZa5hoq/vNawq/kK8TD7kn+x92lwKTEYIYV
w0fRVzFm1gcRD9L/ejj5Y2LsDU0DExAbkBPZhf5fF4IrMZ6Tf+yT/LlaQ2B4
rm+/lcMnF/cT/9NXN140vrov+T+3lQITMaa+qxj99eXFFMUWnXPyrK5ZzsWs
ITBfOV653nJDYODup2rhhlUi/jIOu4DxmzQExive+wrtpYbAxPXf3yoHniU+
eGfyt4xZjaOMp4xl12yINX06dmOxsYbArMWfi1lwpuqoXDNdO8XsjLOMt8Ty
mmG3cl/DXuW7j31RMTSKahXXxx5QDA2aWrS1sLfAnkV70ywwRvd1f3OxRzUG
4pTilWoP5PiNK13jXevlKPbgec4tBHfxMuWzQsSYxppvUr4rBAfk7yd+5Xxf
J8WXcj7txS0KwQWt0RCYsHh8PX3/S30mbR9SnqM+MuFbTxYjvhZflo+6I/nP
f9dizfL9UNskfqF/fHfyZ/UJ5UL0ofUV9enkZvRJ9fVuSD6lvuTP1fCp1HIZ
g+hr6XOq9TKG1Bc1Zjd2F9NRszarFJhMn6Shc/9Sq7RZ8mfUMKll8pn6bOXj
1XSp5RLPEvMR+9HH1tcW4xHXEd+RK9c/U7v1TfKX9Pd919T+iSeph1TzpdZL
vEefV25KH1tf2HjAd8Hrrk/xh89O7lM8xZhcbFeM11j93hRzGWv9Ug18Rjxy
uxRfneKeX4yYXHyhriE4EONbtaSFhohBjW/l3vMNEaOqOVB7IB5pfPRgiofE
gEYXwycWGxJzMO42/haLyKWYW05abnoD7IHF4Ljluo2xjLXEkIwBX+VZrV0I
f0+/zxjPWG9SinHEDMUOxTAnZYFBij2KQV7H/L4De02e50ccV0p841eOi72K
trtKgbGLOT/O93eWAqMWg3q0GJy0e2TntL4+r79WCA7O90X8UHx1vxSP3Zow
93tTTCYe6f7uPq+e9o0stCy7Ut7MIoa4pRAxmrGFGky1dmru1GY+m4V+Sx2X
eqaHstDTqKtRj3NkLTRh6ueKHPs67R1p/60YejX5+87Yq4uhl+pOuZ76rYzf
m7ZrKoG/iMNc5HyqRPxrHDzAeJ/7uaw+MH9j7jexL68PDeXKNO/FeMVc1Qx7
vWqrOlCey+I38LdQryKee6I+TDHi0Vo1fE79bP1tfVE1ieIjzhnnjvejtuwI
yltZrNHiZuJnrt2uQWJdYuquTR9SzqRviWdyp/EO5T21GvTfQL4Ce5K/Ffd8
YhYaYTHDrnWhQVZzKQc0McXc4s3qi9QdqfcWX9cXVYulfl2Ntxhk96Qp1sc2
LjA+0PfWp1V7peZdX1fNsFrV7mn99jq9XjWBagPVnKulNB5Qi66mxDjBeEEt
uj6/cYTxhLGAPrx+tP60vr0xg3GI8YixhHqRNTjHbK6zWAuOUp2Geg25SzUS
ctLG3OIRcs7ypnum+FoO/j/YdxWCm5fDFtfUxxYvlLOWQzeGFd9RAzqyPvY/
4xk1zGoL1RiqbVbzrK+iz6IWWo2EcYvxi3idmgw59z8SnqAmQtxU/NR43r3v
pEK8H2pTr6T0t065ohh7ZddC5BSYW+BeOjMfGhW1KnL+9rO/WgA5qpuKgQHI
Xcn5q9FYmfANOX33LfcvuX45Ljk0MQS5r1PT+3RLwgNOqwX2Mz69Xzc6Nwvx
/HyOQyuBL19TDH7lTPqMxB5ZDH5FTD1jPt1YCKx9ZC2wVDFV13PntHNGTbja
cDUpal3Ek9SqiDmpGRBjEYu6lvq1hdBkuD+LYYhleP3ex/hScJJyvGJYatb1
NfU51bLrW3yQj/mq1vrK9P4scH3LYu3uVgiNk1onNepq1Y3xjfXlZIYWg+OR
qxGD8t13DTipFprta+vDf3F855OYXCHhQyOTJtr3Uv5CPa5r22Ts1WJl5eDz
9fH09fQhvA/vR9+iXyX0Dvp8+n5qqJz756T9Rt5C/sJn5LOSL5e3Hpviv3mc
47b64BTlFt2n5YzlJMQk1TSprXI/Ez9Ws6B2wRjRWNGcFnNLuqT5WGyIGEx8
+DVjxXLEY5NT24vl0F/oc+p7+q4eUR/+oPNXzt+Ytm+KR9XUqV3Uv1XPoMZM
rVjP9HvI8cv1G3Mae6opkNM5O8UbahDVFVyW4jc1cuoGLk3xmOuxGLXYtNpx
9RnqAoal+MaYdDptm+UjVhUT/gK7cz6wYjUjakdOTvGV+j41e2r11EOZE6TO
X02t2lo5vvXo/3Y+8BZj5ubYL+YjllZ/pI5gVIqnPqxGrCnO/5LYeBbz0Xmp
b/FlypHQ59b33rsWuoUrUzzp+yaXdT3HXKcfXQ0uyhjE30eO5998/0qKd9XU
9WG8ffOhF5lbjbwCOWa55lIW643rjr78Ddxz27rwQe6rBV8oX1VM+QHX074f
9ir631sLflD+qmnK33gFe5u68FnURy3CboPdjPYH3Z+x91Efm/RQS7LQV62d
9E+9K4GPipM25np6VkLfoo+nr9eoITQw3o/Pb2kpNGFymDWx4UrgB/rk+ua9
KqGX8RiPXVgKDlIO1JyHp7PQXzUkvdVj5eAz9Bn1Hc+tBJ+hT6lvuagUnOzA
pPnUPzq4LvYs9Y1PYG+N/XUx9GNqWNSyiCmILahRVPuqPypfYk6Guk/1n+Yy
+XvKxxijGatVstAPGZMZm82pRh6LOSvmrlxYCT3LJimWaZLF+uc6aKwlB7JC
XC0f3Ej/SuhPjGGNZReXgtNX07Fe0/BJ9U0vK4be7eNSaA7lcJs3DX2b+rUW
Se/qb+RvJT/k++Z7osZNDtKcKTV3au/k+H5J89/5aMxr7NunEvokY1hjWTW2
6rDkaOSDzIkzr0eNtVprNa7qqsQMxM/MATA3SY2mWk1zAMz9klOTW1PDrrZZ
DF4sXo21OmL1xObGyUGaa6TGX25Sf8ZcOvfszllobNUSqylWe6tGXm21mL3Y
/WLsm+qD45DrMGYwdjDHxlwb+Q1jQXEI+WX5GGMP4wb1FHI8csdyPHI9S9Qk
1IdGV62uMbqxujkp5qaYU2JuiRp5tfLq8cVG1WKb72f8bd6LPvmQSuRcmYek
5kTtic9Q7FRc12frGibWKu7r2mY+kO+6fqL8sflv5nSYyyGfbT6aOSXmkqhn
ML9BX/097D+rwXHLdesj6tuKp7u/tkn+onrVT/VT+f6PauQbLsV+B/v3avBl
YjPGTepFzA9zbdHvlf/WhzUvS82Ivq0amEewf8sH3i/mK/ZrDoW5FGK8Yr1q
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
QHlN+U33RjlK1yXXJ7lLOSHzOM3nlCuSMzKPX85F7kVsUN9MH039thyWPI98
j9yW/+EiLiE+oVba/3CRR/GavDZjWnXX6q+NdcWv5TZ9ZsazYkBqZPXxxIbE
QP1t/U31H/T/1L+JGdlujpIYnPmtXyU8UwzU/OIvU3xl7qz5ouofzIm2zXwv
+crR2BvXxR5g/qZ4p7nB/t/K8oSHmpttPrf6FPFLMV7zV92fjNfEWPWh3f/F
T8wV9v+KlqX903fdd961wzXRXGPz61aneNAcTfOD1Z/ok/l/A/7vgL6a+K6Y
lvm35nqZk+69mp82J+GRas8npvHM6bWveuFnkn/of+GY3+fe4x7j2u0a7t5z
RC3+s8L/D6qrRrxr7rcYjFiM8Y252GI+Yj/XUjarC4zBfFhjFP9vwP8dMHYx
HjVXXkxIbEifsVHSf+tLGqNsWBeYhLGL+7P/ZfBdiueM79y7/b+DwSn+MFYw
/869z3jN/7QQMxI70kfVV21GeTgLvsFjN098iOuFuT1qyowPxZPNHXFNdm02
3jNHWYxKrMp4Ui7Pa9JfMF42t18MTCzMNV7fVv2Ua794tFqul9PvqwZEnle+
V22IWJH4xCmJnxLnMQfB9991wHfCtaJR+r8jOWN1NOpp5JLVOMhr/5OzkYXm
RR5SPlItjBy72mNzgOTe1eioFTbHWO2OOJI5L64/rkOuIea/5NL/HcnpqqtX
Xy/X6ztrfoSYlO+y+T5yUffQZ3336yzygeRwxqff09jzSMo7WaxxPnt9MNc+
Y0xjzRLlmSw0BvL48vlqD9QIySPLJ6sd0ufx3VJ/ry8k/6ZG1jXXtVfcSC2x
8bVxtpo7tXfuie6NaujU0pn/aK6rmlq1tfKZ8ppqztSeuee693apxX+U+P8y
javBd6px3i/pi43h1SOrITG2V6MkzyPfo3ZJDbRaXflOeU/5STXs7pnunepO
1DLLR8tLq2lXeyyfKK+oj6Avql5Z30FNsNpg+Tp5OzXDaoflP+VBfZ7+P4z/
E2MsbwxtbK6GwthaH0dfXA2Xvo+ckNyQmrmlaX2Qn1ID6XqixledrHpZtb/6
EPqrakT0LVwDXQvV9Km1UyOrDlgfS19ri7T/z0j58OY9m/+sRkit0PPYhzWO
+Nk4Wg2uOmF9HH0ddSrmoDtfnbdqltXd6rPqu6qxUGuhZk9tm3ydfJaaRPlq
13TXdjWf85K+yxxdY2TjN2Nw9edijsbmrrGutWoE1f6pg9FHN143bpfPVgOv
RkitkHy49+Y96uuIwYnFqblTeyeHpoZU7ajcmmu+a785NIuSvswcX9d84ykx
PbE9cyreTfibOYPGfKtSfCUWpwZbX1S8wPxgOUDjSTEC/5/G/6kRO3BPcm9S
U/hFwkv0tSen9c0Y2lhajeyMhAf5X0fmeOhfqaFVB60eeq2E5+j7GwPUJ3xA
/bWcj3iQHKaaTLWYcptyLmpe1brKxcjpye2p4VRLKf5mbOcarL8mx6ivos+y
Iu1n8pVqbt2/jUH17fXx1SrKSal5dw8T39CH1ZfV/1iZ9nP5HnPS3O/1eY19
jIH0hf8PlIW0Qw==
          "]], Polygon3DBox[CompressedData["
1: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
aBh6jms1XLnq/5HVSkM=
          "]], Polygon3DBox[CompressedData["
1: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
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[
          0.19699838300000003`, 0.252204821, 0.33320940200000004`]}, {
         "Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{2, 0, 2}]}}]}, 
     {RGBColor[0.560181, 0.691569, 0.194885], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxF13f0lmUdx/Ebnh8/fOA3AIGYMpQNsZEYIkNBEUVIBNLsYC40DFGUynJB
KBiYCjjQJBBUDGTjwkTDFDzV0dJQlL23LFHs9fXinP74nM/7/j7fa9zXfa2n
wYhbB40qm2VZrTJZluNzCrNsMnien1mcZRtxFd6AjuD6vBbtxQ15ZdqAK/F6
tAfX5KW0HpfwlaVZdqhClg0oybKu+Sz7t3hn/l9t/Aev54vkbJHTXc4PlalS
kGWteRd5y+W04md5Pozr8heVeRS/xHt4vkr++XwwPYh/zOfFe9B3NNdzT/Gu
vA4dEKvNG1YUK59lT6r/Ss8PyxnGq4s3EN8n3ireR7wdH05T8U/4FTQJD+UL
9H+j/nfR/1fwZtwNL8SbcFfcQV2TtFuPt6VFuCX/yDusxR/zAnX9i/eTXwb/
A/eNMZE3Q07rGAe6H5/N/+L3J/ACfo7nCTE+vA79HjfgM9Xzlt97qudvfKX4
Gr6O3sUf8pNFWfZ33ltOJv/9GDexwugDLscXe5dd3uV8OcvxAXwxXob34Qvx
Ery7QmrrmPKvKXuUf6Dut/FaPkBd9xi3S/ifilMsyi5Vdq+yffC5+v24/E58
l/ILC9PcaOC7dPBdHhV/jL6Wsy1y49vhHXK3qWOx/M/E9+D38JeRL+c+OVvk
bBdfKv65+Fb8Cl6Pv8G78A58GH+CN+HjeAPuhr/Fe/BOvB//E2/Ex/BGvAXv
xCvxF/gU3op74Uz/D+JLcVl8GA/EeZzzXntxDp8Q3413KLscb8BlxI/iQbgu
bib/IP5Ozj7xXfgH4g3F9+N6uBU+hGvhxvgAPir/C/mb432NxXRjUtbYnEGP
4WL+Z8p8o3P4Sfk75W+P8cY7CtOYT/fbs/J3q+OE+HbxrTHv6JaC9I16Vsqy
P/IL5D7BJxf8f611058qvvnMGNNcKhu5x3KprSZyKshvzM+mb8Sb8aZUJN6c
H9f2G+JzzI3ysXZizeM8/hgXRbs0B++V++TpfWEffgq/hPfjI/Eb/orPES+n
/rnqmaYfNxekfaCReAFuyWfQLPl75M+OsRNvEW6cvzEOV8tfzVfIeYevoiW5
tA4/CadN9MsYG2VH877KtzUmt2n3Zb99Si/SC+KtxUeXpP7upNnUX5mSWEf8
QqqI+/KLqBBfkE/fZ37sf7nUx/JUlrbEeMfaiTbU3079Y9Tfgt8Z78inK/8Q
nsGfoj/gp/PpO5/Ipe83T9n6fJyy4/z+a7qbhsec49dHORqDp/De8hvJHyX/
Gfy2um7BU/02Vs4jvJ94Jzm3i9fAm+QMxrPw5zH/cTX8Jb4cV1euGlWlJtQ0
5gx1o+6x5xekb/VCnFM4r+7OMRbl0xwvjhjVpwZUj46puwY/XpjmQhnKRZ3a
rajctdodoq+147zgZ4h1xOX4SM9d8C3xHTy3xwV8ey7tVzF2MZdjzp/Mpbm5
g07ROvqIjtOq2JtpM+3KpXVxlNqor22cj/St/jXjpwrT2RXra0r0V3t1+Nfi
ZXFDfBJfE+cZ/hn/q+elufQNnvH8iPizvL93PFeZsd7xAc8jxO+NtSxeW/xG
8Zr8p+I1eP0oq557+G+phfjv+PA4J+maODs9vydnAp9Io8QejPlF74iP5yML
0lq7laZpa65+3aStXxSk/eQmuk/etfx+3l3OmzGesQfInRjrgj8t/nphOqfe
jOdcOj9eowW59NtlcRao59L4nvRp7Mny37EfVbaGb8Bv4xJ8XZybuAa+Gb+L
q1ZMfVuNS/H1uK6x+Lk6z+I38Btj/tNz6v9M/SPlnBd3psjDt8Va9ftvYsxo
sb7dHWu2OO0Z0VbcbaqUT32Y7Lc1ctrzQXE3Er8r9gTcEd+BH48zIO4/fL54
51jP4g97Hi0+iZ8pNiDWC69GV+PqvBINK0jtDeKD6fKCdHeK3+Mdny9Ocy3G
5y51DfT7ON4w1rm+3ckryO0R64r/yvMVsS/wobx33NNoPE2gidSL+tAQGiPv
En47v4MuxWN5eWP8nXb34F6V0tl/UcxT3Cyf9vD3fYvrcEfxdaXpvBmC1+Ca
FdM+8wG+SryN+CrcL5/OlBX4oDOsv5y1pWnfHxj7caV0tlUuTefC/lhDJelO
MtP7HuLzxKbG/sJbym+UT2diK9wczy5J58USv59Xks6ybYWpzrdohJz2p8+p
ZeJXlqSz6VU8BM/n09T/csxh+Uf0Z6B4d/U3zaezbDs9JOdgUTqXF8W9OO6N
ctrEuV2U1sVCOQfw+ZXSOT3v9D68TPxwUZp74+NsKErv3l1O1ZhHuHE+nXed
cJN8Ok9f1Z+v9Ocy9byBe+fTneF13CefztAO8nvEvBRvj8/D1WPtyrk4n87N
mFfNY1+LuSynY9yDitO3jjv69/eEuNvHmaXd57zfvXgWbyfnRzHvitNZvFds
eEm678XvcSeP+8xuPBR/ePrOEff8uDfGf524q8cYxv4Rd/W4J6zAw6IsfyCX
9qPYl6bEGVyU7q6rYx/H/wPokMIM
          "]], Polygon3DBox[CompressedData["
1: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

          "]], Polygon3DBox[CompressedData["
1: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
e2sIbzL+RN+0rhbWMTQtyHX/hP8D3sCigw==
          "]], 
         Polygon3DBox[CompressedData["
1:eJwl1GlsVUUYh/GJrVRo6W2hyCpYCwIV2ZcWaIGGooBoUKAUtUJFkGgpKrjF
hQJqMBDU+AnFSAQEQgSRNISgCdSySAgREo0fjAtlbWQpm0WL/ib3w5M585z/
vO+cOefe3MrqRxfeFkIoQSvMyQyhTXoIT7cOoVdqCBXGMVkhVPO900I4khLC
McGuMocSIVzOCOF97lN8x59vE8I3fBO/juurRgufKb+ff0idn8xPuPez8ThS
24Ywm28lU65fV2umG4v1zbamWc1T5i3W/Is8+QIs4OZisPwc4z7ZRmNzrKlW
mevu7s00TpB/w/VbGOI5BmMrd8s+D6hZj6PWXdCrVp0q+8mTeVG+p7Gzegf5
Wfxfcr/Lf4F71S6wz6f4i3yW/Ba+D1/EP27syd2FTrghc7taDfouk1uFjVyD
vjvjucnfr19AP/n+xrvlS9Svl9sjvxff4m81KvirfLZsezxm/Wh9n+Sv8Tlc
B0zlR8X98Jf4JuuvYgpfyC81fmj+EabJd9Q3S99F8vmuX+HuM3bnDtvnWb1X
y1bwnfls/nv+Cfkm9S+6dxmPqDtS/UHOOl92StynfEK+Tr5cfrf8l7Lb4vci
P0K+xlgZ3ytmo5s17a1p0bdObm48Uy6Hq1eno/rn+es4q95N5zlUnSvytdxu
1PGN/C75GfruMd/K/4LC+B3Jv2AsVfsBTECGHm31mKr+e+Y1WI6V8ay5SnXS
3Z9nXZd4FhjOl2Nd6+R3e0af0eqUcSk4Gt8dzvH/2M8wfdslkplm/iY+tq6E
n6b+ybhv7gLG8gP46XwD/yv3G8bxA/kyvpbfEOujmB/Cn3MOa8w/wGb3T+r7
dSL5+zptfiueG4rkB8mX2udrnuVNDLWvXM84jp+pfqP8f7Kb0Ft+OD9J/m3Z
FSiUL8A2bjxe517FQG4AtnAJ4wxuPB5EGTK5YvV3qb9e7c/RS/1+6m/m58vM
Q67cnfYzlh/D75T/TPYr5MffD7/G+JLsEixGH2u6pSfP+R7jWvdX8atTk+/l
ZfOHXU/GJHSRbyf3HN/fPA/DcAefwS+M/0/xWTEKRaiK70ytRa7328sR++ok
e0DPEfx895+N33c80wiXgzMpyfcev5P4XxfP/5T39Q63Iv7P8H/w29WZKF9l
7YLYNy35LPE7OS2/UrYG6+X/lN8hX+p8fjDfx3+CtbgmW6hOtb08H3+f8ZvF
SO5d80Myh/EM10OPDnpMVOeEOsf4H3EcafL/A+OaxkA=
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.1830429875, 0.21424763749999998`, 0.0962851875]}, {
         "Directional", 
          RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0s9L02EABvB3mYwaHXLFDpUUSGrYyeGtoIQdOmkUiVIywW6tDonaJtWI
SoMocRbUSvwZaNKti/4DKkmxweoS/hmJhJ8vdXj2PJ/BXt7tuzMDd6/mYiGE
KbkQD+GAbkqEYIZOL0d0Gyd1hhv0OU7p03JMWvm4PhGdczCE83zSbpcypzlt
d8gH7uAWu1mO1vsM/7GT9q4u8Z5O8V/9lmMueYrjuswvvF9x1pju5tt6nQd1
F+f1Fj/SN7iov/F1+7Fds5/rZzIuP/mJXj4Uwrb91J6Qz/yD79k5WeUqD9n3
ZYW/c9a+JZ/4K/fY12SBv3DGviyzPM+X7Dnd5ze9aC/JTnQHXo3Old9c5AX7
jfziAk/br2XEfqkX5ZUM86S+mfj3PPPca5fsj/KQszxjv5Mx7udydJcoXODN
6BnYG/oBV/V7ruhRrkXfg9f0HW7UV/iwPst1//9L+7/nSe0=
       "]]}, 
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0t9PjQEcx/HvYSjlRgtxgWb50dRmZokrXFgNderU3Ja2KJkxV9hQbM0F
LvwRNm7MZjsRJWlFNjY/Zn6EpS2t7mztyOuZi8/e7/d5znPOc57zbGw5le5K
RUTWRpdFlIpXuB7XLIp4uiTicF7Eal5s/bpWF/G1NqCP6BKec85dvVfP89d8
q9eb9RZ8qTdjoy7Dt3o7NulyfKMrsHNxxIWlER143G6uiDivT/D3hRFnsFef
xY/6HF7XJ52b0Z24Tfdjj+7DUn0N2/RVzNPtvJd3Wyu/klybz3rOM9hkC65t
WDfwtP3Vz3Q9r7OcHtR7+Cr7pO/oIr7SpvV9vZzn25x+oKt5lc3o3fjTdz/i
k/gEf2G1a5zGIf0dd+ofmNUTuEPfxhv6FlboMRzOd1/5CH9n47pBf+Zf7IWu
1F/5N0vbjHt/EGvssvs9q/fzA3ZJ/9b1fJdd1B90o//4NN/HM/yYY/M87fe1
8Rb7kzwfujn5n20u+R59NHmWnLNQ4BnDQUt5fQjXJfccC3UWS3Qf5rz3MW7Q
I1jg+CGc9LzW4oDjNTilq/Ch3oTj+h4vS85N/X/O/wH01WVx
       "]]}, 
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0t0r3mEcx/Gvh27ZbuRohYy1bAnhABPadsDMGsNGHFgkSW4nWvOQp61k
SlaTA+UPodQOnDjZSvkrnO9wXlcO3r0/7+763V3X71c7vTScy4uIX/iXjTgr
iLjMRFxwd0nEYGFEeVFEjz1hT6FSv9Lj9ks81F36tf0JZXqYP2AEpXqM14sj
+jmre3lFD3GFfsvL+h0/0qO8pj9ylf7M3/QMP9azvKdz/Fwv80/9hZt0A9/q
/85SbY/ZVZznt6c8qZ9wvm7iBd3BxemsnNN16dl4hkXdzV1Ysl84b61dgznd
rlvsZsynZ+nGdF92q12W7gEDukEX2hn063qdTfeI3vS/+kG6BxylO9Fb6Xw4
1ZP60D7AiR7X+/YPHOtRvZfuC+/tHR7kbd5FZ3o/+ru9iXY9oDfSO0KL7tNf
7VW06Tf62jdx4z7/ckb/4Wt9xaF/85U+L7j/lu4AOjc5jw==
       
       "]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, 
     {GrayLevel[0.2], 
      Line3DBox[{1188, 2553, 1189, 2554, 1190, 1191, 3530, 2598, 3777, 1196, 
       1197, 2557, 3758, 1198, 1199, 2600, 3779, 1292, 1293, 2596, 3775, 1290,
        1291, 2605, 3783, 1300, 1301, 3528, 1298, 1299}], 
      Line3DBox[{1200, 2558, 1201, 2560, 1204, 3505, 1205, 2561, 3760, 1206, 
       1209, 2607, 3785, 1316, 1317, 2608, 3786, 1304, 1305, 2599, 3778, 1307,
        1306, 3531, 1302, 1303}], 
      Line3DBox[{1207, 2562, 1208, 2563, 1210, 3506, 1211, 2606, 3784, 1313, 
       1314, 2604, 3782, 1315, 1312, 2601, 3780, 1310, 1311, 3532, 1308, 
       1309}], Line3DBox[{1213, 1212, 3508, 1215, 1214, 3762, 2566, 1222, 
       3511, 2571, 1218, 1219, 2572, 1237}], 
      Line3DBox[{1228, 1227, 3513, 1239, 3512, 2573, 1238, 1235, 2570, 1234}],
       Line3DBox[{1231, 2568, 1232, 1229, 3510, 1230}], 
      Line3DBox[{1233, 2569, 1221, 2565, 1216, 3507, 1217, 2564, 3761, 1220, 
       1226, 2567, 3763, 1223, 1224, 3509, 1225, 1236}], 
      Line3DBox[{1240, 1241}], 
      Line3DBox[{1346, 1349, 3544, 1342, 2621, 1345, 3543, 1350, 2627, 1362, 
       3549, 1359, 2626, 1361, 3562, 1374, 2631, 1377, 3556, 1378, 2639, 1383,
        3558, 1384, 2634, 1387, 3560, 1388, 2637, 1391, 3794, 2644, 1412, 
       1462, 3813, 2692, 1457, 1460, 3816, 2695, 1454, 3574, 1447, 2660, 1448,
        1453}], 
      Line3DBox[{1485, 1486, 2676, 1487, 3579, 1450, 2661, 3802, 1449, 1464, 
       2667, 3807, 1463, 1465, 2693, 3814, 1441, 1442, 2659, 3801, 1445, 1395,
        2640, 3790, 1394, 2649, 1425, 3571, 1424, 2648, 1373, 3554, 1372, 
       2699, 1504, 3584, 1503, 2700, 1358, 3547, 1357, 2624, 1354, 3546, 1353,
        2625, 1352, 3545, 1351, 2678, 1498, 3591, 1516, 1517}], 
      Line3DBox[{1488, 1452, 2662, 1451, 3575, 1456, 2663, 3803, 1455, 1459, 
       2664, 3804, 1458, 1461, 2665, 3805, 1440, 1390, 2636, 3789, 1389, 2635,
        1386, 3559, 1385, 2650, 1393, 3561, 1392, 2638, 1376, 3555, 1375, 
       2701, 1360, 3548, 1355, 2623, 1356, 3550, 1363, 2686, 1344, 3541, 1343,
        2622, 1348, 3542, 1347, 1497}], 
      Line3DBox[{1491, 1490, 2675, 1489, 3580, 1481, 2671, 3809, 1480, 1477, 
       2670, 3808, 1475, 1476, 2691, 3812, 1443, 1435, 2655, 3797, 1434, 1444,
        2666, 3806, 1431, 1432, 2658, 3800, 1433, 1411, 2643, 3793, 1410, 
       2679, 1501, 3586, 1502, 2680, 1500, 3583, 1499, 2683, 1506, 3585, 1505,
        2682, 1371, 3553, 1370, 2688, 1515, 3592, 1519, 2690, 1514, 3590, 
       1513, 2689, 1512, 3589, 1511, 1518}], 
      Line3DBox[{1492, 1484, 2673, 1482, 3578, 1483, 2672, 3810, 1478, 1479, 
       2696, 3817, 1523, 1522, 2694, 3815, 1446, 1438, 2656, 3798, 1437, 1439,
        2657, 3799, 1436, 1380, 2632, 3788, 1379, 2633, 1382, 3557, 1381, 
       2681, 1496, 3582, 1495, 2677, 1494, 3581, 1493, 2684, 1369, 3552, 1368,
        2630, 1367, 3551, 1366, 2687, 1508, 3587, 1507, 2685, 1510, 3588, 
       1509, 1520}], 
      Line3DBox[{1570, 3609, 1569, 3611, 1579, 1580, 2723, 3612, 1540, 1539, 
       2753, 3633, 1639, 1648, 2760, 3836, 1647, 1636, 2751, 3830, 1635, 1684,
        2777, 3849, 1680, 2774, 1624, 3626, 1623, 2748, 1622, 3627, 1601, 
       2732, 1597, 3614, 2729, 1596, 1598, 2730, 1589, 1588}], 
      Line3DBox[{1578, 3610, 1577, 1572, 2720, 3824, 1571, 1576, 2722, 3826, 
       1575, 1574, 2721, 3825, 1573, 3634, 1640, 1682, 2776, 3641, 1683, 1637,
        2752, 3631, 1638, 1685, 2778, 3850, 1679, 2773, 1631, 3629, 1603, 
       2733, 1602, 3616, 2734, 1600, 1599, 3615, 2731, 1591, 1590, 2726, 1587,
        1586}], 
      Line3DBox[{1581, 2724, 1556, 1549, 2708, 3604, 1550, 1551, 2709, 3605, 
       1552, 1553, 2710, 3606, 1554, 2711, 1555, 3625, 1620, 3829, 2746, 1405,
        1404, 3832, 2756, 1645, 1644, 3833, 2757, 1407, 1406, 3819, 2715, 
       1563, 1561, 3818, 2714, 1562, 1688, 3852, 2780, 1689, 1686, 3851, 2779,
        1687, 1671, 3847, 2771, 1672, 1673, 3639, 1674}], 
      Line3DBox[{1582, 1547, 2707, 1548, 1545, 2706, 3603, 1546, 1560, 2713, 
       3608, 1559, 1557, 2712, 3607, 1558, 2747, 1621, 3635, 2754, 1641, 1642,
        3636, 1643, 3831, 2755, 1408, 1402, 3792, 2642, 1403, 1409, 3820, 
       2716, 1564, 1690, 3853, 2781, 1691, 1692, 3854, 2782, 1693, 1696, 3856,
        2784, 1694, 1675, 3640, 1676}], 
      Line3DBox[{1583, 2725, 1584, 3613, 1585, 2743, 1616, 3624, 1618, 2745, 
       1617, 3623, 1535, 2703, 1534, 3619, 1605, 2735, 1604, 3618, 1608, 2739,
        1611, 3620, 1612, 2741, 1613, 3828, 2740, 1400, 1399, 3822, 2718, 
       1566, 1565, 3821, 2717, 1567, 1665, 3845, 2769, 1669, 1668, 3846, 2770,
        1670, 1651, 3839, 2763, 1652, 1649, 3838, 2762, 1650, 1662, 3842, 
       2766, 1658, 3637, 1657, 1661}], 
      Line3DBox[{1594, 1592, 2727, 1593, 2728, 1595, 3632, 1632, 2749, 1633, 
       3630, 1634, 2750, 1625, 3628, 1626, 2775, 1677, 3848, 2772, 1678, 1646,
        3834, 2758, 1629, 1630, 3835, 2759, 1627, 1628, 3837, 2761, 1543, 
       1541, 3601, 1542, 3602, 1544}], 
      Line3DBox[{1619, 2744, 1615, 1614, 2742, 3622, 1533, 1532, 2705, 3600, 
       1536, 3599, 1537, 2704, 1538, 3617, 1607, 2738, 1610, 3621, 1609, 2737,
        1606, 3827, 2736, 1397, 1396, 3791, 2641, 1398, 1401, 3823, 2719, 
       1568, 1663, 3843, 2767, 1664, 1666, 3844, 2768, 1667, 1695, 3855, 2783,
        1681, 1653, 3840, 2764, 1654, 1655, 3841, 2765, 1656, 1659, 3638, 
       1660}], Line3DBox[{1733, 3650, 1723, 1724, 3648, 2794, 1726, 1712, 
       3645, 2788, 1701, 1702, 3644, 2787, 1704, 1705, 2835, 1820}], 
      Line3DBox[{1738, 3653, 1734, 1735, 3652, 2797, 1725, 1700, 3643, 2786, 
       1697, 1698, 3642, 2785, 1699, 1703, 3689, 2836, 1821, 1822, 2837, 
       1823}], 
      Line3DBox[{1747, 3657, 1710, 1711, 3658, 2800, 1708, 1709, 3661, 2802, 
       1727, 1728, 3649, 2795, 1731, 1732, 3691, 2840, 1739, 1740, 3654, 2798,
        1741, 1742, 2844, 1832}], 
      Line3DBox[{1750, 3660, 1748, 1749, 3659, 2801, 1706, 1707, 3664, 2805, 
       1754, 1755, 3663, 2804, 1729, 1730, 3692, 2841, 1828, 3694, 1829, 2843,
        1743, 3655, 1744, 2846, 1835, 1836, 2848, 1838}], 
      Line3DBox[{1791, 2823, 1792, 1837, 2847, 1834, 3696, 1833, 2845, 1831, 
       3695, 1830, 2842, 1827, 3693, 1826, 2839, 3690, 1756, 1752, 2803, 3662,
        1753, 1736, 2796, 3651, 1737, 1745, 2799, 3656, 1746, 1751, 3700, 
       1846}], Line3DBox[{1793, 1786, 2820, 1785, 2819, 1781, 3677, 1782, 
       2817, 1778, 3676, 1779, 2818, 1763, 3668, 1713, 2789, 1714, 3647, 1721,
        2793, 1722, 3670, 1761, 2807, 3666, 1757, 1758, 2808, 3667, 1762, 
       2811, 1769, 3697, 1839, 1840, 3698, 1841}], 
      Line3DBox[{1794, 1787, 2821, 1783, 1784, 2822, 3680, 1788, 2824, 1776, 
       3675, 1777, 2816, 1780, 3678, 1715, 2790, 1716, 3646, 1719, 2792, 1720,
        3673, 1717, 2791, 1718, 3671, 1759, 2806, 3665, 1760, 2810, 1768, 
       3701, 1845, 2849, 1844, 3699, 1842, 1843, 3702, 1847}], 
      Line3DBox[{1801, 1799, 2828, 1800, 1797, 2827, 3682, 1798, 1796, 2826, 
       3681, 1795, 2825, 1764, 3669, 1765, 2814, 1773, 3674, 1774, 2815, 1775,
        3679, 1770, 2812, 1771, 3672, 1772, 2813, 1766, 3857, 2809, 1767, 
       1852, 3858, 2850, 1851, 3705, 1824, 2838, 1825, 3703, 1848, 1849, 3704,
        1850}], Line3DBox[{1804, 2829, 1805, 1802, 3683, 1803}], 
      Line3DBox[{1807, 1806}], 
      Line3DBox[{1815, 2832, 1816, 1817, 2833, 3687, 1790, 1789, 2830, 3685, 
       1810, 1808, 3684, 1809}], 
      Line3DBox[{1818, 2834, 1812, 1811, 2831, 3686, 1814, 1813, 3688, 1819}],
       Line3DBox[{1172, 3501, 1173, 1202, 3759, 2559, 1203, 1170, 3753, 2547, 
       1171, 1276, 3768, 2586, 1275, 3521, 1266, 2582, 1250, 3516, 1251, 2575,
        1252, 3517, 1253, 2580, 1262, 3526, 1285, 2593, 1284, 3772, 2592, 
       1243, 1174, 3754, 2548, 1175, 3514, 1176, 2549, 1177, 1242}], 
      Line3DBox[{1181, 3502, 1180, 1178, 3755, 2550, 1179, 1272, 3765, 2583, 
       1273, 1274, 3766, 2584, 1269, 1265, 3764, 2581, 1263, 3520, 1264, 2603,
        1281, 3523, 1254, 2576, 1255, 3519, 1258, 2579, 1261, 3770, 2590, 
       1244, 3515, 1245, 2574, 1246, 1247}], 
      Line3DBox[{1182, 3503, 1183, 1279, 3769, 2587, 1277, 1278, 3771, 2591, 
       1270, 1271, 3767, 2585, 1267, 1268, 3781, 2602, 1282, 3524, 1283, 2589,
        1280, 3522, 1259, 2578, 1260, 3525, 1256, 2577, 3518, 1257, 2588, 
       1248, 1249}], 
      Line3DBox[{1187, 2552, 1186, 1185, 3504, 2551, 1184, 3529, 1195, 2556, 
       3757, 1194, 1193, 2555, 3756, 1192, 1287, 2594, 3773, 1286, 1288, 2595,
        3774, 1289, 1295, 2597, 3776, 1294, 1296, 3527, 1297}], 
      Line3DBox[{1471, 1470, 2669, 1472, 3577, 1416, 2646, 3795, 1336, 2616, 
       1335, 3538, 1337, 2617, 1338, 3565, 1326, 2612, 1325, 3535, 1327, 2613,
        1328, 3567, 1418, 2654, 1430, 3573, 1429, 2653, 1420, 3568, 1419, 
       2698, 1525, 3594, 1524, 3595, 1528}], 
      Line3DBox[{1473, 1340, 2618, 1339, 3540, 2619, 1341, 3539, 1321, 2609, 
       1320, 3536, 1329, 2620, 1331, 3537, 1330, 2628, 1364, 3563, 1414, 2645,
        1413, 3564, 1415, 2647, 1417, 3572, 1428, 2651, 3796, 1427, 1426, 
       3593, 1521}], 
      Line3DBox[{1474, 1469, 2668, 1468, 3576, 1467, 2674, 3811, 1466, 1334, 
       2615, 3787, 1333, 2614, 1332, 3566, 1365, 2629, 1324, 3534, 1323, 2611,
        1319, 3533, 1318, 2610, 1322, 3569, 1421, 2652, 1423, 3570, 1422, 
       2702, 1529, 3596, 1527, 2697, 1526, 3597, 1530, 3598, 1531}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{1853, 1854, 3860, 1857, 1858, 4073, 2586, 1962, 1959, 4071, 
       2584, 1958, 1961, 4072, 2585, 1960, 1969, 4080, 2594, 1968, 1973, 4086,
        2600, 1982, 2483, 4093, 2607, 1986, 1987, 4092, 2606, 1900, 3867, 
       1901, 2565, 1905, 2572, 2478}], 
      Line3DBox[{1859, 1856, 3859, 1855, 1861, 4047, 2547, 1860, 1868, 4070, 
       2583, 1957, 1965, 4077, 2591, 1966, 1971, 4081, 2595, 1970, 1972, 4082,
        2596, 1974, 1978, 4094, 2608, 1988, 2482, 4090, 2604, 1910, 2474, 
       4056, 2564, 1904, 3868, 2571, 1903, 1902, 2570, 2477}], 
      Line3DBox[{1862, 1863, 3861, 1864, 1865, 4054, 2559, 1875, 1874, 4049, 
       2550, 1873, 1876, 4074, 2587, 1963, 1976, 4083, 2597, 1975, 1977, 4091,
        2605, 1981, 2481, 4085, 2599, 1979, 1980, 4087, 2601, 1907, 1908, 
       4058, 2567, 1898, 1899, 4057, 2566, 1906, 3869, 2573, 2479, 1909, 2568,
        2475}], 
      Line3DBox[{1866, 1867, 3872, 1927, 1951, 4069, 2582, 1950, 1945, 4068, 
       2581, 1944, 1983, 4088, 2602, 1893, 1889, 4051, 2555, 1888, 2468, 4053,
        2557, 1892, 2471, 4055, 2561, 1896, 3866, 2473, 2563, 1897, 2569, 
       2476}], Line3DBox[{1883, 1882, 2588, 1933, 4064, 1932, 2590, 4076, 
       1937, 1936, 2592, 4078, 2480, 1967, 3876, 1956, 1955}], 
      Line3DBox[{1912, 1911}], Line3DBox[{1916, 1913, 1914, 3870, 1915}], 
      Line3DBox[{1922, 1870, 2549, 2465, 4059, 1871, 3862, 1872, 1919}], 
      Line3DBox[{1924, 1923, 2574, 1921, 4060, 1869, 2548, 4048, 2464, 1920, 
       3871, 1918, 1917}], 
      Line3DBox[{1941, 1942, 3875, 1946, 1947, 4079, 2593, 1938, 1935, 4066, 
       2579, 1925, 1926, 4063, 2577, 1877, 3863, 1878, 2552, 1881, 2553, 
       2466}], Line3DBox[{1948, 1949, 3874, 1939, 1940, 4067, 2580, 1943, 
       1931, 4062, 2576, 1930, 1934, 4065, 2578, 1884, 1880, 4050, 2551, 1879,
        3864, 2467, 2554, 1885, 2558, 2469}], 
      Line3DBox[{1954, 1953, 3873, 1952, 1929, 4061, 2575, 1928, 1985, 4089, 
       2603, 1984, 1964, 4075, 2589, 1886, 1887, 4052, 2556, 1890, 1891, 4084,
        2598, 1895, 3865, 2470, 2560, 1894, 2562, 2472}], 
      Line3DBox[{1995, 1996, 3878, 2000, 2619, 4104, 1990, 1989, 2616, 4102, 
       2012, 2011, 2614, 4100, 2013, 2043, 2637, 3895, 2488, 2635, 2058, 3897,
        2061, 2649, 2050, 3892, 2051, 2633, 2056, 3900, 2069, 2679, 2142, 
       3969, 2256, 2741, 2248, 3962, 2249, 2737, 2253, 3975, 2512, 3974, 2502,
        2711, 2198, 3940, 2712, 2197, 2196, 3961, 2734, 2230, 2229, 3957, 
       2729, 2243, 2239, 2727, 2240}], 
      Line3DBox[{1998, 1997, 2618, 2484, 4105, 2019, 2646, 4112, 2017, 2016, 
       2615, 4101, 2015, 2014, 2644, 4110, 2060, 2636, 2059, 3898, 2063, 2640,
        2062, 3901, 2053, 2632, 2052, 3899, 2068, 2643, 2070, 3955, 2238, 
       2740, 2252, 3963, 2251, 2736, 2250, 3977, 2262, 2746, 2261, 3976, 2263,
        3979, 2747, 2201, 2200, 3960, 2733, 2506, 2246, 3959, 2732, 2244, 
       2242, 3956, 2728, 2241, 2236, 2237}], 
      Line3DBox[{2023, 3879, 2024, 2039, 2628, 4107, 2038, 2009, 2613, 4099, 
       2010, 2001, 2610, 4096, 2002, 2007, 2631, 3891, 2049, 2701, 2144, 3918,
        2145, 2700, 2136, 3915, 2137, 2684, 2148, 3919, 2495, 2682, 2147, 
       3966, 2497, 2703, 2173, 3931, 2176, 3932, 2705, 2172, 2171, 3936, 2708,
        2499, 2191, 2707, 2192}], 
      Line3DBox[{2025, 3880, 2022, 2020, 2620, 4106, 2021, 2008, 2612, 4098, 
       2004, 2003, 2611, 4097, 2006, 2005, 2639, 3896, 2489, 2638, 2047, 3890,
        2048, 2699, 2139, 3916, 2493, 2677, 2138, 3917, 2141, 2683, 2149, 
       3965, 2507, 2735, 2247, 3964, 2498, 2704, 2179, 3937, 2194, 3938, 2709,
        2500, 2189, 3935, 2706, 2190, 2193, 2726, 2235}], 
      Line3DBox[{2073, 3902, 2074, 2078, 2647, 4113, 2082, 2083, 2653, 4116, 
       2089, 2170, 2702, 4125, 2169, 2036, 2627, 3886, 2037, 2686, 2030, 3883,
        2031, 2625, 2034, 3887, 2044, 2687, 2153, 3923, 2496, 2690, 2156, 
       3972, 2510, 2743, 2258, 3973, 2260, 2744, 2511}], 
      Line3DBox[{2075, 3903, 2076, 2077, 2651, 4114, 2085, 2163, 2698, 4124, 
       2168, 2166, 2697, 4123, 2167, 2026, 2621, 3881, 2027, 2622, 2028, 3882,
        2029, 2678, 2140, 3921, 2150, 2685, 2151, 3922, 2152, 2689, 2155, 
       3954, 2505, 2725, 2504}], 
      Line3DBox[{2080, 3904, 2079, 2071, 2645, 4111, 2072, 2081, 2654, 4117, 
       2088, 2086, 2652, 4115, 2087, 2035, 2626, 3885, 2485, 2623, 2032, 3884,
        2486, 2624, 2033, 3888, 2487, 2630, 2045, 3889, 2046, 2688, 2154, 
       3971, 2259, 2745, 2233, 3953, 2234, 3970, 2742, 2257, 2228, 2724, 
       2503}], Line3DBox[{2108, 2662, 2107, 2106, 3907, 2661, 2105, 3925, 
       2158, 2696, 2161, 3926, 2160, 2691, 2159, 3951, 2226, 2770, 2211, 3945,
        2212, 2768, 2207, 3943, 2203, 2714, 4126, 2202, 2209, 2716, 4128, 
       2174, 2175, 4009, 2520, 2776, 2324, 4013, 2515, 2751, 2282, 4006, 2519,
        2772, 2321, 4007, 2269, 2268}], 
      Line3DBox[{2123, 2122, 2668, 2121, 4118, 2120, 2695, 4122, 2111, 2664, 
       2110, 3928, 2164, 2693, 2162, 3927, 2093, 2656, 2092, 3910, 2115, 2666,
        2116, 3942, 2206, 2717, 2210, 3947, 2215, 2719, 2218, 3950, 2225, 
       2757, 4133, 2290, 2291, 2755, 4132, 2296, 2320, 4011, 2522, 2778, 2322,
        4005, 2774, 2266, 2265, 3986, 2750, 2281, 2279, 3985, 2280, 2289}], 
      Line3DBox[{2126, 2124, 2669, 2492, 4119, 2125, 2674, 4120, 2119, 2118, 
       2692, 4121, 2113, 2665, 2112, 3929, 2103, 2659, 2102, 3912, 2095, 2657,
        2094, 3911, 2097, 2658, 2096, 3949, 2217, 2718, 2216, 3948, 2065, 
       2641, 2064, 3991, 2295, 2756, 2292, 3989, 2293, 3990, 2517, 2754, 2294,
        4004, 2773, 2278, 2264, 3980, 2748, 2513, 2267, 3984, 2749, 2514, 
       2288, 3988, 2287, 2286}], 
      Line3DBox[{2127, 2104, 2660, 2491, 3908, 2663, 2109, 3909, 2114, 2667, 
       2117, 3930, 2165, 2694, 2157, 3924, 2091, 2655, 2090, 4001, 2315, 2769,
        2213, 3946, 2214, 2767, 2208, 3944, 2205, 2715, 4127, 2204, 2067, 
       2642, 4109, 2066, 2325, 4012, 2516, 2752, 2283, 4010, 2521, 2777, 2323,
        4008, 2775, 2271, 2270, 3987, 2285, 2284}], 
      Line3DBox[{2132, 2673, 2098, 2099, 3913, 2671, 2131, 3997, 2305, 2762, 
       2304, 3999, 2311, 2764, 2312, 4003, 2318, 2779, 4135, 2326, 2331, 2782,
        4138, 2182, 2183, 2722, 4131, 2186, 2185, 3933, 2184, 2753, 2274, 
       3982, 2275, 2759, 2272, 3981, 2273, 2302}], 
      Line3DBox[{2134, 2675, 2133, 2314, 4000, 2766, 2308, 3995, 2309, 2765, 
       2313, 4002, 2317, 2771, 4134, 2316, 2319, 2784, 4139, 2221, 2220, 2720,
        4129, 2219, 2224, 3952, 2227, 2723, 2187, 3934, 2188, 2761, 2298, 
       3992, 2299, 2303}], 
      Line3DBox[{2135, 2676, 2129, 2130, 3914, 2672, 2100, 3906, 2101, 2670, 
       2128, 3998, 2307, 2763, 2306, 3996, 2310, 2783, 2330, 4014, 2328, 2780,
        4136, 2327, 2329, 2781, 4137, 2223, 2222, 2721, 4130, 2180, 2181, 
       3994, 2518, 2760, 2276, 3983, 2277, 2758, 2297, 3993, 2300, 2301}], 
      Line3DBox[{2245, 2730, 2231, 2232, 2731, 3958, 2177, 2178, 2713, 3941, 
       2199, 2501, 2710, 3939, 2195, 3978, 2254, 2738, 2508, 3968, 2255, 2739,
        2509, 3967, 2143, 2680, 2494, 3920, 2146, 2681, 2055, 3893, 2054, 
       2648, 2490, 3905, 2084, 2650, 2057, 3894, 2634, 2042, 2041, 4108, 2629,
        2040, 2018, 4103, 2617, 1991, 1992, 4095, 2609, 1993, 1994, 3877, 
       1999}], Line3DBox[{2391, 2820, 2390, 2393, 2822, 2396, 4043, 2403, 
       2826, 2402, 4032, 2404, 2409}], 
      Line3DBox[{2395, 2821, 2394, 2406, 2827, 2405, 4042, 2408, 2407}], 
      Line3DBox[{2411, 2828, 2410, 2412, 2415}], Line3DBox[{2414, 2413}], 
      Line3DBox[{2420, 2419, 2832, 2432, 2336, 2787, 4017, 2337, 2332, 2785, 
       4015, 2333, 2340, 2795, 4020, 2349, 2362, 2804, 4026, 2530, 2803, 2361,
        4146, 2532, 2807, 2366, 4147, 2531, 2806, 2365, 4145, 2809, 2533, 
       2461, 4046, 2463, 2462}], 
      Line3DBox[{2425, 2424, 2834, 2422, 2421, 2833, 4036, 2423, 2338, 2788, 
       4018, 2339, 2334, 2786, 4016, 2335, 2356, 2802, 4025, 2360, 2363, 2805,
        4027, 2528, 2796, 2352, 4142, 2364, 2808, 2367, 4148, 2810, 2534, 
       2452, 4162, 2850, 2458, 2457, 4045, 2460, 2459}], 
      Line3DBox[{2427, 2426, 2835, 2433, 2436, 2836, 4037, 2437, 2442, 2840, 
       4038, 2443, 2445, 2841, 4039, 2543, 2839, 2346, 4141, 2527, 2793, 2345,
        4151, 2525, 2791, 2343, 4150, 2537, 2813, 2376, 4031, 2388, 2453}], 
      Line3DBox[{2428, 2418, 2829, 2417, 2416, 2831, 4035, 2431, 2430, 2830, 
       4034, 2429, 2347, 2794, 4019, 2348, 2353, 2797, 4021, 2351, 2350, 2800,
        4023, 2358, 2359, 2801, 4024, 2529, 2799, 2357, 4149, 2811, 2535, 
       2450, 4161, 2849, 2451, 2439, 4160, 2838, 2542, 2454, 4044, 2456, 
       2455}], Line3DBox[{2435, 2434, 2837, 2438, 2354, 2798, 4022, 2355, 
       2444, 2843, 4040, 2544, 2842, 2368, 4143, 2523, 2789, 2341, 4140, 2526,
        2792, 2344, 4157, 2536, 2812, 2371, 4029, 2375, 2374}], 
      Line3DBox[{2441, 2440, 2844, 2447, 2446, 2846, 4041, 2545, 2845, 2383, 
       4154, 2384, 2818, 2387, 4156, 2524, 2790, 2342, 4152, 2538, 2815, 2372,
        4028, 2373, 2377}], 
      Line3DBox[{2449, 2448, 2848, 2546, 2847, 2385, 4155, 2386, 2817, 2381, 
       4153, 2382, 2816, 2369, 4144, 2370, 2814, 2378, 4030, 2380, 2379}], 
      Line3DBox[{2540, 2823, 2392, 2539, 2819, 2389, 4158, 2397, 2824, 2398, 
       4159, 2541, 2825, 2401, 4033, 2400, 2399}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{2852, 3859, 2851, 2880, 4054, 3759, 2881, 2869, 3502, 2868}],
       Line3DBox[{2854, 3860, 2853, 2856, 4047, 3753, 2855, 2866, 4049, 3755, 
       2865, 2867, 3503, 2870}], Line3DBox[{2858, 2857}], 
      Line3DBox[{2860, 3861, 2859, 2862, 3501, 2861}], 
      Line3DBox[{2896, 3508, 2891, 2892, 3763, 4058, 2899, 2978, 3782, 4090, 
       2982, 2987, 3785, 4093, 2977, 2878, 3758, 4053, 2879, 2876, 3757, 4052,
        2877, 3522, 3427, 4065, 2930, 3519, 2931, 4066, 2932, 3772, 4078, 
       3423, 3711, 3871, 2912, 2913}], 
      Line3DBox[{2897, 3509, 2898, 2979, 3780, 4087, 2980, 2981, 3786, 4094, 
       2976, 2974, 3779, 4086, 2975, 2874, 3756, 4051, 2875, 3524, 2956, 4075,
        2955, 3523, 3425, 4062, 2928, 3526, 3432, 4079, 2957, 3876, 2910, 
       2911}], Line3DBox[{2901, 3510, 2900, 2902, 3512, 3869, 2893, 3422, 
       3511, 3868, 2888, 2887, 3507, 3867, 3710, 2886, 3506, 3866, 2883, 2882,
        3505, 3865, 3709, 3530, 3421, 3864, 2872, 3504, 2871, 3863, 3708, 
       3518, 4064, 2917, 2915, 3515, 4060, 2916, 2914, 3514, 4059, 2908, 2905,
        3870, 2907, 2909}], 
      Line3DBox[{2903, 3513, 2904, 2894, 3762, 4057, 2895, 2889, 3761, 4056, 
       2890, 2985, 3784, 4092, 2986, 2884, 3760, 4055, 2885, 2967, 3777, 4084,
        2966, 3529, 3420, 4050, 2873, 3525, 3426, 4063, 2929, 3770, 4076, 
       3424, 3706, 3754, 4048, 2863, 3707, 3862, 2864, 2906}], 
      Line3DBox[{2925, 3872, 2924, 2950, 4073, 3768, 2949, 2945, 4070, 3765, 
       2944, 2953, 4074, 3769, 2952, 2954, 3527, 2964}], 
      Line3DBox[{2937, 3873, 2923, 2922, 4069, 3428, 3521, 2947, 4071, 3766, 
       2946, 2948, 4077, 3771, 3431, 2951, 4083, 3776, 2962, 2963, 3528, 
       2965}], 
      Line3DBox[{2938, 3874, 2921, 2920, 4061, 2919, 3516, 2918, 4068, 3764, 
       2936, 2942, 4072, 3767, 3430, 2943, 4081, 3774, 2960, 2984, 4091, 3783,
        2983, 2969, 3531, 2968}], 
      Line3DBox[{2940, 3875, 2939, 2933, 4067, 2927, 3517, 2926, 4089, 2935, 
       3520, 2934, 4088, 3781, 3429, 2941, 4080, 3773, 2958, 2959, 4082, 3775,
        2961, 2971, 4085, 3778, 2970, 2972, 3532, 2973}], 
      Line3DBox[{2990, 2993, 3878, 3712, 3540, 4105, 3009, 3110, 3577, 4119, 
       3107, 3106, 3576, 4118, 3109, 3097, 3574, 3908, 3450, 3575, 3094, 3907,
        3448, 3579, 3117, 3914, 3116, 3578, 3114, 3913, 3453, 3580, 3119, 
       4000, 3282, 3637, 3281, 3473}], 
      Line3DBox[{3000, 2991, 3877, 2992, 3539, 3007, 4104, 3008, 3795, 4112, 
       3076, 3111, 3811, 4120, 3452, 3108, 3816, 4122, 3449, 3803, 3098, 3909,
        3095, 3802, 3096, 3925, 3118, 3810, 3715, 3906, 3092, 3809, 3115, 
       3997, 3277, 3842, 3741, 3995, 3275, 3638, 3283, 3288}], 
      Line3DBox[{3010, 3011, 3880, 3001, 3536, 3433, 4095, 2994, 3538, 3438, 
       4102, 3713, 3787, 4101, 3005, 3105, 3813, 4121, 3451, 3804, 3099, 3928,
        3103, 3807, 3104, 3930, 3148, 3817, 3717, 3926, 3112, 3808, 3113, 
       3998, 3272, 3838, 3273, 3999, 3278, 3841, 3280, 4002, 3286, 3639, 3287,
        3290}], 
      Line3DBox[{3069, 3070, 3904, 3066, 3563, 3443, 4107, 2999, 3535, 3435, 
       4098, 2997, 3534, 2998, 4108, 3029, 3560, 3050, 3895, 3789, 3051, 3898,
        3054, 3801, 3093, 3912, 3088, 3798, 3089, 3910, 3086, 3797, 3087, 
       4001, 3284, 3846, 3724, 3945, 3197, 3855, 3747, 4014, 3297, 3851, 4135,
        3745, 3299, 3856, 4139, 3206, 3207, 3610, 3204, 3205}], 
      Line3DBox[{3071, 3072, 3447, 3796, 4114, 3078, 3568, 3079, 4116, 3081, 
       3570, 3082, 4115, 3062, 3562, 3444, 3891, 3555, 3042, 3038, 3890, 3554,
        3039, 3046, 3893, 3557, 3047, 3059, 3900, 3793, 3061, 3955, 3201, 
       3822, 3726, 3948, 3200, 3823, 3202, 3950, 3190, 3819, 4127, 3721, 3192,
        3820, 4128, 3158, 3159, 3825, 4130, 3164, 3165, 3933, 3461, 3612, 
       3719, 3934, 3174, 3601, 3170, 3171}], 
      Line3DBox[{3073, 3074, 3903, 3075, 3572, 3446, 4113, 3077, 3573, 3085, 
       4117, 3080, 3569, 3434, 4096, 2995, 3556, 3043, 3896, 3561, 3040, 3041,
        3905, 3571, 3060, 3044, 3892, 3788, 3045, 3899, 3058, 3800, 3091, 
       3949, 3195, 3821, 3196, 3947, 3199, 3843, 3723, 3944, 3189, 3818, 4126,
        3720, 3194, 3853, 4137, 3208, 3209, 3826, 4131, 3168, 3169, 3952, 
       3211, 3611, 3175, 3602, 3176}], 
      Line3DBox[{3083, 3013, 3879, 3002, 3537, 3003, 4106, 3012, 3565, 3439, 
       4103, 3006, 3566, 3437, 4100, 3004, 3794, 4110, 3064, 3805, 3100, 3929,
        3147, 3814, 3718, 3927, 3146, 3815, 3716, 3924, 3142, 3812, 3143, 
       3951, 3210, 3839, 3274, 3996, 3276, 3840, 3279, 4003, 3285, 3847, 4134,
        3742, 3289, 3640, 3156, 3157}], 
      Line3DBox[{3084, 3067, 3902, 3068, 3564, 3445, 4111, 3065, 3567, 3436, 
       4099, 2988, 3533, 2989, 4097, 2996, 3558, 3048, 3894, 3559, 3049, 3052,
        3897, 3790, 3053, 3901, 3063, 3799, 3090, 3911, 3101, 3806, 3102, 
       3942, 3191, 3845, 3725, 3946, 3198, 3844, 3722, 3943, 3193, 3852, 4136,
        3746, 3298, 3854, 4138, 3166, 3167, 3824, 4129, 3727, 3203, 3609, 
       3172, 3173}], 
      Line3DBox[{3144, 3593, 3145, 3594, 3149, 4124, 3150, 3596, 3153, 4125, 
       3028, 3549, 3442, 3885, 3548, 3026, 3027, 3918, 3584, 3121, 3122, 3916,
        3582, 3123, 3128, 3920, 3586, 3130, 3227, 3969, 3828, 3731, 3963, 
       3055, 3791, 3056, 3991, 3261, 3833, 4133, 3254, 3057, 3792, 4109, 3714,
        3296, 4009, 3258, 3634, 3257, 3994, 3256, 3633, 3734, 3982, 3469, 
       3837, 3740, 3992, 3264, 3270}], 
      Line3DBox[{3151, 3595, 3152, 3597, 3459, 4123, 3019, 3543, 3020, 3886, 
       3550, 3016, 3017, 3884, 3547, 3025, 3034, 3915, 3581, 3120, 3126, 3917,
        3583, 3127, 3226, 3967, 3620, 3217, 3218, 3962, 3827, 3219, 3977, 
       3238, 3832, 3738, 3989, 3255, 3831, 4132, 3739, 3291, 4012, 3295, 3641,
        3294, 4013, 3269, 3836, 3735, 3983, 3470, 3835, 3733, 3981, 3245, 
       3271}], Line3DBox[{3154, 3598, 3021, 3544, 3440, 3881, 3541, 3014, 
       3022, 3883, 3546, 3024, 3032, 3888, 3552, 3033, 3037, 3919, 3585, 3129,
        3224, 3965, 3618, 3222, 3223, 3968, 3621, 3228, 3235, 3975, 3829, 
       3236, 3976, 3237, 3990, 3472, 3636, 3260, 4011, 3250, 3631, 3249, 4010,
        3247, 3830, 3248, 4006, 3262, 3834, 3263, 3993, 3265, 3268}], 
      Line3DBox[{3242, 3241, 3987, 3244, 3628, 3243, 3986, 3239, 3626, 3468, 
       3980, 3732, 3629, 3466, 3960, 3186, 3607, 3940, 3185, 3184, 3606, 3939,
        3182, 3937, 3161, 3160, 3599, 3931, 3155, 3460, 3623, 3971, 3139, 
       3456, 3592, 3923, 3138, 3131, 3587, 3921, 3125, 3455, 3591, 3124, 
       3454}], Line3DBox[{3251, 3246, 3985, 3736, 3630, 3471, 3984, 3240, 
       3627, 3465, 3959, 3730, 3616, 3961, 3464, 3188, 3608, 3941, 3187, 3183,
        3605, 3938, 3181, 3162, 3600, 3932, 3163, 3953, 3728, 3232, 3624, 
       3972, 3141, 3137, 3590, 3922, 3136, 3133, 3588, 3132, 3457}], 
      Line3DBox[{3253, 3252, 3988, 3737, 3632, 3463, 3956, 3729, 3614, 3957, 
       3215, 3216, 3615, 3958, 3462, 3178, 3603, 3935, 3177, 3180, 3604, 3936,
        3179, 3212, 3622, 3970, 3229, 3973, 3231, 3214, 3613, 3954, 3140, 
       3135, 3589, 3134, 3458}], 
      Line3DBox[{3267, 3266, 4007, 3293, 3848, 3292, 4008, 3744, 3849, 3475, 
       4005, 3743, 3850, 3474, 4004, 3259, 3635, 3467, 3979, 3233, 3625, 3974,
        3234, 3978, 3230, 3221, 3617, 3964, 3220, 3225, 3619, 3966, 3213, 
       3036, 3553, 3889, 3035, 3031, 3551, 3887, 3030, 3023, 3545, 3882, 3018,
        3015, 3542, 3441}], 
      Line3DBox[{3319, 3318, 3653, 3317, 3316, 3658, 4023, 3336, 3341, 3664, 
       4027, 3339, 3662, 3338, 4146, 3670, 3483, 3311, 4151, 3673, 3482, 3310,
        4157, 3679, 3493, 3751, 4028, 3365, 3372}], 
      Line3DBox[{3328, 3327, 3657, 3335, 3750, 3659, 4024, 3323, 3651, 3322, 
       4142, 3490, 3666, 3350, 4147, 3671, 3481, 3309, 4150, 3672, 3491, 3364,
        4029, 3368, 3370}], 
      Line3DBox[{3334, 3333, 3660, 3332, 3656, 3331, 4149, 3352, 3667, 3351, 
       4148, 3349, 3665, 3348, 4145, 3857, 3363, 3369, 4031, 3367, 3366}], 
      Line3DBox[{3378, 3373, 4030, 3371, 3492, 3674, 4152, 3308, 3480, 3646, 
       4140, 3307, 3479, 3647, 4141, 3748, 3690, 3489, 4026, 3663, 3340, 3337,
        4025, 3661, 3330, 3324, 4021, 3652, 3749, 3320, 3650, 3321, 3389}], 
      Line3DBox[{3383, 3380, 4032, 3379, 3681, 4159, 3345, 3344, 3675, 4153, 
       3374, 3375, 3676, 4154, 3361, 3360, 3695, 4040, 3395, 3694, 3394, 4038,
        3691, 3487, 3301, 4015, 3642, 3476, 3300, 4018, 3645, 3306, 3314, 
       4034, 3685, 3391, 3392, 3688, 3393}], 
      Line3DBox[{3384, 4033, 3343, 3342, 3669, 4144, 3347, 3346, 3678, 4156, 
       3359, 3353, 3668, 4143, 3354, 3362, 3693, 4039, 3692, 3486, 3315, 4020,
        3649, 3485, 3302, 4016, 3643, 3303, 3313, 4019, 3648, 3484, 3312, 
       3684, 3390}], 
      Line3DBox[{3385, 3386, 4042, 3381, 3682, 3382, 4043, 3376, 3680, 4158, 
       3358, 3357, 3677, 4155, 3356, 3355, 3696, 4041, 3329, 3655, 3326, 4022,
        3654, 3488, 3325, 4037, 3689, 3478, 3305, 4017, 3644, 3477, 3304, 
       4036, 3687, 3494, 3377, 4035, 3686, 3495, 3387, 3683, 3388}], 
      Line3DBox[{3399, 3698, 3398, 3498, 3699, 3752, 4160, 3496, 3705, 3414, 
       4045, 3418, 3419}], 
      Line3DBox[{3400, 3700, 3396, 3497, 3697, 3397, 4161, 3499, 3701, 3401, 
       4162, 3858, 3415, 3417, 4046, 3405, 3404}], 
      Line3DBox[{3403, 3702, 3402, 3500, 3703, 3408, 4044, 3413, 3416}], 
      Line3DBox[{3407, 3406}], Line3DBox[{3410, 3704, 3409, 3411, 3412}]}}},
   VertexNormals->CompressedData["
1:eJztXUGuFTkMfIILsP8fpDnD3ACJC3AEJNasuQW3mGNwlzkJLGDxI/knTmxX
2fEqmqKnO7bLZSfdL/+fL98+f33zeDw+vns83v4en//98em/7///fP9nfB7G
bPj476f3fyKxywuXRpbnSnFF+23XrifQPFHPzZZ3LPmeLV6sdlnpG0ono/ws
8d4qXqv3+eB0f686UjVPtXEZ/bAbx46LDkfrm3W/zY7P7J1dZ52PM5579TO7
cc/Wz6Nxbx2rqpNV11lV4yXpW9RztTq5en1U/8yybs2eX+y4NEbX8Sw4W/9z
Kz7j7e15nQXX7gPs6tVqvUPvM8x04fT66P03bf5a+1+7j2TFt/F+3nkRXUfQ
/aF3nlrfn62+Pw1jFZ7M/DzLb5Z5nl7v/X5E+1y0Xln7Lcr/q/eJ5rNXXfO6
j7V/JN5q+bPax3n5B13Hs+X17Th6fXQaR6v5R+ktW328TTdQcc+aX2icff4s
/JHyV9IdFh2Iiq+VXbP7SN9dsNVZFt7O/IP2m5ddq/4f83fkH5u92XTDu/9k
rV8s/Z7V+hrtz8Z1ecHO81V9RuMsfq5mr9f70Op+m+UhS7xmfdRuf4Xex/bi
M1s/k7XvQuMoXULrYfeNjVfA0f0e6jtzdj1HxyWr3xp/iXedssmvqO+gvOOb
NX9P972r+GHX3ufBbja7mv/YPELx0zqvo+1im2fjnHzuPm0N99JnNp1Z5YnE
j1P+ZHvv7/V7+ao4S1/knV/W+/be16/m+8jjaF3yfm7Xu8Y9eMuiS7fh7U9O
nPU9QuO5+bCb77fvv92Ka3/3zTb/xmvg2nUH6pxnNj80bovfqnus+3JsfTL6
+4QsvM1y7i6L37QjOr5W+Pjv6Hz3qr9ou6rjrPWLTU9ar9byVNIllv48q5//
/veohxIedf/V67X3YfO/dxytrmfHrXVg1z9V/FkF99Y3VlxbN9nqaeNYnki6
Ko1eOuxl1+n1jdfGpeui60jUc734vzrPW/Ju1c9R/YlW/6P682g+WK03veZv
zYeZzln7M9peL75Z+Y1Nt2frAhb9ROs2y3waf533VrrhrZMofWbDs6y/rPXW
67xiLX9218vVdHXVbzO9YMG1fWzUusMr76znn0WXsuHV/KnV2+5Xdbh1XrPE
a9eurPHNUjfRuPW5B9nwWV5En8/D2hc1fid+mherfB5HFP+z5x36+zSWfhv1
96Cz88eqv0WdayftM3jxvGpfxIqf7pNI/382/kfhMz9r67V0/W7dj96vs7qP
NQ+jzolq3AaXRq/nevfV6L492p9V8Cp1qvmzlo/oPK2Oj+Ptfq7qB1a7vPrn
xm38X9XPXnZJY/c/ueJYDdfqP3u9YI17lN+8dWbEZ36/5b08W15o/bl6/W5+
scWXLV6Nx8TF+v7R5wNE8zb7/FE4ax9ija+OVnGf3Ye9D/TOiyej+1jVa8ku
Lx2e4af8GUftd0re/ER9NxX1u+PbcK1/Ztej6u9uvnjXqWx9Jhs/o3hlfX9p
tMpHVB+ya9ctfLPyT7RdWnut+rcZH1DfubHzU8vDMV5ef0eVnf8oXUX1RVb5
mHX+p3HMzme0/1nmY5W/3nXQu15nz2vtaD2fUz3J4ufGa+dRddy6f2PDZ3xj
4SFrXnjt87Damx1H/U55FmdpntX1p/U8Fl/loeQvFG9355NtXRCFo+pL17XG
M+PROtD5UsNvbPOpilv5Oarf6D628Qg+o3Ht7zSz29v467g0euXLLI+i9+FR
eV1FT7x0SeufXX9Wfe+Tff4ou7z0sDoeXUfQ9mbBreLC8v2VdV3Iqv9Z5tl+
4MZXf7+G1o0oe1l5K12/qm9jPDtfzvAZf07j5c1/Nn9mxaWx1ykv/bB6PrNW
n6PfL0Tp54xX6PpVBV/NI3Tc0fnLMh8WXKsbrDgb39jw6HMOrXWGLX+9v/tl
s7cKztJvSP2PNLLyYRyjzjvajWOVete4Ln+8nxvVV98+/6h5Wq1PZ/tjUX/v
yctvLPW08ddx7RjVz8/4s1uvrd4XnPotm06y6382fJcnq/ezrndjPdK+V7Wy
ly2Ot+Ba3fCqC1b3aV41voJ78cT7uxR2fciGSyPbPLXzl/blTp9rde56Ff9n
waV4zfzPplfsuhr9fZS3PqP1n/1cqWg/sPAcVX/Rca/m/926wI5nn783/62+
V8yiS7vnyUe9r8nGh8ZtcZRerT43qg+UrmOL1yk++x4oOy5dh9pnZlvX3IJX
zd/quNd3fVXy7nRfQvJDVd2rEner/m233x5HlD+19jb++qg93wylb9nz/fS9
2CwevR7nxFf1yqouV1/fVcW1I9v8Wfrbxhtnxln7k9txVFxmz83Wj632rX1u
T+OR+G188NYN6/f41fnQdZ8bZ+NnNJ+z7xto88s7H6PyneWcYev7sJ7D6VVP
T/1m7R+2dQfbfBqPyQuveseiJ6v+9NJVK3+y5/Xq/aXxVr9F41Y8bxyDz/KN
VW+t60V2e3d1lc3e3d9f7D7Xex2NWqfv8rmqnrPxnAW/Rfei7Y3u97zsiu5X
pfEWfnrhszjepgPV9afxxlfG7q848NM6W3V/ydqfI95+i8FZvpfr+ovFV/2/
ygfU+aLS6D3PVX+xxT1KT6L1gU1PZvPRnq+OtoutLs/ms3rupdSHoPlj5X8W
/mTHrfvVVX1g80OV+oLOI2mUnssWFxa8/RPDQ9Z8z9ofZser1S/r+m49H7R/
tPl42hdZ6QObvkX3OV0f1/zDplfe64tT/WH1W5a+KPpcVrQ/s+cjGz7Th9P+
Ad3/sM8nqh8+7UvR/blXvKSRRTdG+6W/2xitkyz+ya7/0jyzzH83v9jmWQ3/
BbniEu8=
    "]],
  AutomaticImageSize->True,
  Axes->True,
  BoxRatios->{1, 1, 1},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{387.8626107596461, 390.36267985334234`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]]},
  PlotRange->{{-1, 1}, {-1, 1}, {-1, 1}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-2.371456300622234, -1.5711890888249118`, 1.8323645547206624`},
  ViewVertical->{-0.7408325218953856, 0.43856541652524184`, 
   0.5087509704464103}]], "Output",
 CellChangeTimes->{3.66869440586436*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.668694422524156*^9, 3.6686944225286293`*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot3D[a + b+c, {a, -1, 1} , {b, -1, 1} , {c , -1 , 1 \
},Axeslabel->{a,b,c}]", Typeset`newq$$ = 
   "Plot3D[a + b+c, {a, -1, 1} , {b, -1, 1} , {c , -1 , 1 \
},Axeslabel->{a,b,c}]"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"",DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm]],"\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{13., {4., 9.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "Plot3D[a + b+c, {a, -1, 1} , {b, -1, 1} , {c , -1 , 1 \
},Axeslabel->{a,b,c}]"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{"a", ",", " ", 
   RowBox[{"{", 
    RowBox[{"b", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"c", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 Graphics3DBox[{},
  AutomaticImageSize->True,
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{363.46982563670394`, 293.32842801507513`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {0., 0.}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.0948029475964813`, -2.708668153179422, 1.707197511094009},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.6686945098833513`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot3D[a, {b, -1, 1}, {c, -1, 1},label(x,y,z)]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"Particle\", \"CharmQuark\"][EntityProperty[\"Particle\", \
\"FullSymbol\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox[
                    StyleBox[
                    "c", {LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}, StripOnInput -> False], 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ParticleData, "CharmQuark"}]], Identity], 
                    "\"  \"", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"charm quark\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], LineIndent -> 
                    0], {LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"full symbol\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
            "c", {LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
              0}, StripOnInput -> False], TraditionalForm]], "Output", {}]}], 
       
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$, Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "label c", "score" -> "0.212121", "level" -> "low"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ParticleDataSourceInformationNotes.html", "text" -> "Particle data"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ParticleDataSourceInformationNotes.html", "text" -> "Particle data"}, {}]}]}, 
   Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "Particle", "timedout" -> "", "timedoutpods" -> "", "timing" -> "5.814", 
     "parsetiming" -> "0.185", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa1138218fbi7e3026935900001b48c9c1h1fadeb3&s=35", "id" -> 
     "MSPa1139218fbi7e302693590000113f5g502178fgb9", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "35", "related" -> "", 
     "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:5.81366"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "Particle", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.415", 
     "parsetiming" -> "0.", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa1182218fbh90cbha0d500000544gf68ied9790hg&s=35", "id" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1183218fbh90cbha0d5000005bdb2aed4abhg53a&s=35", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "35", "related" -> "", 
     "version" -> "2.6", "profile" -> "EnterDoRecalculate:0."}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 49, 19.872866`8.050835488139722}, "Line" -> 17, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {"Result", "Result", 1, 1, "Content"}, Typeset`open$$ = 
   False, Typeset`newq$$ = "Plot3D[a, {b, -1, 1}, {c, -1, 1},label(x,y,z)]"}, 
   
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{246., {46., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa1138218fbi7e3026935900001b48c9c1h1fadeb3&s=35", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox["c",
      StripOnInput->False,
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100}],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Plot3D[a, {b, -1, 1}, {c, -1, 1},label(x,y,z)]", {{"Result", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.668694567553906*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot3D[a, {b, -1, 1}, {c, -1, 1},label(a,b,c)]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"Particle\", \"CharmQuark\"][EntityProperty[\"Particle\", \
\"FullSymbol\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox[
                    StyleBox[
                    "c", {LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}, StripOnInput -> False], 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ParticleData, "CharmQuark"}]], Identity], 
                    "\"  \"", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"charm quark\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], LineIndent -> 
                    0], {LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"full symbol\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
            "c", {LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
              0}, StripOnInput -> False], TraditionalForm]], "Output", {}]}], 
       
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$, Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "label c", "score" -> "0.212121", "level" -> "low"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ParticleDataSourceInformationNotes.html", "text" -> "Particle data"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ParticleDataSourceInformationNotes.html", "text" -> "Particle data"}, {}]}]}, 
   Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "Particle", "timedout" -> "", "timedoutpods" -> "", "timing" -> "5.413", 
     "parsetiming" -> "0.181", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa39321g3f4dfh4ih51c09000064edd3a89fc71i0h&s=43", "id" -> 
     "MSPa39331g3f4dfh4ih51c0900003a0a23657dece160", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "43", "related" -> "", 
     "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:5.41349"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "Particle", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.429", 
     "parsetiming" -> "0.", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa51731g3f4587dc5b2h6d000020d5e5011h810125&s=43", "id" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa51741g3f4587dc5b2h6d00000ef937fg39h4f67d&s=43", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "43", "related" -> "", 
     "version" -> "2.6", "profile" -> "EnterDoRecalculate:0."}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 49, 38.407198`8.336987603129835}, "Line" -> 18, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {"Result", "Result", 1, 1, "Content"}, Typeset`open$$ = 
   False, Typeset`newq$$ = "Plot3D[a, {b, -1, 1}, {c, -1, 1},label(a,b,c)]"}, 
   
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{248., {46., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa39321g3f4dfh4ih51c09000064edd3a89fc71i0h&s=43", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox["c",
      StripOnInput->False,
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100}],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Plot3D[a, {b, -1, 1}, {c, -1, 1},label(a,b,c)]", {{"Result", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.668694587009676*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot3D[a, {b, -1, 1}, {c, -1, 1},Axeslabel - > (a,b,c)]", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"Particle\", \"CharmQuark\"][EntityProperty[\"Particle\", \
\"FullSymbol\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox[
                    StyleBox[
                    "c", {LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}, StripOnInput -> False], 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ParticleData, "CharmQuark"}]], Identity], 
                    "\"  \"", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"charm quark\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"], LineIndent -> 
                    0], {LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"full symbol\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
            "c", {LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
              0}, StripOnInput -> False], TraditionalForm]], "Output", {}]}], 
       
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$, Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "label c", "score" -> "0.0512821", "level" -> "low"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ParticleDataSourceInformationNotes.html", "text" -> "Particle data"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "http://www.wolframalpha.com/sources/\
ParticleDataSourceInformationNotes.html", "text" -> "Particle data"}, {}]}]}, 
   Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "Particle", "timedout" -> "", "timedoutpods" -> "", "timing" -> "5.363", 
     "parsetiming" -> "0.187", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa29321b6cadg961gfe97i0000642709cb52i2e955&s=29", "id" -> 
     "MSPa29331b6cadg961gfe97i00000f5h923fa0idfabi", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "29", "related" -> "", 
     "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:5.36273"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "Particle", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.423", 
     "parsetiming" -> "0.", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa29341b6cadg961gfe97i000054239h5d3giiggci&s=29", "id" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa29351b6cadg961gfe97i00006994f26c114h29a2&s=29", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "29", "related" -> "", 
     "version" -> "2.6", "profile" -> "EnterDoRecalculate:0."}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 50, 19.773124`8.048650273866885}, "Line" -> 19, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {"Result", "Result", 1, 1, "Content"}, Typeset`open$$ = 
   False, Typeset`newq$$ = 
   "Plot3D[a, {b, -1, 1}, {c, -1, 1},Axeslabel - > (a,b,c)]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{298., {46., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa29321b6cadg961gfe97i0000642709cb52i2e955&s=29", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox["c",
      StripOnInput->False,
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100}],
     TraditionalForm], "Output",
    ScriptLevel->0,
    FontFamily->"Times",
    FontSize->14,
    Background->None],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Plot3D[a, {b, -1, 1}, {c, -1, 1},Axeslabel - > (a,b,c)]", {{"Result", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.668694626865148*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "a\[Equal]{{1,2,3},{4,5,6},{7,8,9}}\:ff1b", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Input", "Input", 1, 1, "Input", 
        "a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> True}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> "Input"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"a", "\[LongEqual]", 
               TagBox[
                RowBox[{"(", "\[NoBreak]", 
                  
                  GridBox[{{"1", "2", "3"}, {"4", "5", "6"}, {"7", "8", "9"}},
                    RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> 
                   Baseline, ColumnAlignments -> Center], "\[NoBreak]", ")"}],
                 Identity]}], PolynomialForm[#, TraditionalOrder -> False]& ],
             TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Dimensions", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "List", "title" -> "Dimensions"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Dimensions[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              FormBox[
               TemplateBox[{"3", 
                 TemplateBox[{
                   StyleBox["\" (rows)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" \[Times] \""}, 
                  "RowDefault"], "3", 
                 TemplateBox[{
                   StyleBox["\" (columns)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}, 
                "RowDefault"], TraditionalForm], 
              Format[#, TraditionalForm]& ], TraditionalForm], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MatrixPlot", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "List", "title" -> "Matrix plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"MatrixPlot[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["moutput", {}, {"{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             
             RasterBox[{{{0.9068285986415744, 0.5163040947893843, 
              0.0046387333791289564`}, {0.9534142993207871, 
              0.47377728581690925`, 0.0023193666895644782`}, {1., 
              0.4312504768444343, 0.}}, {{0.8955825485009424, 
              0.7133746872364464, 0.31087744336226963`}, {0.8779125304644959, 
              0.6361026912635918, 0.1589173227932198}, {0.8602428979623615, 
              0.5588309037618593, 0.006958100068693434}}, {{
              0.8763050235334635, 0.8352842574311219, 0.5904334864459317}, {
              0.894778686604383, 0.8129653054610794, 0.526635260702941}, {
              0.9132523496753023, 0.7906463534910368, 
              0.4628370349599504}}}, {{0, 0}, {3, 3}}, {0, 1}], Frame -> True,
              FrameLabel -> {None, None}, FrameTicks -> {{{{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}, {{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}}, {{{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}}, {{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}}}}, ImageSize -> 75], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "minput,moutput,computabledata,formatteddata"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Determinant", "numsubpods" -> "1", 
     "position" -> "400", "scanner" -> "List", "title" -> "Determinant"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Det[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["moutput", {}, {"0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["0", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Determinant__Step-by-step solution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Trace", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "List", "title" -> "Trace"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Tr[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["moutput", {}, {"15"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["15", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`pod6$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "ConditionNumber", "numsubpods" -> "1",
      "position" -> "600", "scanner" -> "List", "title" -> 
     "Condition number"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\[Infinity]", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MatrixRank", "numsubpods" -> "1", 
     "position" -> "700", "scanner" -> "List", "title" -> "Matrix rank"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"MatrixRank[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["moutput", {}, {"2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["2", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "\[Equal]", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "MathOperator", "desc" -> " referring to math", "input" -> 
          "*C.%EF%90%B1-_*MathOperator-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "SetTheoryWord", "desc" -> " referring to set theory", 
          "input" -> "*C.%EF%90%B1-_*SetTheoryWord-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "a\[Equal]{{1,2,3},{4,5,6},{7,8,9}}", "score" -> "0.954545", "level" -> 
        "high"}, {}]}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.379", 
    "parsetiming" -> "0.662", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa01gbg6539478f5c0i000039idga9582h73b0a", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "41", "related" -> "", 
    "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:4.37854"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 52, 30.343919`8.234646651368775}, "Line" -> 20, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Input", "Input", 1, 1, "Input", "a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}"},
    Typeset`open$$ = True, Typeset`newq$$ = 
   "a\[Equal]{{1,2,3},{4,5,6},{7,8,9}}\:ff1b"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {965., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.668694750411047*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "a\[Equal]{{1,2,3},{4,5,6},{7,8,9}};ListPlot[a];", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Dimensions", "Dimensions", 1, 1, "Input", 
        "Dimensions[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> "Input"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"a == {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"a", "\[LongEqual]", 
               TagBox[
                RowBox[{"(", "\[NoBreak]", 
                  
                  GridBox[{{"1", "2", "3"}, {"4", "5", "6"}, {"7", "8", "9"}},
                    RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> 
                   Baseline, ColumnAlignments -> Center], "\[NoBreak]", ")"}],
                 Identity]}], PolynomialForm[#, TraditionalOrder -> False]& ],
             TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Dimensions", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "List", "title" -> "Dimensions"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Dimensions[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              FormBox[
               TemplateBox[{"3", 
                 TemplateBox[{
                   StyleBox["\" (rows)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" \[Times] \""}, 
                  "RowDefault"], "3", 
                 TemplateBox[{
                   StyleBox["\" (columns)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}, 
                "RowDefault"], TraditionalForm], 
              Format[#, TraditionalForm]& ], TraditionalForm], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MatrixPlot", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "List", "title" -> "Matrix plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"MatrixPlot[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["moutput", {}, {"{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             
             RasterBox[{{{0.9068285986415744, 0.5163040947893843, 
              0.0046387333791289564`}, {0.9534142993207871, 
              0.47377728581690925`, 0.0023193666895644782`}, {1., 
              0.4312504768444343, 0.}}, {{0.8955825485009424, 
              0.7133746872364464, 0.31087744336226963`}, {0.8779125304644959, 
              0.6361026912635918, 0.1589173227932198}, {0.8602428979623615, 
              0.5588309037618593, 0.006958100068693434}}, {{
              0.8763050235334635, 0.8352842574311219, 0.5904334864459317}, {
              0.894778686604383, 0.8129653054610794, 0.526635260702941}, {
              0.9132523496753023, 0.7906463534910368, 
              0.4628370349599504}}}, {{0, 0}, {3, 3}}, {0, 1}], Frame -> True,
              FrameLabel -> {None, None}, FrameTicks -> {{{{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}, {{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}}, {{{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}}, {{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}}}}, ImageSize -> 75], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "minput,moutput,computabledata,formatteddata"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Determinant", "numsubpods" -> "1", 
     "position" -> "400", "scanner" -> "List", "title" -> "Determinant"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Det[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["moutput", {}, {"0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["0", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Determinant__Step-by-step solution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Trace", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "List", "title" -> "Trace"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Tr[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["moutput", {}, {"15"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["15", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`pod6$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "ConditionNumber", "numsubpods" -> "1",
      "position" -> "600", "scanner" -> "List", "title" -> 
     "Condition number"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\[Infinity]", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MatrixRank", "numsubpods" -> "1", 
     "position" -> "700", "scanner" -> "List", "title" -> "Matrix rank"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"MatrixRank[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}], 
       XMLElement["moutput", {}, {"2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["2", TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "\[Equal]", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "MathOperator", "desc" -> " referring to math", "input" -> 
          "*C.%EF%90%B1-_*MathOperator-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "SetTheoryWord", "desc" -> " referring to set theory", 
          "input" -> "*C.%EF%90%B1-_*SetTheoryWord-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "a\[Equal]{{1,2,3},{4,5,6},{7,8,9}}", "score" -> "0.65625", "level" -> 
        "high"}, {"\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.334171", "level" -> "medium"}, {
         "6 7 8 9 ListPlot"}], "\n  "}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.937", 
    "parsetiming" -> "0.636", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa2611d2bac40g1506fa900000h5ge4c24b7c82f7", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "17", "related" -> "", 
    "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:4.93736"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 53, 30.711786`8.239880053929415}, "Line" -> 21, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Dimensions", "Dimensions", 1, 1, "Input", 
    "Dimensions[{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "a\[Equal]{{1,2,3},{4,5,6},{7,8,9}};ListPlot[a];"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{352., {64., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.668694810773499*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "a\[Equal]{{1,2},{4,5},{7,8}};ListPlot[a];",
    Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Dimensions", "Dimensions", 1, 1, "Input", 
        "Dimensions[{{1, 2}, {4, 5}, {7, 8}}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> "Input"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"a == {{1, 2}, {4, 5}, {7, 8}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"a", "\[LongEqual]", 
               TagBox[
                RowBox[{"(", "\[NoBreak]", 
                  
                  GridBox[{{"1", "2"}, {"4", "5"}, {"7", "8"}}, RowSpacings -> 
                   1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
                   ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
                Identity]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Dimensions", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "List", "title" -> "Dimensions"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Dimensions[{{1, 2}, {4, 5}, {7, 8}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              FormBox[
               TemplateBox[{"3", 
                 TemplateBox[{
                   StyleBox["\" (rows)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" \[Times] \""}, 
                  "RowDefault"], "2", 
                 TemplateBox[{
                   StyleBox["\" (columns)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}, 
                "RowDefault"], TraditionalForm], 
              Format[#, TraditionalForm]& ], TraditionalForm], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MatrixPlot", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "List", "title" -> "Matrix plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"MatrixPlot[{{1, 2}, {4, 5}, {7, 8}}]"}], 
       XMLElement["moutput", {}, {"{{1, 2}, {4, 5}, {7, 8}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             
             RasterBox[{{{0.9388562678585333, 0.4870669136208077, 
              0.003044168780053374}, {1., 0.4312504768444343, 0.}}, {{
              0.8867475394827191, 0.6747386892500191, 0.2348973830777447}, {
              0.863555640809883, 0.5733191945356475, 0.035449724830867}}, {{
              0.8820780432431259, 0.8283095849404837, 0.5704965409012472}, {
              0.9063247260237076, 0.7990159604798028, 
              0.48676136961357197`}}}, {{0, 0}, {2, 3}}, {0, 1}], Frame -> 
             True, FrameLabel -> {None, None}, FrameTicks -> {{{{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}, {{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}}, {{{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}}, {{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}}}}, ImageSize -> 75], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "minput,moutput,computabledata,formatteddata"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "VoronoiPlot", "numsubpods" -> "1", 
     "position" -> "400", "scanner" -> "List", "title" -> "Voronoi plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{
              
              GraphicsComplexBox[{{7.300000000000001, 4.70000000000001}, {
               0.6999999999999997, 5.300000000000011}, {3.70000000000001, 
               8.3}, {4.300000000000011, 1.6999999999999997`}, {
               0.6999999999999997, 8.3}, {7.300000000000001, 
               1.6999999999999997`}}, {{{
                  EdgeForm[], 
                  GrayLevel[0.8], 
                  GraphicsGroupBox[{
                    PolygonBox[{{5, 2, 4, 6, 1, 3}}]}]}, {}, {}, {}, {}}}, 
               VertexColors -> {{0.9411764705882353, 0.863889524681468, 
                0.5378347447928588}, {0.9411764705882353, 0.863889524681468, 
                0.5378347447928588}, {0.9411764705882353, 0.863889524681468, 
                0.5378347447928588}, {0.9411764705882353, 0.863889524681468, 
                0.5378347447928588}, {0.9411764705882353, 0.863889524681468, 
                0.5378347447928588}, {0.9411764705882353, 0.863889524681468, 
                0.5378347447928588}}], {
               AbsolutePointSize[4], 
               GrayLevel[0], 
               PointBox[{{1, 2}, {4, 5}, {7, 8}}]}}, {
             ImageSize -> 200, AspectRatio -> 1, Frame -> True, 
              FrameLabel -> {None, None}, Method -> {}, 
              PlotRange -> {{0.6999999999999997, 7.300000000000001}, {
               1.6999999999999997`, 8.3}}, PlotRangeClipping -> True, 
              PlotRangePadding -> 0.1}], TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show Delaunay triangulation", "input" -> 
         "VoronoiPlot__Show Delaunay triangulation"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "PseudoInverse", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "List", "title" -> "Pseudoinverse"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"PseudoInverse[{{1, 2}, {4, 5}, {7, 8}}]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              StyleBox[
               FractionBox["1", "6"], ScriptLevel -> 1], 
              RowBox[{"(", "\[NoBreak]", 
                GridBox[{{
                   RowBox[{"-", "7"}], 
                   RowBox[{"-", "2"}], "3"}, {"6", "2", 
                   RowBox[{"-", "2"}]}}, RowSpacings -> 1, ColumnSpacings -> 
                 1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
                "\[NoBreak]", ")"}]}], TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "PseudoInverse__Approximate form"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "\[Equal]", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "MathOperator", "desc" -> " referring to math", "input" -> 
          "*C.%EF%90%B1-_*MathOperator-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "SetTheoryWord", "desc" -> " referring to set theory", 
          "input" -> "*C.%EF%90%B1-_*SetTheoryWord-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "a\[Equal]{{1,2},{4,5},{7,8}}", "score" -> "0.576923", "level" -> 
        "medium"}, {"\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.338945", "level" -> "medium"}, {
         "5 7 8 ListPlot"}], "\n  "}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.243", 
    "parsetiming" -> "0.51", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSPa48651cdbd4hc9d1edaf400001171e71abb2f15gf", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "15", "related" -> "", 
    "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:4.24293"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 54, 3.324385`7.274286302398766}, "Line" -> 22, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Dimensions", "Dimensions", 1, 1, "Input", 
    "Dimensions[{{1, 2}, {4, 5}, {7, 8}}]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "a\[Equal]{{1,2},{4,5},{7,8}};ListPlot[a];"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{289., {64., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.668694843387994*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"6", ",", " ", "7", ",", " ", "8", ",", " ", "9"}], "}"}], ",", 
   " ", 
   RowBox[{"Mesh", " ", "->", " ", "All"}], ",", " ", 
   RowBox[{"Filling", " ", "->", " ", "Axis"}], ",", " ", 
   RowBox[{"AxesOrigin", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "0"}], "}"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, 
   GraphicsComplexBox[{{1., 6.}, {2., 7.}, {3., 8.}, {4., 9.}, {1., 0.}, {4., 
    0.}}, {{{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[
        PolygonBox[{{1, 5, 6, 4, 3, 2}}]]}, {}, {}}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3, 4}]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       PointBox[{1, 2, 3, 4}]}, {}, {}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{1., 4.}, {0., 9.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.668694875812977*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "a={{1,3},{5,6},{8,9}};b=ListPlot[a];", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Dimensions", "Dimensions", 1, 1, "Input", 
        "Dimensions[{{1, 3}, {5, 6}, {8, 9}}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> "Input"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"a == {{1, 3}, {5, 6}, {8, 9}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"a", "\[LongEqual]", 
               TagBox[
                RowBox[{"(", "\[NoBreak]", 
                  
                  GridBox[{{"1", "3"}, {"5", "6"}, {"8", "9"}}, RowSpacings -> 
                   1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
                   ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
                Identity]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Dimensions", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "List", "title" -> "Dimensions"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Dimensions[{{1, 3}, {5, 6}, {8, 9}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              FormBox[
               TemplateBox[{"3", 
                 TemplateBox[{
                   StyleBox["\" (rows)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" \[Times] \""}, 
                  "RowDefault"], "2", 
                 TemplateBox[{
                   StyleBox["\" (columns)\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}, 
                "RowDefault"], TraditionalForm], 
              Format[#, TraditionalForm]& ], TraditionalForm], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "MatrixPlot", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "List", "title" -> "Matrix plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"MatrixPlot[{{1, 3}, {5, 6}, {8, 9}}]"}], 
       XMLElement["moutput", {}, {"{{1, 3}, {5, 6}, {8, 9}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             
             RasterBox[{{{0.9417678741509841, 0.48440898806002797`, 
              0.002899208361955595}, {1., 0.4312504768444343, 0.}}, {{
              0.8823300349736075, 0.6554206902568055, 0.1969073529354824}, {
              0.8602428979623615, 0.5588309037618593, 
              0.006958100068693434}}, {{0.8809234393011934, 
              0.8297045194386112, 0.5744839300101842}, {0.9132523496753023, 
              0.7906463534910368, 0.4628370349599504}}}, {{0, 0}, {2, 3}}, {0,
               1}], Frame -> True, FrameLabel -> {None, None}, 
             FrameTicks -> {{{{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}, {{2.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {0.5, 
                  FormBox["3", TraditionalForm]}}}, {{{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}}, {{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}}}}, ImageSize -> 75], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "minput,moutput,computabledata,formatteddata"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "VoronoiPlot", "numsubpods" -> "1", 
     "position" -> "400", "scanner" -> "List", "title" -> "Voronoi plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{
              
              GraphicsComplexBox[{{0.6499999999999995, 7.633333333333333}, {
               0.6499999999999995, 7.633333333333333}, {8.350000000000001, 
               5.6499999999999995`}, {8.350000000000001, 
               5.6499999999999995`}, {4.349999999999999, 
               2.6999999999999997`}, {4.349999999999999, 
               2.6999999999999997`}, {4.7, 9.3}, {4.7, 9.3}, {
               0.6499999999999995, 2.6999999999999997`}, {0.6499999999999995, 
               9.3}, {8.350000000000001, 2.6999999999999997`}, {
               8.350000000000001, 9.3}}, {{{
                  EdgeForm[], 
                  GrayLevel[0.8], 
                  GraphicsGroupBox[{
                    PolygonBox[{{5, 1, 9}, {8, 4, 12}}], 
                    PolygonBox[{{10, 2, 6, 11, 3, 7}}]}]}, {}, {}, {}, {}}}, 
               VertexColors -> {{0.9411764705882353, 0.863889524681468, 
                0.5378347447928588}, {0.8171435111009384, 0.842046234836347, 
                0.7389486533913177}, {0.8171435111009384, 0.842046234836347, 
                0.7389486533913177}, {0.9457084000915541, 0.6821393148699169, 
                0.40108339055466546`}, {0.9411764705882353, 0.863889524681468,
                 0.5378347447928588}, {0.8171435111009384, 0.842046234836347, 
                0.7389486533913177}, {0.8171435111009384, 0.842046234836347, 
                0.7389486533913177}, {0.9457084000915541, 0.6821393148699169, 
                0.40108339055466546`}, {0.9411764705882353, 0.863889524681468,
                 0.5378347447928588}, {0.8171435111009384, 0.842046234836347, 
                0.7389486533913177}, {0.8171435111009384, 0.842046234836347, 
                0.7389486533913177}, {0.9457084000915541, 0.6821393148699169, 
                0.40108339055466546`}}], {
               AbsolutePointSize[4], 
               GrayLevel[0], 
               PointBox[{{1, 3}, {5, 6}, {8, 9}}]}}, {
             ImageSize -> 200, AspectRatio -> 1, Frame -> True, 
              FrameLabel -> {None, None}, Method -> {}, 
              PlotRange -> {{0.6499999999999995, 8.350000000000001}, {
               2.6999999999999997`, 9.3}}, PlotRangeClipping -> True, 
              PlotRangePadding -> 0.1}], TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show Delaunay triangulation", "input" -> 
         "VoronoiPlot__Show Delaunay triangulation"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "PseudoInverse", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "List", "title" -> "Pseudoinverse"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"PseudoInverse[{{1, 3}, {5, 6}, {8, 9}}]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              StyleBox[
               FractionBox["1", "105"], ScriptLevel -> 1], 
              RowBox[{"(", "\[NoBreak]", 
                GridBox[{{
                   RowBox[{"-", "63"}], "0", "21"}, {"55", "5", 
                   RowBox[{"-", "10"}]}}, RowSpacings -> 1, ColumnSpacings -> 
                 1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
                "\[NoBreak]", ")"}]}], TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "PseudoInverse__Approximate form"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "a={{1,3},{5,6},{8,9}}", "score" -> "0.535714", "level" -> 
        "medium"}, {"\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.392857", "level" -> "medium"}, {
         "ListPlot[a]"}], "\n  "}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.196", 
    "parsetiming" -> "0.522", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa3349212f5ecd6f67d53700004i07g3g36a0ai4d2", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "30", "related" -> "", 
    "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:4.19627"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 55, 28.72378`8.210816573260221}, "Line" -> 24, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Dimensions", "Dimensions", 1, 1, "Input", 
    "Dimensions[{{1, 3}, {5, 6}, {8, 9}}]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "a={{1,3},{5,6},{8,9}};b=ListPlot[a];"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{289., {64., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.668694928784636*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "ListPlot[{1,2,3}]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plot", 1, 1, "Input", 
        "ListLinePlot[{1, 2, 3}, Mesh -> All, Filling -> Axis, AxesOrigin -> \
{1, 0}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    TagBox["1", HoldForm], ",", 
                    TagBox["2", HoldForm], ",", 
                    TagBox["3", HoldForm]}], "}"}], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[{1, 2, 3}, Mesh -> All, Filling -> Axis, AxesOrigin -> \
{1, 0}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, 
              
              GraphicsComplexBox[{{1., 1.}, {2., 2.}, {3., 3.}, {1., 0.}, {3.,
                0.}}, {{{}, {
                  EdgeForm[], 
                  Directive[{
                    Opacity[0.2], 
                    Hue[0.67, 0.6, 0.6]}], 
                  GraphicsGroupBox[{
                    PolygonBox[{{1, 4, 5, 3, 2}}]}]}, {}, {}}, {{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[{1, 2, 3}]}}, {{
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  PointBox[{1, 2, 3}]}, {}, {}}}], {}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[
                    1, {3, 2}, 3, {{0.5, 1., 1.5}, {0.3333333333333333, 
                    0.6666666666666666, 1.}}, {{0.5, 0.3333333333333333}, {1.,
                     0.6666666666666666}, {1.5, 1.}}, {{1., 1.}, {2., 2.}, {
                    3., 3.}}, Automatic, 
                    Hold[
                    
                    Nearest[{{0.5, 0.3333333333333333}, {1., 
                    0.6666666666666666}, {1.5, 1.}} -> {{1., 1.}, {2., 2.}, {
                    3., 3.}}]]][#/{2., 3.}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AxesLabel -> {None, None}, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> True, AxesOrigin -> {1, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
              300., LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
              Method -> {}, PlotRange -> {{1, 3.}, {0, 3.}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{None, 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.605", 
    "parsetiming" -> "0.357", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa392320ch2dh06790b16e00005a4c7ce960h92f6h", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "2", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa392420ch2dh06790b16e00004479eddg9gd27a4c&s=2", "version" -> "2.6", 
    "profile" -> "EnterDoQuery:0.,StartWrap:0.605155"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 56, 54.681282`8.490413662459465}, "Line" -> 25, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plot", 1, 1, "Input", 
    "ListLinePlot[{1, 2, 3}, Mesh -> All, Filling -> Axis, AxesOrigin -> {1, \
0}]"}, Typeset`open$$ = False, Typeset`newq$$ = "ListPlot[{1,2,3}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{568., {45., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 GraphicsBox[{{}, 
   GraphicsComplexBox[{{1., 1.}, {2., 2.}, {3., 3.}, {1., 0.}, {3., 
    0.}}, {{{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[{{1, 4, 5, 3, 2}}]]}, {}, {}}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3}]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       PointBox[{1, 2, 3}]}, {}, {}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{1., 3.}, {0., 3.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6686950147335043`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "ListPlot{{1,3},{5,6},{8,9}};", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plot", 1, 1, "Input", 
        "ListLinePlot[{1, 3, 5, 6}, Mesh -> All, Filling -> Axis, AxesOrigin \
-> {1, 0}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    TagBox["1", HoldForm], ",", 
                    TagBox["3", HoldForm], ",", 
                    TagBox["5", HoldForm], ",", 
                    TagBox["6", HoldForm]}], "}"}], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[{1, 3, 5, 6}, Mesh -> All, Filling -> Axis, AxesOrigin \
-> {1, 0}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, 
              
              GraphicsComplexBox[{{1., 1.}, {2., 3.}, {3., 5.}, {4., 6.}, {1.,
                0.}, {4., 0.}}, {{{}, {
                  EdgeForm[], 
                  Directive[{
                    Opacity[0.2], 
                    Hue[0.67, 0.6, 0.6]}], 
                  GraphicsGroupBox[{
                    PolygonBox[{{1, 5, 6, 4, 3, 2}}]}]}, {}, {}}, {{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[{1, 2, 3, 4}]}}, {{
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  PointBox[{1, 2, 3, 4}]}, {}, {}}}], {}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[
                    1, {4, 2}, 3, {{0.3333333333333333, 0.6666666666666666, 
                    1., 1.3333333333333333`}, {0.16666666666666666`, 0.5, 
                    0.8333333333333333, 1.}}, {{0.3333333333333333, 
                    0.16666666666666666`}, {0.6666666666666666, 0.5}, {1., 
                    0.8333333333333333}, {1.3333333333333333`, 1.}}, {{1., 
                    1.}, {2., 3.}, {3., 5.}, {4., 6.}}, Automatic, 
                    Hold[
                    
                    Nearest[{{0.3333333333333333, 0.16666666666666666`}, {
                    0.6666666666666666, 0.5}, {1., 0.8333333333333333}, {
                    1.3333333333333333`, 1.}} -> {{1., 1.}, {2., 3.}, {3., 
                    5.}, {4., 6.}}]]][#/{3., 6.}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AxesLabel -> {None, None}, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> True, AxesOrigin -> {1, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], ImageSize -> 
              300., LabelStyle -> {FontFamily -> "Verdana", FontSize -> 10}, 
              Method -> {}, PlotRange -> {{1, 4.}, {0, 6.}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{None, 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "MultiClash", "word" -> "", "template" -> 
        "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "NonEnclosedNonDelimitedRepeatedNumbersLength2", "word" -> 
          "1 3", "desc" -> " referring to math", "input" -> 
          "*MC.1+3-_*NonEnclosedNonDelimitedRepeatedNumbersLength2-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "NonNegativeDecimalInteger", "word" -> "1", "desc" -> 
          "a decimal number", "input" -> 
          "*MC.1+3-_*NonNegativeDecimalInteger-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "ListPlot 1 3 5 6", "score" -> "0.403735", "level" -> 
        "medium"}, {}]}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "3.313", 
    "parsetiming" -> "0.433", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa62661fd8eg8d0d82ge29000016idhed4h653ea0h", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "10", "related" -> "", 
    "version" -> "2.6", "profile" -> "EnterDoQuery:0.,StartWrap:3.31336"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2016, 4, 4, 1, 58, 24.20296`8.136443465662692}, "Line" -> 26, 
    "SessionID" -> 23541111368355342117}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plot", 1, 1, "Input", 
    "ListLinePlot[{1, 3, 5, 6}, Mesh -> All, Filling -> Axis, AxesOrigin -> \
{1, 0}]"}, Typeset`open$$ = False, Typeset`newq$$ = 
   "ListPlot{{1,3},{5,6},{8,9}};"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{589., {64., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 GraphicsBox[{{}, 
   GraphicsComplexBox[{{1., 1.}, {2., 3.}, {3., 5.}, {4., 6.}, {1., 0.}, {4., 
    0.}}, {{{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[
        PolygonBox[{{1, 5, 6, 4, 3, 2}}]]}, {}, {}}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3, 4}]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       PointBox[{1, 2, 3, 4}]}, {}, {}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{1., 4.}, {0., 6.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.668695104264011*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"ListPlot", "\[IndentingNewLine]", 
   RowBox[{"Plot", "[", 
    RowBox[{
     TagBox[
      FrameBox["f"],
      "Placeholder"], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        FrameBox["x"],
        "Placeholder"], ",", 
       TagBox[
        FrameBox[
         SubscriptBox["x", "min"]],
        "Placeholder"], ",", 
       TagBox[
        FrameBox[
         SubscriptBox["x", "max"]],
        "Placeholder"]}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.668693924842029*^9, 3.668693954683528*^9}, 
   3.6686947298903313`*^9, {3.6686949733382473`*^9, 3.668694976485358*^9}}],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.668694982695237*^9, 3.66869500411812*^9}}]
},
WindowSize->{808, 603},
WindowMargins->{{Automatic, -186}, {Automatic, 21}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (September 9, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 15682, 382, 61, "WolframAlphaShortInput"],
Cell[16265, 406, 339, 10, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16641, 421, 19815, 476, 61, "WolframAlphaShortInput"],
Cell[36459, 899, 701, 22, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37197, 926, 11217, 231, 97, "WolframAlphaShortInput"],
Cell[48417, 1159, 115, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48569, 1167, 316, 9, 28, "Input"],
Cell[48888, 1178, 35519, 584, 302, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84444, 1767, 42825, 854, 78, "WolframAlphaShortInput"],
Cell[127272, 2623, 35517, 584, 276, "Output"]
}, Open  ]],
Cell[162804, 3210, 2575, 72, 61, "WolframAlphaShortInput"],
Cell[CellGroupData[{
Cell[165404, 3286, 352310, 5804, 78, "WolframAlphaShortInput"],
Cell[517717, 9092, 135857, 2205, 420, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[653611, 11302, 448, 12, 28, "Input"],
Cell[654062, 11316, 130706, 2117, 405, "Output"]
}, Open  ]],
Cell[784783, 13436, 94, 1, 28, "Input"],
Cell[784880, 13439, 2641, 75, 61, "WolframAlphaShortInput"],
Cell[CellGroupData[{
Cell[787546, 13518, 282, 8, 28, "Input"],
Cell[787831, 13528, 677, 19, 342, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[788545, 13552, 12960, 239, 79, "WolframAlphaShortInput"],
Cell[801508, 13793, 592, 22, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[802137, 13820, 12960, 239, 79, "WolframAlphaShortInput"],
Cell[815100, 14061, 592, 22, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[815729, 14088, 12983, 240, 79, "WolframAlphaShortInput"],
Cell[828715, 14330, 601, 22, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[829353, 14357, 11410, 231, 998, "WolframAlphaShortInput"],
Cell[840766, 14590, 115, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[840918, 14598, 11579, 235, 97, "WolframAlphaShortInput"],
Cell[852500, 14835, 115, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[852652, 14843, 11576, 231, 97, "WolframAlphaShortInput"],
Cell[864231, 15076, 115, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[864383, 15084, 395, 10, 28, "Input"],
Cell[864781, 15096, 1267, 33, 249, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[866085, 15134, 11748, 228, 97, "WolframAlphaShortInput"],
Cell[877836, 15364, 115, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[877988, 15372, 11896, 242, 78, "WolframAlphaShortInput"],
Cell[889887, 15616, 1241, 32, 244, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[891165, 15653, 13103, 266, 97, "WolframAlphaShortInput"],
Cell[904271, 15921, 1267, 33, 249, "Output"]
}, Open  ]],
Cell[905553, 15957, 683, 22, 89, "Input"],
Cell[906239, 15981, 183, 4, 28, "Input"]
}
]
*)

(* End of internal cache information *)

